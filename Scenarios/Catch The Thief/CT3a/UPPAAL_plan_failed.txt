null[1;34mGuessed query file: [0;0mUPPAAL/UPPAAL_model.q
Options for the verification:
  Generating some trace
  Search order is breadth first (UPPAAL), automatic (TIGA)
  Using conservative space optimisation
  Seed is 1549448006
  State space representation uses minimal constraint systems
[2K
Verifying property 1 at line 1
 -- [1;34mThroughput: 2509 states/sec[0;0m, Size: 59 states, Load: 47 states[K
 -- [1;34mThroughput: 76631 states/sec[0;0m, Size: 464 states, Load: 367 states[K
 -- [1;34mThroughput: 71879 states/sec[0;0m, Size: 2798 states, Load: 2109 states[K
 -- [1;34mThroughput: 65780 states/sec[0;0m, Size: 15661 states, Load: 10906 states[K
 -- [1;34mThroughput: 59468 states/sec[0;0m, Size: 32453 states, Load: 13192 states[K
 -- [1;34mThroughput: 51570 states/sec[0;0m, Size: 40332 states, Load: 6868 states[K
Preparing: 0%[K
Preparing: 1%[K
Preparing: 2%[K
Preparing: 3%[K
Preparing: 4%[K
Preparing: 5%[K
Preparing: 6%[K
Preparing: 7%[K
Preparing: 8%[K
Preparing: 9%[K
Preparing: 10%[K
Preparing: 11%[K
Preparing: 12%[K
Preparing: 13%[K
Preparing: 14%[K
Preparing: 15%[K
Preparing: 16%[K
Preparing: 17%[K
Preparing: 18%[K
Preparing: 19%[K
Preparing: 20%[K
Preparing: 21%[K
Preparing: 22%[K
Preparing: 23%[K
Preparing: 24%[K
Preparing: 25%[K
Preparing: 26%[K
Preparing: 27%[K
Preparing: 28%[K
Preparing: 29%[K
Preparing: 30%[K
Preparing: 31%[K
Preparing: 32%[K
Preparing: 33%[K
Preparing: 34%[K
Preparing: 35%[K
Preparing: 36%[K
Preparing: 37%[K
Preparing: 38%[K
Preparing: 39%[K
Preparing: 40%[K
Preparing: 41%[K
Preparing: 42%[K
Preparing: 43%[K
Preparing: 44%[K
Preparing: 45%[K
Preparing: 46%[K
Preparing: 47%[K
Preparing: 48%[K
Preparing: 49%[K
Preparing: 50%[K
Preparing: 51%[K
Preparing: 52%[K
Preparing: 53%[K
Preparing: 54%[K
Preparing: 55%[K
Preparing: 56%[K
Preparing: 57%[K
Preparing: 58%[K
Preparing: 59%[K
Preparing: 60%[K
Preparing: 61%[K
Preparing: 62%[K
Preparing: 63%[K
Preparing: 64%[K
Preparing: 65%[K
Preparing: 66%[K
Preparing: 67%[K
Preparing: 68%[K
Preparing: 69%[K
Preparing: 70%[K
Preparing: 71%[K
Preparing: 72%[K
Preparing: 73%[K
Preparing: 74%[K
Preparing: 75%[K
Preparing: 76%[K
Preparing: 77%[K
Preparing: 78%[K
Preparing: 79%[K
Preparing: 80%[K
Preparing: 81%[K
Preparing: 82%[K
Preparing: 83%[K
Preparing: 84%[K
Preparing: 85%[K
Preparing: 86%[K
Preparing: 87%[K
Preparing: 88%[K
Preparing: 89%[K
Preparing: 90%[K
Preparing: 91%[K
Preparing: 92%[K
Preparing: 93%[K
Preparing: 94%[K
Preparing: 95%[K
Preparing: 96%[K
Preparing: 97%[K
Preparing: 98%[K
Preparing: 99%[K
[2K -- Property is NOT satisfied.

Counter strategy to prevent from winning:

State: ( states.base police1.going_d_to_a police2.b thief.c reachObj._unlocked ) Ppolice1=-41 Ppolice2=2 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-32 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-12 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.d police2.a thief.going_d_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=-12 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=2 Pthief=-14 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.b thief.d reachObj.initial_location ) Ppolice1=3 Ppolice2=2 Pthief=4 
While you are in (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief<=1) || (Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (0<Cpolice1 && 0<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=1 && Creach<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-43 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<9 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cthief), wait.
When you are in (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-32 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-23 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<=1 && Cpolice2==Cthief) || (Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-12 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-21 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.a thief.going_a_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=1 Pthief=-14 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-14 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.c thief.going_b_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=3 Pthief=-21 
While you are in (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2-Cpolice1<1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<=-1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=-1 && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<9 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10), wait.
When you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief<=Cpolice2) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=10) || (10<Cthief && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cthief-Cpolice1<=10) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=1 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=-14 Pthief=-41 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=1 Pthief=-32 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-32 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=-34 Pthief=-43 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=1 && Cpolice1-Cpolice2==-10 && Cpolice1-Creach<-10 && Cthief-Cpolice1<=10), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.d thief.going_a_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=4 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.d reachObj.initial_location ) Ppolice1=2 Ppolice2=-12 Pthief=4 
While you are in (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (0<Cpolice1 && 1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach && Cthief-Cpolice1<10) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<Cpolice1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=2 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=-12 Pthief=-12 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-32 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-14 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-12 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2==0) || (1<Cthief && 0<Creach && Cpolice1<=2 && Cpolice2==0 && Cthief<Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2-Cpolice1<-2 && Creach<=Cpolice2) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cthief<=2 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-2 && Cpolice2<=Cthief && Cthief<Cpolice1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=2) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=2 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.a reachObj.initial_location ) Ppolice1=3 Ppolice2=-32 Pthief=1 
While you are in (0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.c reachObj._unlocked ) Ppolice1=-21 Ppolice2=1 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<-1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-41 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.a reachObj._unlocked ) Ppolice1=-14 Ppolice2=4 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.d reachObj.initial_location ) Ppolice1=-14 Ppolice2=4 Pthief=4 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-14 Pthief=-21 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.c reachObj._unlocked ) Ppolice1=3 Ppolice2=-23 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-21 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=-21 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=1 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cthief<=10 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-43 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.b thief.a reachObj._unlocked ) Ppolice1=2 Ppolice2=2 Pthief=1 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.a reachObj.initial_location ) Ppolice1=4 Ppolice2=-21 Pthief=1 
While you are in (Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<11 && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<=10) || (0<Cpolice1 && 0<Creach && Cpolice1<=1 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<10 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.

State: ( states.base police1.b police2.d thief.going_a_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.a thief.going_a_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=1 Pthief=-14 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.d reachObj._unlocked ) Ppolice1=2 Ppolice2=-41 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=-14 Pthief=-12 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.c reachObj._unlocked ) Ppolice1=-32 Ppolice2=4 Pthief=3 
While you are in (0<Cpolice1 && Cpolice1<=11) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2==-10 && Cpolice1-Cthief<=-9 && Cpolice1-Creach<-10 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=1 && Cpolice1-Cpolice2==-10 && Cpolice1-Creach<-10 && Cthief-Cpolice1<=10), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.a thief.going_b_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=1 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.a reachObj.initial_location ) Ppolice1=-32 Ppolice2=2 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<=1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=3 Pthief=-41 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.c thief.going_a_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=3 Pthief=-12 
While you are in (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief), wait.
When you are in (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-43 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Cthief && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.c thief.going_b_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-21 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.a thief.going_a_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=1 Pthief=-14 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-12 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=-21 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=-23 Pthief=-14 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-43 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-41 Pthief=-41 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.d thief.going_a_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=4 Pthief=-12 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=4 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2), wait.
When you are in (0<Cpolice1 && 10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-34 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.d thief.d reachObj._unlocked ) Ppolice1=4 Ppolice2=4 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-23 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=Cpolice1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-12 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<=-9 && Cthief-Cpolice2<=-9 && Cthief-Creach<-10) || (Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cpolice1 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief-Cpolice1<=-10 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0) || (0<Cpolice1 && 0<Creach && Cpolice1<=1 && Cpolice1-Cthief<-1 && Cpolice2==0) || (1<Cthief && Cpolice1<=1 && Cpolice1<Creach && Cpolice2==0 && Cthief-Cpolice1<=1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=3 Pthief=-21 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=-21 Pthief=-34 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=-34 Pthief=-23 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-23 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=-32 Pthief=-32 
While you are in (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.c reachObj.initial_location ) Ppolice1=2 Ppolice2=-43 Pthief=3 
While you are in (Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<11 && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<=10) || (0<Cpolice1 && 0<Creach && Cpolice1<=1 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<10 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-12 Pthief=2 
While you are in (0<Cpolice1 && 0<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<10) || (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.d reachObj.initial_location ) Ppolice1=-43 Ppolice2=1 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=-41 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1==0 && Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=-14 Pthief=-43 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-21 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=-12 Pthief=-41 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-34 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.a reachObj._unlocked ) Ppolice1=3 Ppolice2=-14 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-32 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief==10 && Cpolice1<Creach && Cpolice2<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cthief) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<Cthief), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.d reachObj.initial_location ) Ppolice1=-21 Ppolice2=4 Pthief=4 
While you are in (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2==Cthief) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cthief<Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2==-10 && Cpolice1-Cthief<=-9 && Cpolice1-Creach<-10 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=1 && Cpolice1-Cpolice2==-10 && Cpolice1-Creach<-10 && Cthief-Cpolice1<=10), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-12 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1<=11 && Cpolice1-Creach<1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.a reachObj._unlocked ) Ppolice1=2 Ppolice2=-41 Pthief=1 
While you are in (Cpolice2<=11), wait.

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-41 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=2 && Cpolice1-Creach<1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=4 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.c reachObj._unlocked ) Ppolice1=3 Ppolice2=-12 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.c police2.b thief.going_d_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=2 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (Cpolice2<Cpolice1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cthief<=11) || (10<Cthief && Cpolice2<Cpolice1 && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.a thief.going_c_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=1 Pthief=-34 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Cpolice2 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2), wait.
When you are in (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-32 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Creach<Cpolice2 && Creach<=Cthief), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-43 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-23 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-12 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=-21 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-34 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=4 Pthief=-23 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=10 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.c thief.going_a_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=3 Pthief=-12 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.a reachObj._unlocked ) Ppolice1=-21 Ppolice2=2 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=1 Pthief=-14 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.b thief.going_b_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=2 Pthief=-23 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.d thief.c reachObj._unlocked ) Ppolice1=1 Ppolice2=4 Pthief=3 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (0<Creach && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=-41 Pthief=-23 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cthief) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10) || (Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=-10 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10) || (Cpolice1-Cthief<-10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-10 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-23 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cthief<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief-Cpolice1<=1 && Cthief-Cpolice2<12) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=-41 Pthief=-34 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-34 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=-43 Pthief=-23 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-21 Pthief=-12 
While you are in (Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2==-10 && Cpolice1-Cthief<=-9 && Cpolice1-Creach<-10 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=1 && Cpolice1-Cpolice2==-10 && Cpolice1-Creach<-10 && Cthief-Cpolice1<=10), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-32 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=-32 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Creach<1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.a thief.going_d_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1-Cpolice2<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.d reachObj._unlocked ) Ppolice1=-41 Ppolice2=3 Pthief=4 
While you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief) || (Cpolice1<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=3 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<9 && Cpolice1<Creach && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief) || (Cpolice1<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cpolice2<Creach && Cthief==10) || (1<Cpolice2 && 0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-21 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-14 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.a reachObj._unlocked ) Ppolice1=4 Ppolice2=-14 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-41 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.a reachObj._unlocked ) Ppolice1=1 Ppolice2=-23 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-23 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-41 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=10 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.a thief.going_b_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-14 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.c thief.going_c_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=3 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-43 Pthief=-21 
While you are in (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.d reachObj.initial_location ) Ppolice1=4 Ppolice2=-12 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1==Cpolice2 && Cpolice1<=Cthief && Cthief<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.a reachObj.initial_location ) Ppolice1=-23 Ppolice2=3 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1-Cpolice2<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (Cpolice1-Cthief<=10 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cthief<1 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cthief<=10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<Cpolice2 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1==Cpolice2 && Cthief-Cpolice1<=1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.d thief.going_b_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=4 Pthief=-21 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=3 Pthief=-32 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-34 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=1 Pthief=-12 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief-Cpolice2<=10) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.b reachObj._unlocked ) Ppolice1=-23 Ppolice2=2 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.a reachObj._unlocked ) Ppolice1=-12 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.b thief.going_b_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=2 Pthief=-23 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-43 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.a reachObj.initial_location ) Ppolice1=1 Ppolice2=-23 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice1) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=-1) || (1<Cthief && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.d reachObj.initial_location ) Ppolice1=4 Ppolice2=-32 Pthief=4 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=-43 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.d thief.going_d_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=4 Pthief=-41 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.b reachObj.initial_location ) Ppolice1=1 Ppolice2=-32 Pthief=2 
While you are in (0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=Cpolice2) || (Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Creach<=Cpolice2 && Creach<Cthief), wait.

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-21 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-21 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-32 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=-12 Pthief=-12 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-23 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-12 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11), wait.
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-12 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach), wait.

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-34 Pthief=-43 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-21 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cpolice2<=Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cpolice2<=Cthief && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<Cpolice2) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cthief<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief-Cpolice1<=1 && Cthief-Cpolice2<12) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=2 Pthief=-43 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=4 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.d reachObj._unlocked ) Ppolice1=-21 Ppolice2=4 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-41 Pthief=-14 
While you are in (Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-12 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-21 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && 0<Cthief && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-23 Pthief=4 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<Cpolice1) || (Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.b reachObj._unlocked ) Ppolice1=-21 Ppolice2=1 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-41 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=-41 Pthief=-34 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-21 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cpolice2<=Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (0<Creach && Cpolice1-Cpolice2<-2 && Cpolice2<=11 && Cpolice2<=Cthief && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<9 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-12 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<11 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<=-9 && Cthief-Cpolice2<=-9 && Cthief-Creach<-10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cthief<9 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief-Cpolice2<=-10) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.a thief.b reachObj._unlocked ) Ppolice1=4 Ppolice2=1 Pthief=2 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.d police2.d thief.going_c_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=4 Pthief=-32 
While you are in (0<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice2-Cpolice1<9 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<9 && Cthief-Cpolice2<9 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.c reachObj._unlocked ) Ppolice1=4 Ppolice2=-43 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.a reachObj.initial_location ) Ppolice1=-34 Ppolice2=2 Pthief=1 
While you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<Cpolice2 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1-Cthief<=10 && Cpolice2<=Cpolice1 && Cthief<=1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-23 Pthief=2 
While you are in (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=3 Pthief=-34 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=1 Pthief=-34 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.c reachObj._unlocked ) Ppolice1=-32 Ppolice2=2 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1-Cpolice2<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.a thief.a reachObj.initial_location ) Ppolice1=1 Ppolice2=1 Pthief=1 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=1 && Cpolice2==Cthief) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=1 && Cpolice2<=Cpolice1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=Cthief && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<Cthief && Cthief<=Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.c reachObj._unlocked ) Ppolice1=4 Ppolice2=-21 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=4 Pthief=-41 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=-32 Pthief=-21 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-14 Pthief=-14 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=10 && Cpolice1-Cpolice2<=1 && Cpolice1==Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.b thief.going_a_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.a reachObj.initial_location ) Ppolice1=-41 Ppolice2=2 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cthief<=1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Cpolice2 && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-32 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-14 Pthief=-43 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=3 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<9 && Cpolice1<Creach && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=10 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=4 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.a reachObj.initial_location ) Ppolice1=1 Ppolice2=-32 Pthief=1 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=4 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.b reachObj._unlocked ) Ppolice1=3 Ppolice2=-23 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=-14 Pthief=-41 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-32 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=2 && Cpolice1-Creach<1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-41 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.c reachObj.initial_location ) Ppolice1=-43 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<Cpolice1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cthief<=1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.d police2.c thief.going_a_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=3 Pthief=-14 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.a reachObj.initial_location ) Ppolice1=1 Ppolice2=-12 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2-Cthief<-1 && Cthief<Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-14 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=2 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-21 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=1 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-34 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=-12 Pthief=-14 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=4 Pthief=-43 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-41 Pthief=4 
While you are in (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-32 Pthief=4 
While you are in (Cpolice1-Cthief<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.d police2.d thief.b reachObj.initial_location ) Ppolice1=4 Ppolice2=4 Pthief=2 
While you are in (1<Cpolice1 && 0<Creach && Cthief<=1) || (1<Cpolice2 && 0<Creach && Cpolice1<Cthief && Cthief<=1) || (Cpolice1<=1 && Cpolice2<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=1 && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cthief<=Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cpolice1 && 1<Cthief && 0<Creach && Cthief<=Cpolice2) || (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2<Cpolice1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-34 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.b reachObj._unlocked ) Ppolice1=-34 Ppolice2=2 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.c reachObj.initial_location ) Ppolice1=4 Ppolice2=-43 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Creach<1 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.b reachObj.initial_location ) Ppolice1=-21 Ppolice2=2 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2==Cthief) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=Cthief), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-34 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<Cpolice1 && Creach<=Cthief) || (0<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1) || (10<Cthief && Cpolice1<=Cthief && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-32 Pthief=-23 
While you are in (0<Creach && Cpolice1==Cpolice2 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-32 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11 && Creach<11 && Creach<=Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-21 Pthief=-21 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-32 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1<Creach && Cpolice2<Cthief && Cthief-Cpolice1<=-10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief==10 && Cpolice1-Creach<10 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2==0) || (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0) || (0<Creach && Cpolice1<=1 && Cpolice1-Cthief<-1 && Cpolice2==0 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=3 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.d reachObj._unlocked ) Ppolice1=1 Ppolice2=-32 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-43 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=1 Pthief=-12 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=2 Pthief=-21 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-23 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-34 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-34 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Cthief<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-32 Pthief=-23 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=-43 Pthief=-14 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.b thief.going_c_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.b reachObj._unlocked ) Ppolice1=1 Ppolice2=-12 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-23 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=3 Pthief=-34 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=4 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.a reachObj._unlocked ) Ppolice1=1 Ppolice2=-21 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-21 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cthief<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief-Cpolice1<=1 && Cthief-Cpolice2<12) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief-Cpolice1<1 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=-43 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1==0 && Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.b reachObj.initial_location ) Ppolice1=4 Ppolice2=-21 Pthief=2 
While you are in (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-10) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief-Cpolice1<1 && Cthief<=Cpolice2 && Creach<=Cthief), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-32 Pthief=-32 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=-14 Pthief=-21 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-43 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=-21 Pthief=-23 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Creach), wait.
When you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1) || (10<Cthief && Cpolice1<=Cthief && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=11 && Cthief-Cpolice1<10 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-43 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.a reachObj.initial_location ) Ppolice1=-32 Ppolice2=3 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (1<Cpolice2 && Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=1 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.a reachObj.initial_location ) Ppolice1=3 Ppolice2=-14 Pthief=1 
While you are in (1<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach), wait.
When you are in (1<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (0<Cpolice2 && 1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2==0 && Cthief<Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-21 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=1 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cthief<=1 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<10 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<=11 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<10 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Creach<1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=2 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Creach<Cpolice2 && Creach<=Cthief), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-23 Pthief=-21 
While you are in (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.c reachObj._unlocked ) Ppolice1=3 Ppolice2=-41 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.c reachObj._unlocked ) Ppolice1=-43 Ppolice2=4 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.d police2.c thief.d reachObj.initial_location ) Ppolice1=4 Ppolice2=3 Pthief=4 
While you are in (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=1) || (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=1 && Cthief<Cpolice2), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-21 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-23 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.a reachObj._unlocked ) Ppolice1=-41 Ppolice2=3 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.c reachObj._unlocked ) Ppolice1=-23 Ppolice2=2 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-23 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-43 Pthief=2 
While you are in (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<1 && Cthief<=Cpolice2) || (Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-32 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-41 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-41 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-32 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief==10 && Cpolice1<Creach && Cpolice2<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cthief) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2 && Creach<Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<Cthief), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.a police2.a thief.going_a_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=1 Pthief=-12 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-12 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (0<Cpolice1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=-12 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=-21 Pthief=-12 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-12 Pthief=-21 
While you are in (Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.c reachObj.initial_location ) Ppolice1=-23 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-34 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=-41 Pthief=-32 
While you are in (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<-1 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.c reachObj._unlocked ) Ppolice1=-21 Ppolice2=4 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.d thief.going_b_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=4 Pthief=-21 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (1<=Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=10) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<1 && Cthief<Creach) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-23 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=11) || (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-21 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=3 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.a reachObj._unlocked ) Ppolice1=-23 Ppolice2=3 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-34 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Cthief<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.a thief.a reachObj._unlocked ) Ppolice1=2 Ppolice2=1 Pthief=1 
While you are in (Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.b reachObj._unlocked ) Ppolice1=-41 Ppolice2=4 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-23 Pthief=-32 
While you are in (0<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.b reachObj.initial_location ) Ppolice1=4 Ppolice2=-43 Pthief=2 
While you are in (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-10) || (0<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief-Cpolice1<1 && Cthief<=Cpolice2 && Creach<=Cthief), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2==0 && Cthief<=Cpolice1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.c reachObj.initial_location ) Ppolice1=1 Ppolice2=-34 Pthief=3 
While you are in (0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (0<Cpolice2 && 1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2==0 && Cthief<Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.c police2.c thief.going_d_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && Cpolice1==Cpolice2 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-41 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=-34 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-14 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-32 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Cthief<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.c reachObj._unlocked ) Ppolice1=-43 Ppolice2=2 Pthief=3 
While you are in (Cpolice1<=11), wait.

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.b reachObj._unlocked ) Ppolice1=-32 Ppolice2=3 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-12 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=4 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<10 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<10 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.b reachObj._unlocked ) Ppolice1=-23 Ppolice2=3 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.b reachObj.initial_location ) Ppolice1=4 Ppolice2=-14 Pthief=2 
While you are in (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (0<Cpolice1 && 1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach && Cthief-Cpolice1<10) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<Cpolice1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.d reachObj._unlocked ) Ppolice1=4 Ppolice2=-23 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.c reachObj.initial_location ) Ppolice1=-23 Ppolice2=2 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1-Cpolice2<10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=2 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.d thief.going_d_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=4 Pthief=-43 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=-23 Pthief=-41 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-23 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=-14 Pthief=-12 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.b thief.c reachObj._unlocked ) Ppolice1=3 Ppolice2=2 Pthief=3 
While you are in (Cpolice1<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.a reachObj.initial_location ) Ppolice1=-21 Ppolice2=3 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1-Cpolice2<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (Cpolice1-Cthief<=10 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cthief<1 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cthief<=10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<Cpolice2 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=1 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<9 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice1-Cthief<=10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (1<Cpolice2 && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (9<=Cpolice1 && 10<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief-Cpolice2<=10) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-34 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-43 Pthief=3 
While you are in (0<Cpolice1 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief-Cpolice1<=1) || (0<Cpolice1 && 0<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<11 && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=-21 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.b thief.a reachObj.initial_location ) Ppolice1=2 Ppolice2=2 Pthief=1 
While you are in (Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<1 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2-Cpolice1<1 && Cthief<=1 && Cthief<Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice2-Cpolice1<1 && Cthief<Cpolice1 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<=-1 && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cthief<=1 && Cthief-Cpolice2<1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2) || (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice2<Cpolice1) || (1<Cthief && Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=-23 Pthief=-34 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=2 Pthief=-21 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=2 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=4 Pthief=-41 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=4 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-32 Pthief=-41 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-21 Pthief=-12 
While you are in (0<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-14 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-21 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-32 Pthief=-23 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.d reachObj.initial_location ) Ppolice1=-21 Ppolice2=2 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief-Cpolice1<=-10) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1==Cpolice2 && Cpolice1<Cthief && Cthief-Cpolice1<=1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cthief<Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-43 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=2 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=2 Pthief=-23 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-34 Pthief=4 
While you are in (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1==0 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.b thief.d reachObj._unlocked ) Ppolice1=3 Ppolice2=2 Pthief=4 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-14 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief) || (Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=-41 Pthief=-21 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=1 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (10<=Cpolice1 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cthief<=1 && Cthief-Cpolice1<-1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-34 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=-14 Pthief=-32 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.d reachObj.initial_location ) Ppolice1=-21 Ppolice2=3 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice1<=1) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-21 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cthief && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-12 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.d reachObj.initial_location ) Ppolice1=-43 Ppolice2=2 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief-Cpolice1<=-10) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=1 && Cpolice2<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-32 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=1 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<=10 && Cpolice1-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<10 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cthief<=1 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice1<Creach && Cpolice2<11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10), wait.
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<=11 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<10 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-41 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cpolice2<=Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cpolice2<=Cthief && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<Cpolice2) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cthief<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief-Cpolice1<=1 && Cthief-Cpolice2<12) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-43 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.c thief.a reachObj._unlocked ) Ppolice1=1 Ppolice2=3 Pthief=1 
While you are in (Cpolice1<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=1 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=10 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<12 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-41 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-12 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-41 Pthief=4 
While you are in (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=4 Pthief=-41 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.d reachObj.initial_location ) Ppolice1=-41 Ppolice2=2 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief-Cpolice1<=-10) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cthief-Cpolice1<=1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=1 && Cpolice2<=Cpolice1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.a police2.b thief.c reachObj._unlocked ) Ppolice1=1 Ppolice2=2 Pthief=3 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-21 Pthief=-43 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<1 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-32 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-12 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=-12 Pthief=-14 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-23 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-34 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-32 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-14 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.b police2.c thief.going_b_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=3 Pthief=-21 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=-23 Pthief=-14 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.d thief.b reachObj._unlocked ) Ppolice1=1 Ppolice2=4 Pthief=2 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=-14 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<10 && Cpolice2==Cthief) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<=-10 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Creach && Cthief<=11) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=-14 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-43 Pthief=4 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cthief<=1 && Cpolice2-Cthief<=1 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-21 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-21 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-23 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Cthief && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10) || (10<=Cpolice2 && 10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10) || (Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<10 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<=-10 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cpolice2), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.c thief.going_c_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=3 Pthief=-32 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Cpolice2 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.b reachObj._unlocked ) Ppolice1=2 Ppolice2=-41 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.b reachObj.initial_location ) Ppolice1=-43 Ppolice2=4 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief-Cpolice1<=-10) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1==Cpolice2 && Cpolice1<Cthief && Cthief-Cpolice1<=1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cthief<Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=-41 Pthief=-34 
While you are in (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<-1 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.d reachObj.initial_location ) Ppolice1=-41 Ppolice2=1 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=-10) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.a reachObj.initial_location ) Ppolice1=4 Ppolice2=-12 Pthief=1 
While you are in (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2-Cthief<10 && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (10<=Cpolice2 && Cpolice1<=1 && Cpolice2-Cpolice1<=10 && Cpolice2-Cthief==10 && Cpolice2<Creach) || (Cpolice1<=1 && Cpolice1-Cpolice2<-9 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=-10) || (Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11) || (Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<1 && Cpolice2<Creach && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.d reachObj.initial_location ) Ppolice1=2 Ppolice2=-32 Pthief=4 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (1<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice2<=1 && Cpolice2-Cpolice1<1 && Cpolice2-Cthief<1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<Cpolice1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.b police2.a thief.going_d_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=4 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-12 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=3 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.d reachObj._unlocked ) Ppolice1=1 Ppolice2=-34 Pthief=4 
While you are in (Cpolice2<=11), wait.

State: ( states.base police1.going_b_to_c police2.b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=2 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.c thief.going_c_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=3 Pthief=-32 
While you are in (0<Cpolice2 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cthief<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=4 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.d thief.going_c_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=4 Pthief=-32 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=1 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=-43 Pthief=-41 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.d thief.a reachObj._unlocked ) Ppolice1=2 Ppolice2=4 Pthief=1 
While you are in true, wait.

State: ( states.base police1.going_a_to_d police2.a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=1 Pthief=-34 
While you are in (Cpolice1<9 && Cpolice1<Creach && Cpolice2-Cthief==-10 && Cthief==10) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (9<=Cpolice1 && 10<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2-Cthief<-10 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief-Cpolice2<=10 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=1 Pthief=-32 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.c reachObj._unlocked ) Ppolice1=-12 Ppolice2=1 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=3 Pthief=-32 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-21 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=4 Pthief=-41 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.b thief.going_a_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-32 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=-21 Pthief=-41 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-23 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.a police2.a thief.going_b_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=1 Pthief=-23 
While you are in (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice1-Cthief==-10 && Cpolice2<1 && Cpolice2<Creach && Cthief==10) || (Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (10<Creach && Cpolice1-Cpolice2==-1 && Cpolice2-Cthief==-9 && Cthief==10) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief) || (0<Creach && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief-Cpolice1<=9 && Cthief<Creach), wait.
When you are in (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<Creach && Cpolice2<=1 && Cthief-Cpolice1<10 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=-10 && Cpolice1<Creach && Cpolice2<=1 && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2-Cpolice1<1 && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.d reachObj.initial_location ) Ppolice1=3 Ppolice2=-21 Pthief=4 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=Cpolice1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-21 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2==0 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2==0 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<Cthief) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<10 && Cpolice2<Creach) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief-Cpolice1<1 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2==Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-41 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.a reachObj.initial_location ) Ppolice1=3 Ppolice2=-41 Pthief=1 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice2<=11 && Cpolice2<Creach && Cthief<=1) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice2 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=1 && Cpolice2==Cthief && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.c reachObj.initial_location ) Ppolice1=-14 Ppolice2=2 Pthief=3 
While you are in (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<Cpolice2) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cthief<1 && Cthief-Cpolice1<=-10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief-Cpolice1<-10 && Cthief-Cpolice2<=-1) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cthief-Cpolice1<=1) || (Cpolice1==10 && 10<Creach && Cpolice1-Cpolice2==9 && Cpolice2-Cthief==1 && Cthief==0) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=-21 Pthief=-21 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=-43 Pthief=-41 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cthief) || (Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1), wait.
When you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=-43 Pthief=-34 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-23 Pthief=-32 
While you are in (0<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-23 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-14 Pthief=-41 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=2 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=-14 Pthief=-12 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.d thief.going_b_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=4 Pthief=-23 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.d reachObj.initial_location ) Ppolice1=4 Ppolice2=-21 Pthief=4 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2==0 && Cthief<=Cpolice1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=-21 Pthief=-41 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2-Cpolice1<=10 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-34 Pthief=4 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cthief<10 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=-10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), wait.

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-23 Pthief=-41 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-12 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.b reachObj.initial_location ) Ppolice1=4 Ppolice2=-32 Pthief=2 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (1<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice2<=1 && Cpolice2-Cpolice1<1 && Cpolice2-Cthief<1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<Cpolice1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-43 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-41 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-41 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-23 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<9 && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<Cpolice1 && Creach<=Cpolice2), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.a police2.d thief.going_b_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=4 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (Cpolice2<Cpolice1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cthief<=11) || (10<Cthief && Cpolice2<Cpolice1 && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.d reachObj._unlocked ) Ppolice1=4 Ppolice2=-41 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=-41 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.a thief.b reachObj._unlocked ) Ppolice1=1 Ppolice2=1 Pthief=2 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.c police2.c thief.a reachObj.initial_location ) Ppolice1=3 Ppolice2=3 Pthief=1 
While you are in (0<Cpolice1 && 0<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cthief<=1 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=-34 Pthief=-23 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.c reachObj._unlocked ) Ppolice1=-14 Ppolice2=1 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=-41 Pthief=-14 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.a thief.going_b_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=1 Pthief=-23 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-23 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-43 Pthief=-34 
While you are in (Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.c thief.going_a_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=3 Pthief=-12 
While you are in (0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach) || (0<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.b thief.going_d_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=2 Pthief=-41 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.b thief.going_b_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=2 Pthief=-23 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=-21 Pthief=-14 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.d thief.going_c_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=-32 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2==-10 && Cpolice1-Cthief<=-9 && Cpolice1-Creach<-10 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=1 && Cpolice1-Cpolice2==-10 && Cpolice1-Creach<-10 && Cthief-Cpolice1<=10), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-23 Pthief=-23 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.a thief.d reachObj._unlocked ) Ppolice1=3 Ppolice2=1 Pthief=4 
While you are in true, wait.

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-14 Pthief=1 
While you are in (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=11 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.d reachObj._unlocked ) Ppolice1=-14 Ppolice2=1 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-21 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-43 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=3 Pthief=-32 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.c thief.going_b_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=3 Pthief=-21 
While you are in (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice1-Cthief==-10 && Cpolice2<1 && Cpolice2<Creach && Cthief==10) || (Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (10<Creach && Cpolice1-Cpolice2==-1 && Cpolice2-Cthief==-9 && Cthief==10) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief) || (0<Creach && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2) || (Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<=9 && Cthief<Creach), wait.
When you are in (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<Creach && Cpolice2<=1 && Cthief-Cpolice1<10 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=-10 && Cpolice1<Creach && Cpolice2<=1 && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-14 Pthief=-41 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=2 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<10 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<10 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-41 Pthief=4 
While you are in (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.d thief.going_b_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=4 Pthief=-23 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Creach<Cpolice2 && Creach<=Cthief), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-21 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.d thief.b reachObj.initial_location ) Ppolice1=3 Ppolice2=4 Pthief=2 
While you are in (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief<=1) || (Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (0<Cpolice1 && 0<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=1 && Creach<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-23 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief-Creach<1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.d police2.c thief.going_d_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=3 Pthief=-41 
While you are in (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (1<Cpolice1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=1 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<9 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (0<Cpolice1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (10<Cthief && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cthief-Cpolice1<=10) || (10<Cthief && Cthief<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=-32 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=3 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<8 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice1<=Cthief && Cthief-Cpolice1<=1 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.a reachObj._unlocked ) Ppolice1=-43 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-32 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=1 Pthief=-23 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.a reachObj._unlocked ) Ppolice1=-34 Ppolice2=3 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-34 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.b police2.a thief.going_b_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=1 Pthief=-23 
While you are in (1<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=1 && Cpolice1<Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2), wait.
When you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<=10) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-41 Pthief=4 
While you are in (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.b police2.d thief.going_d_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=4 Pthief=-43 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-21 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10 && Creach<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.b reachObj.initial_location ) Ppolice1=4 Ppolice2=-41 Pthief=2 
While you are in (0<Creach && Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-10) || (0<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief-Cpolice1<1 && Cthief<=Cpolice2 && Creach<=Cthief), wait.
When you are in (1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-12 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=-43 Pthief=-21 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.b reachObj._unlocked ) Ppolice1=2 Ppolice2=-21 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-21 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-12 Pthief=1 
While you are in (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2==0 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-12 Pthief=3 
While you are in (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-12 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11), wait.

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-41 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-21 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=2 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.d thief.a reachObj.initial_location ) Ppolice1=3 Ppolice2=4 Pthief=1 
While you are in (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=1 && Cthief<=Cpolice2) || (Cthief<=1 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cpolice1 && Cthief<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=3 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (10<=Cpolice1 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cpolice2<8 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cthief-Cpolice1<-1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-34 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1<Creach && Cpolice2<Cthief && Cthief-Cpolice1<=-10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief==10 && Cpolice1-Creach<10 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2==0) || (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0) || (0<Creach && Cpolice1<=1 && Cpolice1-Cthief<-1 && Cpolice2==0 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=-41 Pthief=-14 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.a reachObj.initial_location ) Ppolice1=-12 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1) || (1<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice2<1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.d reachObj._unlocked ) Ppolice1=3 Ppolice2=-32 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Creach<1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-21 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-21 Pthief=-21 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-23 Pthief=2 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<Cpolice1) || (Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<Cpolice1 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<Cpolice1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-41 Pthief=-23 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-41 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=-41 Pthief=-12 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.d reachObj.initial_location ) Ppolice1=1 Ppolice2=-12 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice2<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=1 Pthief=-43 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-14 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice2-Cthief<=10 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-41 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=Cpolice1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-43 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-34 Pthief=1 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=Cpolice1) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cthief) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief==10 && Cpolice1<Creach && Cpolice2<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice1 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<Cthief), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2==0) || (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0) || (0<Creach && Cpolice1<=1 && Cpolice1-Cthief<-1 && Cpolice2==0 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.c thief.going_c_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=3 Pthief=-32 
While you are in (0<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Creach) || (Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cthief) || (Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=1 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-32 Pthief=1 
While you are in (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1<Creach && Cpolice2<Cthief && Cthief-Cpolice1<=-10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief==10 && Cpolice1-Creach<10 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<11 && Cpolice1<Creach && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.a reachObj.initial_location ) Ppolice1=-12 Ppolice2=3 Pthief=1 
While you are in (1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief==10 && Cpolice1<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-34 Pthief=-34 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.c reachObj._unlocked ) Ppolice1=-41 Ppolice2=4 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.d police2.a thief.going_b_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=1 Pthief=-23 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.a reachObj._unlocked ) Ppolice1=2 Ppolice2=-32 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-14 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<11 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<=-9 && Cthief-Cpolice2<=-9 && Cthief-Creach<-10) || (Cpolice1-Cthief<9 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief-Cpolice2<=-10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=3 Pthief=-14 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<9 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<8 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (1<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=-12 Pthief=-14 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=-41 Pthief=-41 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.d thief.going_c_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=4 Pthief=-32 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=3 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=-34 Pthief=-34 
While you are in (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2), wait.
When you are in (0<Cpolice1 && 10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=3 Pthief=-34 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-12 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=3 Pthief=-14 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief-Cpolice2<=10), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-43 Pthief=-41 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-23 Pthief=2 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-14 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-32 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=-14 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=4 Pthief=-12 
While you are in (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<1) || (10<Cthief && Cpolice1<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.d thief.c reachObj.initial_location ) Ppolice1=4 Ppolice2=4 Pthief=3 
While you are in (Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<1 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2-Cpolice1<1 && Cthief<=1 && Cthief<Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<=-1 && Cthief<=1) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice2-Cpolice1<1 && Cthief<Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice2<=1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cthief<=1 && Cthief-Cpolice2<1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2) || (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice2<Cpolice1) || (0<Creach && Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=-12 Pthief=-14 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cpolice2<=2 && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<=2 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (10<Cthief && Cpolice1-Cpolice2<=2 && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.c reachObj.initial_location ) Ppolice1=1 Ppolice2=-21 Pthief=3 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice2) || (Cpolice2<=11 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (1<Cpolice1 && Cpolice1-Cpolice2<-9 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief==10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2 && Creach-Cpolice1<=9 && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief-Cpolice2<=1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (1<Cthief && Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=-1) || (1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-14 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (0<Cpolice1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.d reachObj.initial_location ) Ppolice1=3 Ppolice2=-32 Pthief=4 
While you are in (0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cthief-Cpolice2<=1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-34 Pthief=3 
While you are in (0<Cpolice2 && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.d reachObj.initial_location ) Ppolice1=3 Ppolice2=-14 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief-Cpolice2<=1) || (0<Creach && Cpolice2<=11 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.

State: ( states.base police1.going_a_to_b police2.b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=1 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<9 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice1-Cthief<=10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (1<Cpolice2 && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (9<=Cpolice1 && 10<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief-Cpolice2<=10) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-12 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2<=2 && Cpolice1-Cthief<=2 && Cpolice1-Creach<1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=3 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-32 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1<Creach && Cpolice2<Cthief && Cthief-Cpolice1<=-10) || (Cpolice1<Cpolice2 && Cpolice1-Creach<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief==10 && Cpolice1-Creach<10 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief==10 && Cpolice1<Creach && Cpolice2<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief-Cpolice2<=1 && Creach<=Cthief), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.d reachObj.initial_location ) Ppolice1=4 Ppolice2=-14 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1==Cpolice2 && Cpolice1<=Cthief && Cthief<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=3 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-14 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<=-9 && Cthief-Cpolice2<=-9 && Cthief-Creach<-10) || (Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief-Cpolice1<=-10 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<=-10) || (0<Cpolice1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-43 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-32 Pthief=-21 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=-14 Pthief=-43 
While you are in (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=-43 Pthief=-14 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10) || (9<=Cpolice2 && 10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1-Cthief<=-10 && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.b reachObj._unlocked ) Ppolice1=-23 Ppolice2=1 Pthief=2 
While you are in (0<Cpolice1 && Cpolice1<=11 && Cpolice1<=Cthief) || (Cpolice1<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.c reachObj.initial_location ) Ppolice1=-32 Ppolice2=2 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cpolice1<Creach && Cthief<=1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1 && Creach<Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief-Cpolice1<=1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-34 Pthief=-23 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.b reachObj._unlocked ) Ppolice1=4 Ppolice2=-41 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.a reachObj._unlocked ) Ppolice1=2 Ppolice2=-14 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Cthief && Cpolice2<=11 && Cpolice2-Cthief<10), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-12 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-12 Pthief=-32 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-41 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-41 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=3 Pthief=-32 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.b reachObj._unlocked ) Ppolice1=4 Ppolice2=-43 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.d police2.c thief.going_c_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=3 Pthief=-34 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.d thief.going_d_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=4 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Cpolice2 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-34 Pthief=-14 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Cthief-Creach<1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-32 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Cthief<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.c reachObj.initial_location ) Ppolice1=-43 Ppolice2=4 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1-Cpolice2<10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-23 Pthief=-14 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=4 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<10) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cthief && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-32 Pthief=2 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Creach<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=1 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.b thief.going_b_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=2 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.c thief.d reachObj.initial_location ) Ppolice1=1 Ppolice2=3 Pthief=4 
While you are in (Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Cthief && 0<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach) || (Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2<=1 && Creach<=Cpolice1 && Creach<=Cpolice2), wait.

State: ( states.base police1.going_a_to_d police2.d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=4 Pthief=-43 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.a reachObj.initial_location ) Ppolice1=1 Ppolice2=-14 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2==0 && Cthief<Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.b reachObj.initial_location ) Ppolice1=2 Ppolice2=-32 Pthief=2 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=-43 Pthief=-41 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.c reachObj._unlocked ) Ppolice1=-34 Ppolice2=4 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.d thief.going_a_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.d thief.going_c_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.d thief.d reachObj.initial_location ) Ppolice1=4 Ppolice2=4 Pthief=4 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (1<Cpolice1 && 1<Cpolice2 && 1<Cthief && 0<Creach), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice1<Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-34 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.c reachObj.initial_location ) Ppolice1=3 Ppolice2=-23 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice2<=11) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<Cpolice1) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=3 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-32 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.d reachObj._unlocked ) Ppolice1=-43 Ppolice2=3 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-12 Pthief=-21 
While you are in (0<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-32 Pthief=-32 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-21 Pthief=2 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cthief<=1 && Cpolice2-Cthief<=1 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.b reachObj._unlocked ) Ppolice1=1 Ppolice2=-23 Pthief=2 
While you are in (Cpolice2<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Cthief && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-32 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.b thief.b reachObj._unlocked ) Ppolice1=3 Ppolice2=2 Pthief=2 
While you are in (Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-23 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=2 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.d thief.d reachObj._unlocked ) Ppolice1=3 Ppolice2=4 Pthief=4 
While you are in (Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-43 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=11) || (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=2 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-23 Pthief=2 
While you are in (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=-23 Pthief=-21 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-41 Pthief=-23 
While you are in (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<1 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-23 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.c reachObj._unlocked ) Ppolice1=-12 Ppolice2=4 Pthief=3 
While you are in (0<Cpolice1 && Cpolice1<=11) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.b reachObj._unlocked ) Ppolice1=-43 Ppolice2=4 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=3 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11 && Creach<11 && Creach<=Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-21 Pthief=-23 
While you are in (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.d thief.going_c_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && Cpolice1==Cpolice2 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=-14 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.a reachObj.initial_location ) Ppolice1=-43 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cpolice2<Creach && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-1 && Cthief<Creach && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief-Cpolice2<=-1 && Cthief<Creach && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1==Cpolice2 && Cpolice1<Creach && Cthief<Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2-Cpolice1<=-10 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<Creach && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.d thief.going_a_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=4 Pthief=-12 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=3 Pthief=-41 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.a reachObj.initial_location ) Ppolice1=3 Ppolice2=-43 Pthief=1 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice2<=11 && Cpolice2<Creach && Cthief<=1) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice2 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=1 && Cpolice2==Cthief && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.c reachObj.initial_location ) Ppolice1=-32 Ppolice2=1 Pthief=3 
While you are in (1<Cpolice2 && Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=1 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice1 && Creach<=Cthief), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.d police2.b thief.going_d_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=2 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (1<=Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=10) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-21 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.d thief.going_c_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=4 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-43 Pthief=2 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-21 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.d thief.going_c_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=3 Pthief=-21 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=4 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.a thief.going_a_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=1 Pthief=-12 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.d thief.going_a_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=4 Pthief=-12 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=3 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-21 Pthief=4 
While you are in (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-43 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cthief<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief-Cpolice1<=1 && Cthief-Cpolice2<12) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10), wait.
When you are in (10<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=-10 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cthief<-10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-10 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-41 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cpolice2<=Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (0<Creach && Cpolice1-Cpolice2<-2 && Cpolice2<=11 && Cpolice2<=Cthief && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.b police2.c thief.going_c_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=3 Pthief=-32 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-43 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=-34 Pthief=-43 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=4 Pthief=-41 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=-21 Pthief=-43 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cthief), wait.
When you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-43 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=3 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-21 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-14 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-34 Pthief=-43 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (1<Cpolice2 && 10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-23 Pthief=-43 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<1 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-34 Pthief=-43 
While you are in (Cpolice1==Cpolice2 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-34 Pthief=-23 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-34 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=-43 Pthief=-34 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-12 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-21 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=1 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.b reachObj._unlocked ) Ppolice1=-34 Ppolice2=4 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=2 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-32 Pthief=2 
While you are in (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (0<Cpolice1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Creach && Cpolice2<Cpolice1 && Cpolice2<Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.c police2.a thief.going_d_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=1 Pthief=-43 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-14 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-41 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-23 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-23 Pthief=-21 
While you are in (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cpolice2<Creach && Cthief==10) || (1<Cpolice2 && 0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=-23 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-14 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.d reachObj.initial_location ) Ppolice1=-14 Ppolice2=3 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Creach<=Cthief) || (10<=Cpolice1 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=10 && Cthief<=1 && Cthief-Cpolice1<-9 && Cthief<Creach) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1==10 && 10<Creach && Cpolice1-Cpolice2==10 && Cpolice2-Cthief==-1 && Cthief==1) || (Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.d thief.going_b_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=4 Pthief=-23 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-41 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-12 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-41 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-34 Pthief=-43 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (10<Creach && Cpolice1-Cpolice2==-10 && Cpolice2==Cthief && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=3 Pthief=-21 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-14 Pthief=3 
While you are in (0<Cpolice1 && 0<Cpolice2 && 0<Cthief && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-14 Pthief=-12 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<10) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-14 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief-Cpolice1<1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (1<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1==Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-43 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.d reachObj.initial_location ) Ppolice1=-32 Ppolice2=4 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1==Cpolice2 && Cpolice1<Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief-Cpolice1<=1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=2 Pthief=-43 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.c reachObj._unlocked ) Ppolice1=3 Ppolice2=-21 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-43 Pthief=3 
While you are in (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief-Cpolice1<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=1 Pthief=-14 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=10 && Cpolice1-Cpolice2<-1 && Cpolice1==Cthief) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-41 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=1 Pthief=-34 
While you are in (Cpolice1<9 && Cpolice1<Creach && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2-Cpolice1<=-9 && Cpolice2-Cthief<=-9 && Cpolice2-Creach<-10 && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-10 && Cthief<=10 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cthief<=1 && Cthief-Cpolice1<-1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2-Cthief<-10 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief-Cpolice2<=10 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=-43 Pthief=-41 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.d reachObj._unlocked ) Ppolice1=2 Ppolice2=-21 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.d reachObj.initial_location ) Ppolice1=-41 Ppolice2=4 Pthief=4 
While you are in (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2==Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cthief-Cpolice1<=1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=1 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cthief<Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=3 Pthief=-12 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief-Cpolice2<=10), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.b reachObj.initial_location ) Ppolice1=3 Ppolice2=-41 Pthief=2 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=Cpolice1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-41 Pthief=4 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<Cpolice1 && Cpolice2<Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<Cpolice1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=-12 Pthief=-21 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-34 Pthief=-43 
While you are in (0<Creach && Cpolice1==Cpolice2 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (1<Cpolice2 && 10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-14 Pthief=-12 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.a reachObj.initial_location ) Ppolice1=-41 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<10) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.c reachObj.initial_location ) Ppolice1=2 Ppolice2=-12 Pthief=3 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=1 && Cpolice2==Cthief && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice2) || (10<=Cpolice2 && Cpolice1<=1 && Cpolice2-Cpolice1<=10 && Cpolice2-Cthief==10 && Cpolice2<Creach) || (Cpolice1<=1 && Cpolice1-Cpolice2<-9 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=-10) || (Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<=1 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<10 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (9<=Cpolice2 && 10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice1<=10) || (10<Cthief && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.c thief.going_c_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=3 Pthief=-32 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-34 Pthief=-43 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.b reachObj._unlocked ) Ppolice1=-21 Ppolice2=4 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-21 Pthief=2 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-12 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<=-9 && Cthief-Cpolice2<=-9 && Cthief-Creach<-10) || (Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief-Cpolice1<=-10 && Cthief<Creach) || (0<Cpolice1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<=-10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2), wait.
When you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-12 Pthief=-12 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-34 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.a police2.d thief.going_c_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=4 Pthief=-32 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-21 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.b reachObj.initial_location ) Ppolice1=1 Ppolice2=-41 Pthief=2 
While you are in (Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-10) || (Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=-41 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=3 Pthief=-21 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-23 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=4 Pthief=-21 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=10 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.c reachObj.initial_location ) Ppolice1=3 Ppolice2=-41 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<Cpolice1) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=-1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.c police2.b thief.c reachObj.initial_location ) Ppolice1=3 Ppolice2=2 Pthief=3 
While you are in (Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=1) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=1 && Creach<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.d police2.c thief.d reachObj._unlocked ) Ppolice1=4 Ppolice2=3 Pthief=4 
While you are in (Cpolice1<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.d reachObj._unlocked ) Ppolice1=-12 Ppolice2=3 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=2 Pthief=-41 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-21 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.a reachObj._unlocked ) Ppolice1=3 Ppolice2=-43 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.b reachObj.initial_location ) Ppolice1=4 Ppolice2=-12 Pthief=2 
While you are in (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (0<Cpolice1 && 1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach && Cthief-Cpolice1<10) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<Cpolice1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=-41 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=-34 Pthief=-43 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-23 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<9 && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-41 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-12 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=1 Pthief=-34 
While you are in (Cpolice1-Cpolice2<9 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Creach<=Cpolice1) || (0<Cpolice1 && Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2-Cthief<=1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.a reachObj.initial_location ) Ppolice1=-34 Ppolice2=4 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cpolice1<Creach && Cthief<=1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1 && Creach<Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<=1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.a reachObj.initial_location ) Ppolice1=-32 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice1 && Creach<=Cthief), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.c reachObj.initial_location ) Ppolice1=-34 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.a reachObj._unlocked ) Ppolice1=-14 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.b police2.a thief.going_d_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=3 Pthief=-32 
While you are in (Cpolice1<9 && Cpolice1<Creach && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (9<=Cpolice1 && 10<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2-Cthief<-10 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief-Cpolice2<=10 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.a thief.going_b_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && Cpolice1==Cpolice2 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.c thief.going_c_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=3 Pthief=-34 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-34 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=2 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.b thief.a reachObj.initial_location ) Ppolice1=4 Ppolice2=2 Pthief=1 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<Creach && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2-Cpolice1<1 && Cthief<Cpolice1 && Cthief<Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice2-Cpolice1<1 && Cthief<Cpolice1 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<=-1 && Cthief<=1 && Cthief<Cpolice1) || (Cpolice1<Cpolice2 && Cpolice2<=1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice2<=Cpolice1 && Cpolice2<Creach), wait.

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.d reachObj._unlocked ) Ppolice1=3 Ppolice2=-14 Pthief=4 
While you are in (Cpolice2<=11), wait.

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-34 Pthief=-23 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.b reachObj._unlocked ) Ppolice1=4 Ppolice2=-21 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.c police2.a thief.going_c_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=1 Pthief=-32 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-14 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.c reachObj.initial_location ) Ppolice1=-21 Ppolice2=4 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1-Cpolice2<10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-34 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=3 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<9 && Cpolice1<Creach && Cpolice2-Cthief==-10 && Cthief==10) || (Cpolice1-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2-Cpolice1<=-9 && Cpolice2-Cthief<=-9 && Cpolice2-Creach<-10 && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-10 && Cthief<=10 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cthief<=1 && Cthief-Cpolice1<-1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2-Cthief<-10 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief-Cpolice2<=10 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-21 Pthief=-12 
While you are in (0<Creach && Cpolice1==Cpolice2 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=-32 Pthief=-32 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-21 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.d thief.going_c_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=4 Pthief=-32 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cthief) || (0<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=9 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=11 && Cthief-Cpolice1<-1) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<1 && Cthief<=11) || (10<Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Creach<1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach-Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=-14 Pthief=-12 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<1 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=2 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=-14 Pthief=-23 
While you are in (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.c thief.going_a_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=3 Pthief=-12 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.d thief.going_b_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=4 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-34 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-14 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice1 && Creach<Cpolice1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.d thief.d reachObj.initial_location ) Ppolice1=2 Ppolice2=4 Pthief=4 
While you are in (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=1 && Cpolice2<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cpolice2<=Cpolice1 && Cpolice2==Cthief), wait.
When you are in (1<Cpolice1 && 1<Cthief && 0<Creach && Cthief<=Cpolice2) || (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2) || (1<Cthief && Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2<Cpolice1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=2 Pthief=-23 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-21 Pthief=4 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<Cpolice1) || (Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<Cpolice1 && Cpolice2<Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=2 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<10 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<10 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.a thief.c reachObj.initial_location ) Ppolice1=1 Ppolice2=1 Pthief=3 
While you are in (0<Cpolice1 && 0<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Creach && Creach==0) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cpolice2<Cpolice1) || (1<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.b reachObj._unlocked ) Ppolice1=2 Ppolice2=-23 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=-34 Pthief=-41 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=-21 Pthief=-43 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.c thief.b reachObj._unlocked ) Ppolice1=3 Ppolice2=3 Pthief=2 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-34 Pthief=4 
While you are in (Cpolice1-Cthief<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=4 Pthief=-21 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.a thief.going_d_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=1 Pthief=-43 
While you are in (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice1-Cthief==-10 && Cpolice2<1 && Cpolice2<Creach && Cthief==10) || (Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief) || (0<Creach && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<Creach), wait.
When you are in (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<Creach && Cpolice2<=1 && Cthief-Cpolice1<10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=-10 && Cpolice1<Creach && Cpolice2<=1 && Cthief<=11) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11 && Creach-Cpolice1<=9 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && Cpolice2-Cpolice1<1 && Cthief<=11 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-23 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<=1 && Cpolice2==Cthief) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<9 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<9 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (1<Cpolice2 && 10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.c thief.d reachObj._unlocked ) Ppolice1=1 Ppolice2=3 Pthief=4 
While you are in true, wait.

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-14 Pthief=-41 
While you are in (0<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Creach<Cpolice2 && Creach<=Cthief), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-43 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=10 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=-43 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1==0 && Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (10<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=4 Pthief=-21 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-32 Pthief=1 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=Cpolice1) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cthief) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief==10 && Cpolice1<Creach && Cpolice2<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice1 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2==0) || (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0) || (0<Creach && Cpolice1<=1 && Cpolice1-Cthief<-1 && Cpolice2==0 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.d police2.b thief.going_a_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=2 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=-14 Pthief=-14 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.b thief.d reachObj.initial_location ) Ppolice1=1 Ppolice2=2 Pthief=4 
While you are in (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief<=1) || (Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (0<Cpolice1 && 0<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=1 && Creach<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-32 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=2 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.c thief.going_c_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=3 Pthief=-34 
While you are in (0<Cpolice2 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cthief<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=-32 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1<=11 && Cpolice1-Creach<1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-14 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.d police2.d thief.going_d_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=4 Pthief=-41 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (1<=Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=10) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-12 Pthief=3 
While you are in (Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<=-9 && Cthief-Cpolice2<=-9 && Cthief-Creach<-10) || (Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief-Cpolice1<=-10 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<=-10), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-21 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<9 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.a reachObj._unlocked ) Ppolice1=-32 Ppolice2=2 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.c thief.a reachObj._unlocked ) Ppolice1=3 Ppolice2=3 Pthief=1 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-14 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=-21 Pthief=-12 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.b thief.going_c_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=2 Pthief=-34 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.d reachObj.initial_location ) Ppolice1=-41 Ppolice2=3 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-43 Pthief=-21 
While you are in (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<1 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-23 Pthief=-12 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=4 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.d thief.d reachObj._unlocked ) Ppolice1=1 Ppolice2=4 Pthief=4 
While you are in (Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-23 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-34 Pthief=2 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Creach<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-41 Pthief=-41 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-23 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.b reachObj._unlocked ) Ppolice1=-23 Ppolice2=4 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-41 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.d reachObj._unlocked ) Ppolice1=-21 Ppolice2=1 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.a reachObj._unlocked ) Ppolice1=2 Ppolice2=-34 Pthief=1 
While you are in (0<Cpolice2 && Cpolice2<=11) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=-32 Pthief=-14 
While you are in (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice1<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<10 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice2-Cpolice1<10 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (9<=Cpolice2 && 10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice1<=10) || (10<Cthief && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-32 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.b reachObj._unlocked ) Ppolice1=-14 Ppolice2=1 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.b reachObj._unlocked ) Ppolice1=1 Ppolice2=-41 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.d police2.b thief.going_c_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=2 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-41 Pthief=-14 
While you are in (Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-12 Pthief=-21 
While you are in (Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-34 Pthief=-21 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=-41 Pthief=-12 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10) || (9<=Cpolice2 && 10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1-Cthief<=-10 && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.c thief.c reachObj._unlocked ) Ppolice1=4 Ppolice2=3 Pthief=3 
While you are in (Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.b reachObj._unlocked ) Ppolice1=2 Ppolice2=-14 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=-23 Pthief=-32 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-43 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=-34 Pthief=-34 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-23 Pthief=-21 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.a reachObj.initial_location ) Ppolice1=-41 Ppolice2=4 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1-Cpolice2<10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.b thief.going_d_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=2 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<=Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=10) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.b thief.going_d_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=2 Pthief=-43 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=-34 Pthief=-34 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=3 Pthief=-34 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-41 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.b reachObj.initial_location ) Ppolice1=2 Ppolice2=-14 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1==Cpolice2 && Cpolice1<=Cthief && Cthief<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-23 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (10<Creach && Cpolice1-Cpolice2==-10 && Cpolice2==Cthief && Cthief==10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.c reachObj._unlocked ) Ppolice1=1 Ppolice2=-41 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11) || (Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.a reachObj.initial_location ) Ppolice1=3 Ppolice2=-12 Pthief=1 
While you are in (1<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1-Cthief<1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.a thief.going_a_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=1 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.c reachObj.initial_location ) Ppolice1=4 Ppolice2=-23 Pthief=3 
While you are in (Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<11 && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<=10) || (0<Cpolice1 && 0<Creach && Cpolice1<=1 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<10 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.

State: ( states.base police1.c police2.going_b_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-21 Pthief=4 
While you are in (0<Cpolice2 && 0<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<10) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=-21 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1==0 && Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (10<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-43 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.c thief.b reachObj.initial_location ) Ppolice1=4 Ppolice2=3 Pthief=2 
While you are in (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=1 && Cthief<Cpolice2), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.c reachObj._unlocked ) Ppolice1=-21 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-41 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.c police2.a thief.going_b_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-14 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice2-Cthief<=10 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-23 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=11) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.a police2.a thief.going_c_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=1 Pthief=-34 
While you are in (0<Cpolice2 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cthief<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=-12 Pthief=-21 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.b reachObj._unlocked ) Ppolice1=1 Ppolice2=-21 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.b reachObj.initial_location ) Ppolice1=4 Ppolice2=-23 Pthief=2 
While you are in (0<Creach && Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-10) || (0<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief-Cpolice1<1 && Cthief<=Cpolice2 && Creach<=Cthief), wait.
When you are in (1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=4 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<1) || (Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<1) || (10<Cthief && Cpolice1<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.d reachObj.initial_location ) Ppolice1=3 Ppolice2=-34 Pthief=4 
While you are in (0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cthief-Cpolice2<=1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.c police2.d thief.a reachObj._unlocked ) Ppolice1=3 Ppolice2=4 Pthief=1 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.b police2.d thief.going_d_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=4 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<=Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=10) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.d reachObj.initial_location ) Ppolice1=1 Ppolice2=-34 Pthief=4 
While you are in (0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=Cpolice2) || (Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Creach<=Cpolice2 && Creach<Cthief), wait.

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-43 Pthief=-12 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=1 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-14 Pthief=-23 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.d reachObj._unlocked ) Ppolice1=4 Ppolice2=-34 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.a reachObj._unlocked ) Ppolice1=4 Ppolice2=-21 Pthief=1 
While you are in (Cpolice2<=11), wait.

State: ( states.base police1.a police2.a thief.going_d_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=3 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-21 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-32 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.d thief.going_d_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=4 Pthief=-43 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-21 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.a thief.a reachObj.initial_location ) Ppolice1=4 Ppolice2=1 Pthief=1 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=1 && Cpolice2==Cthief && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.c reachObj._unlocked ) Ppolice1=-32 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=1 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=10 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<12 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-23 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.c thief.going_b_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-41 Pthief=-43 
While you are in (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-43 Pthief=-41 
While you are in (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.b thief.d reachObj._unlocked ) Ppolice1=1 Ppolice2=2 Pthief=4 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-34 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1<Creach && Cpolice2<Cthief && Cthief-Cpolice1<=-10) || (Cpolice1<Cpolice2 && Cpolice1-Creach<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief==10 && Cpolice1-Creach<10 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief==10 && Cpolice1<Creach && Cpolice2<=Cpolice1), wait.
When you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=-23 Pthief=-12 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.d thief.c reachObj.initial_location ) Ppolice1=2 Ppolice2=4 Pthief=3 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<Creach && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2-Cpolice1<1 && Cthief<Cpolice1 && Cthief<Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<Cpolice1) || (0<Creach && Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (0<Creach && Cpolice1-Cpolice2<=-1 && Cthief<=1 && Cthief<Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice2-Cpolice1<1 && Cthief<Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice2<=1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief-Cpolice1<=1), wait.

State: ( states.base police1.a police2.going_d_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=-43 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1==0 && Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (10<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-21 Pthief=-23 
While you are in (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=-23 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1==0 && Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (10<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=-41 Pthief=-43 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=1 Pthief=-34 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=-43 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-12 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<11 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<=-9 && Cthief-Cpolice2<=-9 && Cthief-Creach<-10) || (0<Cpolice1 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (Cpolice1-Cthief<9 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief-Cpolice2<=-10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1), wait.
When you are in (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0) || (0<Cpolice1 && 1<Cthief && Cpolice1<=1 && Cpolice1<Creach && Cpolice2==0) || (0<Creach && Cpolice1<=1 && Cpolice1-Cthief<-1 && Cpolice2==0 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=1 Pthief=-43 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-21 Pthief=-23 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.b reachObj._unlocked ) Ppolice1=-14 Ppolice2=3 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=2 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=-41 Pthief=-14 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=-41 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-43 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-14 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-32 Pthief=-23 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.a thief.going_c_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=1 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-41 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.b thief.going_a_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=2 Pthief=-14 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.c reachObj._unlocked ) Ppolice1=-21 Ppolice2=2 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.d reachObj.initial_location ) Ppolice1=-43 Ppolice2=4 Pthief=4 
While you are in (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2==Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=Cthief), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-32 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-21 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-21 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-14 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=-32 Pthief=-43 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.c thief.going_d_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=2 Pthief=-21 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.a reachObj._unlocked ) Ppolice1=-21 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-43 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-32 Pthief=1 
While you are in (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=2 Pthief=-14 
While you are in (0<Creach && Cpolice1-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<=10) || (10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10 && Creach<=Cthief) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-12 Pthief=-12 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.d reachObj.initial_location ) Ppolice1=1 Ppolice2=-41 Pthief=4 
While you are in (Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-10) || (Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.d reachObj._unlocked ) Ppolice1=-34 Ppolice2=3 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-14 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-23 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.c reachObj.initial_location ) Ppolice1=-14 Ppolice2=4 Pthief=3 
While you are in (Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief-Cpolice1<-10 && Cthief-Cpolice2<=-1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1==10 && 10<Creach && Cpolice1-Cpolice2==9 && Cpolice2-Cthief==1 && Cthief==0) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<1 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<=1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-43 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-43 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=1 Pthief=-14 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief-Cpolice2<=10) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.d reachObj._unlocked ) Ppolice1=-23 Ppolice2=2 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Creach<Cpolice2 && Creach<=Cthief), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-32 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.d reachObj._unlocked ) Ppolice1=3 Ppolice2=-41 Pthief=4 
While you are in (0<Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (Cpolice2<=11 && Cthief-Cpolice1<=11 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-32 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=-32 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=-41 Pthief=-14 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1-Cthief<=-10 && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-41 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cthief<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief-Cpolice1<=1 && Cthief-Cpolice2<12) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief-Cpolice1<1 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-23 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-21 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.b reachObj.initial_location ) Ppolice1=-43 Ppolice2=3 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=-10) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2 && Creach<=Cpolice1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.c reachObj.initial_location ) Ppolice1=4 Ppolice2=-34 Pthief=3 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1) || (Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (1<Cthief && Cpolice2<=11 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.c police2.d thief.going_c_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=4 Pthief=-32 
While you are in (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cthief) || (0<Cthief && 0<Creach && Cpolice1<=1 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cthief<=10 && Cthief-Cpolice2<=9 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cthief) || (1<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<1 && Cthief<=11) || (10<Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-14 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=4 Pthief=-21 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-12 Pthief=-21 
While you are in (0<Creach && Cpolice1==Cpolice2 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<9 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-41 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.c thief.going_a_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=3 Pthief=-14 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=4 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-14 Pthief=-12 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-21 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.b police2.c thief.going_a_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=3 Pthief=-12 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-32 Pthief=3 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=Cpolice1) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cthief) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief==10 && Cpolice1<Creach && Cpolice2<=Cpolice1) || (0<Cpolice1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2 && Creach<Cthief) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<Cthief), wait.
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2==0) || (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0) || (0<Creach && Cpolice1<=1 && Cpolice1-Cthief<-1 && Cpolice2==0 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-41 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=-32 Pthief=-12 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.b reachObj.initial_location ) Ppolice1=-34 Ppolice2=4 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Creach<=Cpolice1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-32 Pthief=-43 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-43 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=1 Pthief=-34 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=4 Pthief=-23 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=-14 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-43 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=4 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=-23 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1==0 && Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (10<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-34 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1<Creach && Cpolice2<Cthief && Cthief-Cpolice1<=-10) || (Cpolice1<Cpolice2 && Cpolice1-Creach<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief==10 && Cpolice1-Creach<10 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief==10 && Cpolice1<Creach && Cpolice2<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach && Creach<=Cpolice2) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief-Cpolice2<=1 && Creach<=Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-21 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-23 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=3 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-32 Pthief=-23 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.d reachObj._unlocked ) Ppolice1=-41 Ppolice2=4 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=-32 Pthief=-43 
While you are in (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10 && Creach<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-34 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.b thief.c reachObj._unlocked ) Ppolice1=4 Ppolice2=2 Pthief=3 
While you are in true, wait.

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-12 Pthief=-14 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-43 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (10<Creach && Cpolice1-Cpolice2==-10 && Cpolice2==Cthief && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-34 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-34 Pthief=2 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Creach<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=-34 Pthief=-12 
While you are in (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice1<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<10 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice2-Cpolice1<10 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (9<=Cpolice2 && 10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice1<=10) || (10<Cthief && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-34 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.a thief.going_a_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=1 Pthief=-14 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-34 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11 && Creach<11 && Creach<=Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-23 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.c reachObj._unlocked ) Ppolice1=3 Ppolice2=-14 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Creach<1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach-Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=-21 Pthief=-12 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-23 Pthief=2 
While you are in (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=2 Pthief=-21 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=-14 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-21 Pthief=1 
While you are in (0<Cpolice1 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Cthief && Cpolice1<=11 && Cpolice1-Cthief<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.d thief.going_a_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.d thief.going_b_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=4 Pthief=-21 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-23 Pthief=4 
While you are in (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.c police2.a thief.b reachObj.initial_location ) Ppolice1=3 Ppolice2=1 Pthief=2 
While you are in (Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Cthief && 0<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach) || (Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2<=1 && Creach<=Cpolice1 && Creach<=Cpolice2), wait.

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-21 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2==0 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2==0 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<10 && Cpolice2<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.b police2.b thief.going_d_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=2 Pthief=-41 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<=Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=10) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-14 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cthief && Cpolice1==0 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (0<Cpolice1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-34 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-12 Pthief=-21 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Creach<Cpolice2 && Creach<=Cthief), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-23 Pthief=-21 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-12 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=-21 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-41 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2==0 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<Cthief) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<10 && Cpolice2<Creach) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief-Cpolice1<1 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2==Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-14 Pthief=1 
While you are in (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-2 && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=2) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=2 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-43 Pthief=-41 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.d thief.a reachObj._unlocked ) Ppolice1=4 Ppolice2=4 Pthief=1 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-43 Pthief=3 
While you are in (0<Cpolice1 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (0<Cpolice1 && 0<Cthief && Cpolice1<=11 && Cpolice1-Cthief<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief-Cpolice1<=1 && Cthief-Cpolice2<12) || (Cpolice1<11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-32 Pthief=-43 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-32 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-43 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.a reachObj.initial_location ) Ppolice1=-34 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice1 && Creach<=Cthief), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=4 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.d thief.going_a_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.c reachObj._unlocked ) Ppolice1=1 Ppolice2=-14 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-41 Pthief=-12 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=-23 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-43 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.

State: ( states.base police1.c police2.b thief.going_c_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=4 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-34 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-12 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice2-Cthief<=10 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<9 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cthief), wait.
When you are in (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-21 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-32 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10) || (10<=Cpolice2 && 10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10) || (Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<10 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<=-10 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cpolice2), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-14 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.d reachObj.initial_location ) Ppolice1=-34 Ppolice2=4 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=2 Pthief=-34 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.b thief.going_b_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=2 Pthief=-21 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=1 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=2 Pthief=-41 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=-43 Pthief=-34 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-41 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=-23 Pthief=-41 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=-34 Pthief=-14 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=-34 Pthief=-34 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.d reachObj._unlocked ) Ppolice1=1 Ppolice2=-43 Pthief=4 
While you are in (Cpolice2<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Cthief && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-43 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.a thief.b reachObj._unlocked ) Ppolice1=3 Ppolice2=1 Pthief=2 
While you are in true, wait.

State: ( states.base police1.going_b_to_a police2.c thief.b reachObj._unlocked ) Ppolice1=-21 Ppolice2=3 Pthief=2 
While you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief) || (Cpolice1<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.d reachObj.initial_location ) Ppolice1=2 Ppolice2=-41 Pthief=4 
While you are in (0<Creach && Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-10) || (0<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief-Cpolice1<1 && Cthief<=Cpolice2 && Creach<=Cthief), wait.
When you are in (1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-12 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice2-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-14 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1-Cpolice2<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=4 Pthief=-32 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=-43 Pthief=-12 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10) || (9<=Cpolice2 && 10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1-Cthief<=-10 && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Creach<1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-23 Pthief=-21 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.b thief.going_b_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=2 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Cpolice2 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1), wait.
When you are in (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-21 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-32 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-12 Pthief=3 
While you are in (0<Cpolice1 && 0<Cpolice2 && 0<Cthief && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-23 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=1 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=10 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<12 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-21 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-34 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-32 Pthief=4 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Creach<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-21 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.a reachObj.initial_location ) Ppolice1=-23 Ppolice2=4 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1-Cpolice2<10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2==-10 && Cpolice1-Cthief<=-9 && Cpolice1-Creach<-10 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=1 && Cpolice1-Cpolice2==-10 && Cpolice1-Creach<-10 && Cthief-Cpolice1<=10), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=-43 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-21 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.b reachObj.initial_location ) Ppolice1=-21 Ppolice2=1 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=-10) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.b police2.b thief.going_a_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=2 Pthief=-14 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.a reachObj.initial_location ) Ppolice1=3 Ppolice2=-23 Pthief=1 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice2<=11 && Cpolice2<Creach && Cthief<=1) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice2 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=1 && Cpolice2==Cthief && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=-14 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=1 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<=11 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<10 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.d reachObj.initial_location ) Ppolice1=-14 Ppolice2=2 Pthief=4 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief-Cpolice1<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Creach<=Cpolice1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-21 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2-Cpolice1<10 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=-10 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10) || (Cpolice1-Cthief<-10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-10 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.a reachObj._unlocked ) Ppolice1=-43 Ppolice2=2 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=-34 Pthief=-41 
While you are in (10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10 && Creach<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-21 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<=1 && Cpolice2==Cthief) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=-21 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-14 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-23 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-21 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=3 Pthief=-21 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.a reachObj.initial_location ) Ppolice1=2 Ppolice2=-14 Pthief=1 
While you are in (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2-Cthief<10 && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (10<=Cpolice2 && Cpolice1<=1 && Cpolice2-Cpolice1<=10 && Cpolice2-Cthief==10 && Cpolice2<Creach) || (Cpolice1<=1 && Cpolice1-Cpolice2<-9 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=-10) || (Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11) || (Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<1 && Cpolice2<Creach && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=3 Pthief=-41 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.b reachObj.initial_location ) Ppolice1=-23 Ppolice2=1 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-34 Pthief=-41 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=-43 Pthief=-21 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=4 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-41 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=4 Pthief=-23 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-21 Pthief=-12 
While you are in (Cpolice1==Cpolice2 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-21 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-32 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.c reachObj.initial_location ) Ppolice1=-43 Ppolice2=1 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=1 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=9 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cthief<1 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Creach<=Cpolice1 && Creach<Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2-Cthief<10 && Cpolice2<Creach), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-43 Pthief=4 
While you are in (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2-Cthief<10 && Cpolice2<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.a reachObj._unlocked ) Ppolice1=-34 Ppolice2=2 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief-Cpolice1<=1) || (0<Cpolice1 && Cpolice1<=11), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief), wait.
When you are in (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.a reachObj.initial_location ) Ppolice1=2 Ppolice2=-43 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Creach<1 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.b police2.a thief.d reachObj._unlocked ) Ppolice1=2 Ppolice2=1 Pthief=4 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-21 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice1 && 1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=-14 Pthief=-41 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.c thief.d reachObj._unlocked ) Ppolice1=2 Ppolice2=3 Pthief=4 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=1 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-32 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.c reachObj._unlocked ) Ppolice1=1 Ppolice2=-23 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=2 Pthief=-23 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=1 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<9 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Creach<=Cpolice1) || (0<Cpolice1 && Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2-Cthief<=1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-12 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=-34 Pthief=-32 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=1 Pthief=-34 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2-Cthief<=1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-21 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-34 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-43 Pthief=-21 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.b reachObj.initial_location ) Ppolice1=4 Ppolice2=-34 Pthief=2 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (1<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice2<=1 && Cpolice2-Cpolice1<1 && Cpolice2-Cthief<1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<Cpolice1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.a reachObj._unlocked ) Ppolice1=4 Ppolice2=-43 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-43 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-12 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.a reachObj._unlocked ) Ppolice1=1 Ppolice2=-14 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-41 Pthief=4 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<9 && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.d police2.b thief.going_b_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=2 Pthief=-21 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=-21 Pthief=-12 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-41 Pthief=2 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-43 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11), wait.

State: ( states.base police1.c police2.going_c_to_b thief.c reachObj.initial_location ) Ppolice1=3 Ppolice2=-32 Pthief=3 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (0<Cpolice2 && 1<Cthief && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.b police2.a thief.b reachObj.initial_location ) Ppolice1=2 Ppolice2=1 Pthief=2 
While you are in (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=1) || (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=1 && Cthief<Cpolice2), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=-23 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Creach<Cpolice2 && Creach<=Cthief), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-41 Pthief=2 
While you are in (0<Cpolice1 && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2<Cthief), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.c police2.a thief.going_a_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=1 Pthief=-14 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (Cpolice1<=1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-41 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-21 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=10 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-43 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.c reachObj._unlocked ) Ppolice1=4 Ppolice2=-12 Pthief=3 
While you are in (0<Cpolice2 && Cpolice2<=11) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.c thief.going_b_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.d reachObj._unlocked ) Ppolice1=-34 Ppolice2=1 Pthief=4 
While you are in (Cpolice1<=11), wait.

State: ( states.base police1.going_d_to_c police2.b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=2 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-32 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11 && Creach<11 && Creach<=Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-32 Pthief=-23 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-12 Pthief=4 
While you are in (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-14 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.d reachObj._unlocked ) Ppolice1=4 Ppolice2=-12 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Creach<Cpolice2 && Creach<=Cthief), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.b reachObj.initial_location ) Ppolice1=-12 Ppolice2=1 Pthief=2 
While you are in (Cpolice1-Cpolice2<10 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cpolice2<=Cthief && Cthief<=1 && Cthief-Cpolice1<-9 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Creach<=Cthief) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1==10 && 10<Creach && Cpolice1-Cpolice2==10 && Cpolice2-Cthief==-1 && Cthief==1) || (Cpolice1<1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<=1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=1 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-32 Pthief=4 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Creach<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.b reachObj._unlocked ) Ppolice1=4 Ppolice2=-14 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-41 Pthief=-14 
While you are in (0<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=-34 Pthief=-21 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-41 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=-12 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2-Cthief<=10 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<=Cpolice2) || (10<=Cpolice2 && 10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<10 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<=-10 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Creach && Cthief<=11) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=-34 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.d reachObj._unlocked ) Ppolice1=3 Ppolice2=-23 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10 && Creach<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=-43 Pthief=-43 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-34 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.a reachObj._unlocked ) Ppolice1=4 Ppolice2=-34 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=-21 Pthief=-23 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-43 Pthief=2 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1-Cthief<=1 && Cpolice2-Cthief<=1 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief), wait.
When you are in (1<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-12 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.d police2.a thief.going_c_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=1 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-32 Pthief=-43 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-34 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11 && Creach<11 && Creach<=Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=-12 Pthief=-12 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.c reachObj.initial_location ) Ppolice1=4 Ppolice2=-32 Pthief=3 
While you are in (0<Cpolice2 && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Creach && Cpolice1<1 && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=1) || (Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-34 Pthief=-32 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-43 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-41 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=1 Pthief=-34 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-32 Pthief=-12 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-21 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=3 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-32 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=-21 Pthief=-43 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-41 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-21 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-12 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-2 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cthief<=2 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=2) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=2 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.b thief.going_a_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.c reachObj._unlocked ) Ppolice1=2 Ppolice2=-41 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-12 Pthief=-12 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.d thief.going_c_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.a reachObj.initial_location ) Ppolice1=2 Ppolice2=-32 Pthief=1 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1) || (Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief) || (1<Cthief && Cpolice1-Cthief<1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.b reachObj.initial_location ) Ppolice1=-14 Ppolice2=1 Pthief=2 
While you are in (Cpolice1-Cpolice2<10 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cpolice2<=Cthief && Cthief<=1 && Cthief-Cpolice1<-9 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Creach<=Cthief) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1==10 && 10<Creach && Cpolice1-Cpolice2==10 && Cpolice2-Cthief==-1 && Cthief==1) || (Cpolice1<1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<=1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.a reachObj.initial_location ) Ppolice1=3 Ppolice2=-34 Pthief=1 
While you are in (0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.b reachObj.initial_location ) Ppolice1=-12 Ppolice2=2 Pthief=2 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=-34 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=4 Pthief=-32 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=4 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.c thief.c reachObj.initial_location ) Ppolice1=3 Ppolice2=3 Pthief=3 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=1 && Cpolice2==Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=-23 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-21 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=Cpolice1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-32 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.a police2.a thief.d reachObj.initial_location ) Ppolice1=1 Ppolice2=1 Pthief=4 
While you are in (Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1) || (Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cthief<=1 && Creach<=Cpolice1 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.b police2.c thief.a reachObj.initial_location ) Ppolice1=2 Ppolice2=3 Pthief=1 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cthief<=1) || (1<=Cpolice1 && Cpolice2==1 && 1<Creach && Cpolice2-Cthief==1 && Cthief==0) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1) || (Cpolice2<2 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<1 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-23 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cpolice2<=Cthief), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=-21 Pthief=-12 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.d thief.going_d_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=4 Pthief=-41 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.a thief.b reachObj.initial_location ) Ppolice1=1 Ppolice2=1 Pthief=2 
While you are in (Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1) || (Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cthief<=1 && Creach<=Cpolice1 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-21 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=-34 Pthief=-23 
While you are in (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10 && Creach<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.d reachObj.initial_location ) Ppolice1=4 Ppolice2=-41 Pthief=4 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-34 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-14 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1==0 && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.b police2.c thief.going_c_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=3 Pthief=-34 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-43 Pthief=4 
While you are in (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.b reachObj.initial_location ) Ppolice1=-23 Ppolice2=2 Pthief=2 
While you are in (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2==Cthief) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cthief<Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=4 Pthief=-43 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-14 Pthief=2 
While you are in (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-32 Pthief=2 
While you are in (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice1<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.d reachObj.initial_location ) Ppolice1=-32 Ppolice2=3 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2) || (Cpolice1-Cthief<=10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1-Cthief<=10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief-Cpolice1<=-10) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice2<=1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-14 Pthief=-32 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=2 Pthief=-14 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.c reachObj.initial_location ) Ppolice1=2 Ppolice2=-32 Pthief=3 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1) || (Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (1<Cthief && Cpolice2<=11 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=3 Pthief=-41 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-43 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-43 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-14 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=-21 Pthief=-34 
While you are in (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<-1 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-12 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=4 Pthief=-41 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.a reachObj._unlocked ) Ppolice1=-43 Ppolice2=3 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.a thief.going_a_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=1 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<9 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cthief<=10 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11 && Creach<Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<1 && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Cthief<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.d thief.c reachObj._unlocked ) Ppolice1=4 Ppolice2=4 Pthief=3 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.c reachObj._unlocked ) Ppolice1=-41 Ppolice2=1 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<-1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-32 Pthief=-21 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-14 Pthief=1 
While you are in (Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<=-9 && Cthief-Cpolice2<=-9 && Cthief-Creach<-10) || (Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief-Cpolice1<=-10 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<=-10), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2-Cthief<1 && Cpolice2<Creach), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Creach<Cpolice2 && Creach<=Cthief), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=-32 Pthief=-23 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=3 Pthief=-34 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-43 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.a reachObj._unlocked ) Ppolice1=3 Ppolice2=-21 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-41 Pthief=1 
While you are in (0<Cpolice1 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Cthief && Cpolice1<=11 && Cpolice1-Cthief<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.c police2.b thief.going_c_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=2 Pthief=-34 
While you are in (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cthief) || (0<Cthief && 0<Creach && Cpolice1<=1 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cthief<=10 && Cthief-Cpolice2<=9 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cthief) || (1<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<1 && Cthief<=11) || (10<Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.a reachObj._unlocked ) Ppolice1=4 Ppolice2=-12 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1) || (0<Cpolice2 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-41 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-12 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.c thief.going_b_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-34 Pthief=-43 
While you are in (0<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.a thief.c reachObj.initial_location ) Ppolice1=2 Ppolice2=1 Pthief=3 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cthief<=1) || (1<=Cpolice1 && Cpolice2==1 && 1<Creach && Cpolice2-Cthief==1 && Cthief==0) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1) || (Cpolice2<2 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<1 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.d police2.c thief.a reachObj._unlocked ) Ppolice1=4 Ppolice2=3 Pthief=1 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=-12 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<Cpolice1 && Creach<=Cthief) || (0<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1) || (10<Cthief && Cpolice1<=Cthief && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=11 && Cthief-Cpolice1<10 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.a reachObj._unlocked ) Ppolice1=2 Ppolice2=-43 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=-41 Pthief=-12 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-23 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-23 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=4 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-34 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && 0<Cthief && Cpolice1<=11 && Cpolice2<=11), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=-43 Pthief=-21 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cthief) || (Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<=10 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.b thief.d reachObj.initial_location ) Ppolice1=2 Ppolice2=2 Pthief=4 
While you are in (1<Cpolice1 && 0<Creach && Cthief<=1) || (1<Cpolice2 && 0<Creach && Cpolice1<Cthief && Cthief<=1) || (Cpolice1<=1 && Cpolice2<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=1 && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cthief<=Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cpolice1 && 1<Cthief && 0<Creach && Cthief<=Cpolice2) || (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2<Cpolice1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-34 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-43 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cpolice2<=Cthief), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=3 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<9 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice1-Cthief<=10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (9<=Cpolice1 && 10<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief-Cpolice2<=10), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-14 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.d thief.c reachObj.initial_location ) Ppolice1=3 Ppolice2=4 Pthief=3 
While you are in (Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=1) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=1 && Creach<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=4 Pthief=-43 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-43 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<Cpolice1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-23 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cpolice2<=Cthief), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cthief<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.a reachObj._unlocked ) Ppolice1=3 Ppolice2=-41 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-23 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-14 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice2-Cthief<=10 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=2 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.d thief.b reachObj.initial_location ) Ppolice1=2 Ppolice2=4 Pthief=2 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=1 && Cthief<=1), wait.
When you are in (1<Cpolice1 && 1<Cthief && 0<Creach && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice2<Cthief && Cthief<=Cpolice1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2<=1 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice1<Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=-12 Pthief=-43 
While you are in (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2), wait.
When you are in (0<Cpolice1 && 10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<1 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-43 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.a thief.going_d_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=1 Pthief=-43 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=-23 Pthief=-41 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2-Cpolice1<=10 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=3 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=-14 Pthief=-14 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.b thief.d reachObj._unlocked ) Ppolice1=2 Ppolice2=2 Pthief=4 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-32 Pthief=3 
While you are in (0<Cpolice2 && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=1 Pthief=-14 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=1 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<9 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice1-Cthief<=10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (1<Cpolice2 && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (9<=Cpolice1 && 10<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief-Cpolice2<=10) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-43 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-21 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=2 Pthief=-34 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-32 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1<Creach && Cpolice2<Cthief && Cthief-Cpolice1<=-10) || (Cpolice1<Cpolice2 && Cpolice1-Creach<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief==10 && Cpolice1-Creach<10 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief==10 && Cpolice1<Creach && Cpolice2<=Cpolice1), wait.
When you are in (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=3 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cpolice2<8 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-41 Pthief=-14 
While you are in (0<Creach && Cpolice1==Cpolice2 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<9 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<9 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (1<Cpolice2 && 10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-32 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.d reachObj.initial_location ) Ppolice1=4 Ppolice2=-34 Pthief=4 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-34 Pthief=-34 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-12 Pthief=-21 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=-12 Pthief=-23 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.b reachObj.initial_location ) Ppolice1=2 Ppolice2=-23 Pthief=2 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=-21 Pthief=-12 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.d reachObj._unlocked ) Ppolice1=-32 Ppolice2=1 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.b reachObj._unlocked ) Ppolice1=3 Ppolice2=-43 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=2 Pthief=-41 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=10 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-12 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.a reachObj.initial_location ) Ppolice1=4 Ppolice2=-32 Pthief=1 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.d reachObj._unlocked ) Ppolice1=2 Ppolice2=-14 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=3 Pthief=-34 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=-43 Pthief=-34 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.d thief.a reachObj.initial_location ) Ppolice1=2 Ppolice2=4 Pthief=1 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<Creach && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2-Cpolice1<1 && Cthief<Cpolice1 && Cthief<Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<Cpolice1) || (0<Creach && Cpolice1-Cpolice2<=-1 && Cthief<=1 && Cthief<Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice2-Cpolice1<1 && Cthief<Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice2<=1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice2<=Cpolice1 && Cpolice2<Creach), wait.

State: ( states.base police1.d police2.a thief.c reachObj._unlocked ) Ppolice1=4 Ppolice2=1 Pthief=3 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=-41 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.c thief.going_a_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=3 Pthief=-12 
While you are in (0<Creach && Cpolice1<=Cthief && Cthief<=10) || (Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (Cpolice1<=1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.b thief.going_d_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=2 Pthief=-41 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=1 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=4 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.c reachObj._unlocked ) Ppolice1=-32 Ppolice2=1 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (1<Cpolice2 && 1<Cthief && Cpolice1==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.d police2.b thief.d reachObj.initial_location ) Ppolice1=4 Ppolice2=2 Pthief=4 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=1 && Cthief<=1), wait.
When you are in (1<Cpolice1 && 1<Cthief && 0<Creach && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice2<Cthief && Cthief<=Cpolice1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2<=1 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice1<Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=-34 Pthief=-23 
While you are in (10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10 && Creach<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.c reachObj._unlocked ) Ppolice1=-12 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=-23 Pthief=-43 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-41 Pthief=-43 
While you are in (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=1 Pthief=-23 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=3 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cpolice2<8 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.c reachObj.initial_location ) Ppolice1=2 Ppolice2=-21 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Creach<1 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-32 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<10 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (9<=Cpolice2 && 10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice1<=10) || (10<Cthief && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=3 Pthief=-34 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-23 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.d thief.going_a_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=4 Pthief=-12 
While you are in (0<Creach && Cpolice1<Cpolice2 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cthief) || (Cthief<=10 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<=1 && Cthief<=11 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<=10 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=10) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.c reachObj._unlocked ) Ppolice1=1 Ppolice2=-12 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-41 Pthief=2 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cthief<=1 && Cpolice2-Cthief<=1 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-14 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.b reachObj.initial_location ) Ppolice1=-43 Ppolice2=1 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Creach<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.b police2.d thief.going_d_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=4 Pthief=-41 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<=Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=10) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=-23 Pthief=-21 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.d thief.a reachObj.initial_location ) Ppolice1=4 Ppolice2=4 Pthief=1 
While you are in (Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<1 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2-Cpolice1<1 && Cthief<=1 && Cthief<Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice2-Cpolice1<1 && Cthief<Cpolice1 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<=-1 && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cthief<=1 && Cthief-Cpolice2<1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2) || (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice2<Cpolice1) || (1<Cthief && Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-14 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-12 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.b reachObj._unlocked ) Ppolice1=1 Ppolice2=-43 Pthief=2 
While you are in (Cpolice2<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Cthief && Cpolice2<=11 && Cpolice2-Cthief<10), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=3 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.b reachObj.initial_location ) Ppolice1=1 Ppolice2=-43 Pthief=2 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-41 Pthief=-41 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.a thief.a reachObj.initial_location ) Ppolice1=3 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=1) || (0<Creach && Cpolice2<=1 && Cpolice2==Cthief) || (0<Cpolice1 && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief) || (1<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cthief), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cpolice2<Cpolice1) || (1<Cthief && 0<Creach && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=1 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=3 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=1 Pthief=-12 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.b thief.going_d_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=2 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (Cpolice2<Cpolice1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cthief<=11) || (10<Cthief && Cpolice2<Cpolice1 && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=-23 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-34 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-14 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-34 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.a reachObj.initial_location ) Ppolice1=-12 Ppolice2=4 Pthief=1 
While you are in (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cthief<1 && Cthief-Cpolice1<=-10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief-Cpolice1<-10 && Cthief-Cpolice2<=-1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cthief-Cpolice1<=1) || (Cpolice1==10 && 10<Creach && Cpolice1-Cpolice2==9 && Cpolice2-Cthief==1 && Cthief==0) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-34 Pthief=-41 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.d thief.going_a_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=4 Pthief=-12 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (0<Creach && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-43 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.c police2.c thief.going_a_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=3 Pthief=-14 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-32 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-43 Pthief=-41 
While you are in (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-32 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.d reachObj.initial_location ) Ppolice1=-12 Ppolice2=2 Pthief=4 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief-Cpolice1<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Creach<=Cpolice1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=2 Pthief=-21 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.b thief.going_c_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=2 Pthief=-34 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1<=11 && Cpolice1-Creach<1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-41 Pthief=4 
While you are in (0<Cpolice2 && 0<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<10) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-12 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-23 Pthief=-41 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cpolice2<Creach && Cthief==10) || (1<Cpolice2 && 0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=-21 Pthief=-21 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=1 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=-21 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1==0 && Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (10<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-12 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice1<12 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<12 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-14 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-41 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-21 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-32 Pthief=-32 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-34 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=-41 Pthief=-41 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-14 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.c police2.b thief.going_d_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=2 Pthief=-43 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.d thief.going_a_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-23 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-32 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-41 Pthief=-43 
While you are in (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-32 Pthief=-41 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=4 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.a thief.d reachObj.initial_location ) Ppolice1=3 Ppolice2=1 Pthief=4 
While you are in (Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Cthief && 0<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach) || (Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2<=1 && Creach<=Cpolice1 && Creach<=Cpolice2), wait.

State: ( states.base police1.going_b_to_c police2.a thief.a reachObj.initial_location ) Ppolice1=-23 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice2<Cthief && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-43 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=10 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1==Cpolice2 && Cthief<Creach && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.d thief.d reachObj.initial_location ) Ppolice1=3 Ppolice2=4 Pthief=4 
While you are in (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2==Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief<=1) || (Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1 && Cthief-Cpolice2<1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.a police2.d thief.going_d_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=4 Pthief=-41 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.a thief.going_d_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && Cpolice1==Cpolice2 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=-23 Pthief=-12 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1<=11 && Cpolice1-Creach<1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=-41 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=-32 Pthief=-23 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=-41 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-23 Pthief=4 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cthief<=1 && Cpolice2-Cthief<=1 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-23 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=4 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=-12 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.a reachObj.initial_location ) Ppolice1=-14 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1) || (1<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Cthief<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice2<1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.d reachObj.initial_location ) Ppolice1=-34 Ppolice2=1 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<12 && Cthief-Cpolice1<-10 && Cthief<Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<=10 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice2<=1), wait.

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.a thief.c reachObj._unlocked ) Ppolice1=2 Ppolice2=1 Pthief=3 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=-14 Pthief=-41 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.b reachObj._unlocked ) Ppolice1=-41 Ppolice2=2 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-21 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.b police2.c thief.going_d_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=1 Pthief=-43 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.d thief.d reachObj.initial_location ) Ppolice1=1 Ppolice2=4 Pthief=4 
While you are in (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2==Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief<=1) || (Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1 && Cthief-Cpolice2<1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-23 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=10 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice1==Cpolice2 && Cthief<Creach && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=1 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<9 && Cpolice1<Creach && Cpolice2-Cthief==-10 && Cthief==10) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=10 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=-41 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.a reachObj._unlocked ) Ppolice1=-14 Ppolice2=2 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1) || (0<Cpolice1 && Cpolice1<=11), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-32 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-32 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Cthief<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-41 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-21 Pthief=2 
While you are in (0<Cpolice2 && 0<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<10) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=4 Pthief=-32 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=2 Pthief=-23 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-23 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.c reachObj._unlocked ) Ppolice1=1 Ppolice2=-34 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11) || (Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice2==0 && Cthief<=Cpolice1) || (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach-Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=-32 Pthief=-43 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=3 Pthief=-12 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.a reachObj.initial_location ) Ppolice1=-21 Ppolice2=4 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cthief<=1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1-Cpolice2<10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (0<Cpolice2 && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.

State: ( states.base police1.b police2.going_d_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=-43 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.c reachObj._unlocked ) Ppolice1=-23 Ppolice2=1 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-21 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-21 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=10 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice1==Cpolice2 && Cthief<Creach && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-43 Pthief=-23 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<1 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.b thief.going_c_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=2 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=-12 Pthief=-43 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-41 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<=1 && Cpolice2==Cthief) || (Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-21 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-32 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=4 Pthief=-23 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.b reachObj.initial_location ) Ppolice1=-21 Ppolice2=4 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief-Cpolice1<=-10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=1 && Cpolice2<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.b reachObj._unlocked ) Ppolice1=1 Ppolice2=-14 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=-12 Pthief=-34 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-32 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-12 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice2-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.d reachObj._unlocked ) Ppolice1=1 Ppolice2=-41 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.b police2.c thief.b reachObj._unlocked ) Ppolice1=2 Ppolice2=3 Pthief=2 
While you are in (Cpolice1<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-23 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-41 Pthief=2 
While you are in (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=3 Pthief=-14 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Cthief<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.d reachObj.initial_location ) Ppolice1=1 Ppolice2=-32 Pthief=4 
While you are in (0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (0<Creach && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.b police2.b thief.going_b_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=2 Pthief=-21 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=-14 Pthief=-21 
While you are in (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-21 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.b thief.going_b_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=2 Pthief=-21 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (1<=Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=10) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<1 && Cthief<Creach) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.c thief.a reachObj._unlocked ) Ppolice1=2 Ppolice2=3 Pthief=1 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-41 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.b reachObj.initial_location ) Ppolice1=1 Ppolice2=-12 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice2<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=-41 Pthief=-14 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-23 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.b police2.a thief.going_c_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=1 Pthief=-34 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=-23 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-12 Pthief=1 
While you are in (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=11 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=-32 Pthief=-32 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.b reachObj._unlocked ) Ppolice1=2 Ppolice2=-34 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=2 Pthief=-41 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=2 Pthief=-43 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=3 Pthief=-12 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<9 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<8 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (1<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-41 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.d reachObj._unlocked ) Ppolice1=1 Ppolice2=-14 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.a police2.a thief.c reachObj._unlocked ) Ppolice1=1 Ppolice2=1 Pthief=3 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cthief<Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<Cthief), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=2 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.c reachObj.initial_location ) Ppolice1=-41 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice2==Cthief && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=3 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.d reachObj._unlocked ) Ppolice1=-32 Ppolice2=3 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=2 Pthief=-34 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.a thief.d reachObj._unlocked ) Ppolice1=4 Ppolice2=1 Pthief=4 
While you are in (Cpolice1<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-34 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11), wait.

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-21 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=-12 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-14 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice2-Cthief<=10 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=-32 Pthief=-43 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (10<Creach && Cpolice1-Cpolice2==-10 && Cpolice2==Cthief && Cthief==10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=4 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.d reachObj._unlocked ) Ppolice1=-14 Ppolice2=4 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.d police2.c thief.going_b_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=-21 Pthief=-14 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.b thief.c reachObj._unlocked ) Ppolice1=2 Ppolice2=2 Pthief=3 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=3 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<10 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<10 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.b reachObj.initial_location ) Ppolice1=2 Ppolice2=-41 Pthief=2 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-43 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=4 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cthief<=10 && Cthief<Creach) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<=10) || (10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10 && Creach<=Cthief) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-21 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief-Creach<1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.d police2.a thief.d reachObj.initial_location ) Ppolice1=4 Ppolice2=1 Pthief=4 
While you are in (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=1) || (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=1 && Cthief<Cpolice2), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.b reachObj._unlocked ) Ppolice1=-34 Ppolice2=1 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-14 Pthief=2 
While you are in (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.d reachObj.initial_location ) Ppolice1=-14 Ppolice2=1 Pthief=4 
While you are in (Cpolice1-Cpolice2<10 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cpolice2<=Cthief && Cthief<=1 && Cthief-Cpolice1<-9 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Creach<=Cthief) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1==10 && 10<Creach && Cpolice1-Cpolice2==10 && Cpolice2-Cthief==-1 && Cthief==1) || (Cpolice1<1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<=1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-34 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.d reachObj._unlocked ) Ppolice1=-43 Ppolice2=4 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=4 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-21 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=-32 Pthief=-41 
While you are in (10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10 && Creach<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.b reachObj._unlocked ) Ppolice1=-32 Ppolice2=2 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.c police2.c thief.going_d_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.b thief.going_c_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=2 Pthief=-34 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cthief) || (0<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=9 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=11 && Cthief-Cpolice1<-1) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<1 && Cthief<=11) || (10<Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.d thief.going_d_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=4 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (1<=Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=10) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.d thief.going_d_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=4 Pthief=-41 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=-41 Pthief=-41 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-34 Pthief=1 
While you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Cpolice2 && 0<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<9 && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<11 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<Cpolice1 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=3 Pthief=-32 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.d reachObj.initial_location ) Ppolice1=-12 Ppolice2=3 Pthief=4 
While you are in (Cpolice1-Cpolice2<10 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cpolice2<=Cthief && Cthief<=1 && Cthief-Cpolice1<-9 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Creach<=Cthief) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1==10 && 10<Creach && Cpolice1-Cpolice2==10 && Cpolice2-Cthief==-1 && Cthief==1) || (Cpolice1<1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<=1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.a reachObj._unlocked ) Ppolice1=-12 Ppolice2=2 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-43 Pthief=-43 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=-23 Pthief=-21 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1), wait.
When you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-43 Pthief=4 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<9 && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.a reachObj.initial_location ) Ppolice1=4 Ppolice2=-14 Pthief=1 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=1 && Cpolice2==Cthief && Creach<=Cpolice2) || (10<=Cpolice2 && Cpolice1<=1 && Cpolice2-Cpolice1<=10 && Cpolice2-Cthief==10 && Cpolice2<Creach) || (Cpolice1<=1 && Cpolice1-Cpolice2<-9 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=-10) || (Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<=1 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-41 Pthief=1 
While you are in (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.d reachObj._unlocked ) Ppolice1=3 Ppolice2=-21 Pthief=4 
While you are in (Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-41 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-21 Pthief=-43 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-32 Pthief=-23 
While you are in (0<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=3 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-43 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=-12 Pthief=-12 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=1 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-41 Pthief=-43 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.b reachObj._unlocked ) Ppolice1=-43 Ppolice2=2 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-32 Pthief=-21 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-34 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=4 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-14 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=-23 Pthief=-21 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.d reachObj.initial_location ) Ppolice1=-23 Ppolice2=2 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief-Cpolice1<=-10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief) || (1<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1==Cpolice2 && Cpolice1<Cthief && Cthief-Cpolice1<=1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<11 && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=Cthief), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-34 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-12 Pthief=-14 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=2 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=4 Pthief=-23 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-21 Pthief=-21 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-23 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.

State: ( states.base police1.going_a_to_d police2.c thief.c reachObj.initial_location ) Ppolice1=-14 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1) || (1<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Cthief<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=2 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=4 Pthief=-12 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=2 Pthief=-43 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=10 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=4 Pthief=-21 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=10 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-32 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=-32 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.c reachObj._unlocked ) Ppolice1=-23 Ppolice2=4 Pthief=3 
While you are in (Cpolice1<=11), wait.

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-23 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=-12 Pthief=-41 
While you are in (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-41 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=-41 Pthief=-23 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-34 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.b reachObj._unlocked ) Ppolice1=1 Ppolice2=-34 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-21 Pthief=2 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<Cpolice1) || (Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<Cpolice1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-34 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief==10 && Cpolice1<Creach && Cpolice2<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cthief) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2 && Creach<Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.d police2.c thief.going_d_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.c thief.going_c_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=3 Pthief=-34 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=1 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.b thief.going_c_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-14 Pthief=3 
While you are in (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-14 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.c reachObj.initial_location ) Ppolice1=-32 Ppolice2=4 Pthief=3 
While you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<Cpolice2) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cpolice1<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (1<Cpolice2 && 0<Creach && Cpolice1-Cthief<=10 && Cpolice2<=Cpolice1 && Cthief<=1 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Creach<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-21 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=1 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<=11 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<10 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief) || (Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=3 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=3 Pthief=-41 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.a reachObj._unlocked ) Ppolice1=4 Ppolice2=-32 Pthief=1 
While you are in (0<Cpolice2 && Cpolice2<=11) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=1 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-21 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-34 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.b reachObj._unlocked ) Ppolice1=-41 Ppolice2=3 Pthief=2 
While you are in (0<Cpolice1 && Cpolice1<=11) || (Cpolice1<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-32 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-41 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.b reachObj.initial_location ) Ppolice1=3 Ppolice2=-32 Pthief=2 
While you are in (0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cthief-Cpolice2<=1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-41 Pthief=-14 
While you are in (Cpolice1==Cpolice2 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=2 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.c thief.going_d_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-23 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=4 Pthief=-32 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=-23 Pthief=-21 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.b reachObj.initial_location ) Ppolice1=-32 Ppolice2=4 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Creach<=Cpolice1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-12 Pthief=-41 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.b reachObj._unlocked ) Ppolice1=1 Ppolice2=-32 Pthief=2 
While you are in (Cpolice2<=11), wait.

State: ( states.base police1.b police2.d thief.going_c_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-14 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.c thief.going_d_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=3 Pthief=-41 
While you are in (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2-Cpolice1<1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<=-1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=-1 && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<9 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10), wait.
When you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief<=Cpolice2) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=10) || (10<Cthief && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cthief-Cpolice1<=10) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=1 Pthief=-32 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2-Cpolice1<10 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=-10 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10) || (Cpolice1-Cthief<-10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-10 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-23 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1-Cthief<9 && Cpolice2<=11) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-14 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<11 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<=-9 && Cthief-Cpolice2<=-9 && Cthief-Creach<-10) || (Cpolice1-Cthief<9 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief-Cpolice2<=-10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.c police2.b thief.a reachObj.initial_location ) Ppolice1=3 Ppolice2=2 Pthief=1 
While you are in (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=1 && Cthief<=Cpolice2) || (Cthief<=1 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cpolice1 && Cthief<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.a reachObj.initial_location ) Ppolice1=4 Ppolice2=-23 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Creach<1 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.a police2.c thief.b reachObj.initial_location ) Ppolice1=1 Ppolice2=3 Pthief=2 
While you are in (Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Cthief && 0<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach) || (Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2<=1 && Creach<=Cpolice1 && Creach<=Cpolice2), wait.

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-41 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.d reachObj.initial_location ) Ppolice1=4 Ppolice2=-23 Pthief=4 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=3 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<9 && Cpolice1<Creach && Cpolice2-Cthief==-10 && Cthief==10) || (Cpolice1-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2-Cpolice1<=-9 && Cpolice2-Cthief<=-9 && Cpolice2-Creach<-10 && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-10 && Cthief<=10 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cthief<=1 && Cthief-Cpolice1<-1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2-Cthief<-10 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief-Cpolice2<=10 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-14 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-41 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.c thief.b reachObj._unlocked ) Ppolice1=4 Ppolice2=3 Pthief=2 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.a reachObj._unlocked ) Ppolice1=3 Ppolice2=-32 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.a reachObj._unlocked ) Ppolice1=-12 Ppolice2=3 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.d reachObj.initial_location ) Ppolice1=3 Ppolice2=-43 Pthief=4 
While you are in (Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-10) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.b police2.b thief.b reachObj._unlocked ) Ppolice1=2 Ppolice2=2 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.c reachObj.initial_location ) Ppolice1=3 Ppolice2=-12 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Creach && Cpolice1==Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2-Cthief<-1 && Cthief<Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.b police2.d thief.going_b_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=4 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (1<=Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=10) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<1 && Cthief<Creach) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-14 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-34 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.c reachObj.initial_location ) Ppolice1=2 Ppolice2=-14 Pthief=3 
While you are in (0<Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2-Cthief<10 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (10<=Cpolice2 && Cpolice1<=1 && Cpolice2-Cpolice1<=10 && Cpolice2-Cthief==10 && Cpolice2<Creach) || (Cpolice1<=1 && Cpolice1-Cpolice2<-9 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=-10) || (Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cpolice2<Creach && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-41 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-23 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-12 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=-41 Pthief=-12 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.d thief.going_b_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=4 Pthief=-23 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.d reachObj.initial_location ) Ppolice1=-12 Ppolice2=4 Pthief=4 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach) || (1<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1==Cpolice2 && Cpolice1<Cthief && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=1 && Cthief<=Cpolice1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=-34 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=-14 Pthief=-14 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-14 Pthief=-41 
While you are in (0<Creach && Cpolice1==Cpolice2 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=3 Pthief=-21 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=-32 Pthief=-23 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=-21 Pthief=-43 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.d reachObj.initial_location ) Ppolice1=1 Ppolice2=-23 Pthief=4 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=-12 Pthief=-21 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.c thief.c reachObj._unlocked ) Ppolice1=1 Ppolice2=3 Pthief=3 
While you are in (Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cpolice2 && 1<Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice2<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.d reachObj._unlocked ) Ppolice1=2 Ppolice2=-32 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-41 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=10 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-21 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-12 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Creach<1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-21 Pthief=-12 
While you are in (0<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.c reachObj.initial_location ) Ppolice1=-21 Ppolice2=2 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1-Cpolice2<10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-32 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.b thief.going_b_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=2 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (1<=Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=10) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<1 && Cthief<Creach) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-43 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<=1 && Cpolice2==Cthief) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-32 Pthief=2 
While you are in (Cpolice1-Cthief<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=-23 Pthief=-34 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.a thief.c reachObj.initial_location ) Ppolice1=4 Ppolice2=1 Pthief=3 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cthief<=1) || (1<=Cpolice1 && Cpolice2==1 && 1<Creach && Cpolice2-Cthief==1 && Cthief==0) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1) || (Cpolice2<2 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<1 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=3 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-32 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=-23 Pthief=-12 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-12 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-43 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cthief<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice1 && 1<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.b reachObj._unlocked ) Ppolice1=-14 Ppolice2=4 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.d reachObj._unlocked ) Ppolice1=4 Ppolice2=-21 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Creach<1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach-Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=-23 Pthief=-32 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<-1 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.c thief.going_c_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=3 Pthief=-32 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.a thief.going_c_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=1 Pthief=-34 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<9 && Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Creach) || (Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cthief) || (Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=1 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.c reachObj._unlocked ) Ppolice1=-41 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.d police2.a thief.going_d_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=1 Pthief=-43 
While you are in (1<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=1 && Cpolice1<Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2), wait.
When you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<=10) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.d thief.going_d_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=4 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Cpolice2 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=2 Pthief=-23 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-12 Pthief=2 
While you are in (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=-12 Pthief=-21 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-43 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=Cpolice1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-41 Pthief=4 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1-Cthief<=1 && Cpolice2-Cthief<=1 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.d police2.b thief.going_b_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=2 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<=Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=10) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.a reachObj.initial_location ) Ppolice1=2 Ppolice2=-23 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Creach<1 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.a reachObj.initial_location ) Ppolice1=-12 Ppolice2=2 Pthief=1 
While you are in (Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief-Cpolice1<-10 && Cthief-Cpolice2<=-1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1==10 && 10<Creach && Cpolice1-Cpolice2==9 && Cpolice2-Cthief==1 && Cthief==0) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<1 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1) || (1<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1==Cpolice2 && Cpolice1<Cthief && Cthief-Cpolice1<=1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=4 Pthief=-43 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-23 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.a reachObj.initial_location ) Ppolice1=-23 Ppolice2=2 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1-Cpolice2<10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=-41 Pthief=-23 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10 && Creach<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=1 Pthief=-23 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=10 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=2 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-12 Pthief=4 
While you are in (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-43 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=-12 Pthief=-12 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-43 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief-Creach<1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=-41 Pthief=-21 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<=10 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=3 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (10<=Cpolice1 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cpolice2<8 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cthief-Cpolice1<-1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=1 Pthief=-32 
While you are in (Cpolice1<9 && Cpolice1<Creach && Cpolice2-Cthief==-10 && Cthief==10) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (9<=Cpolice1 && 10<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2-Cthief<-10 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief-Cpolice2<=10 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.a reachObj._unlocked ) Ppolice1=1 Ppolice2=-34 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-34 Pthief=4 
While you are in (Cpolice1-Cthief<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=-21 Pthief=-32 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.b reachObj.initial_location ) Ppolice1=3 Ppolice2=-14 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice2<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-21 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-21 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<9 && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<Cpolice1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=1 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.a reachObj.initial_location ) Ppolice1=1 Ppolice2=-21 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=-1) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.c reachObj._unlocked ) Ppolice1=-14 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.d reachObj._unlocked ) Ppolice1=-14 Ppolice2=3 Pthief=4 
While you are in (Cpolice1<=11), wait.

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-43 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.c reachObj.initial_location ) Ppolice1=4 Ppolice2=-41 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Creach<1 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.c police2.d thief.b reachObj._unlocked ) Ppolice1=3 Ppolice2=4 Pthief=2 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-12 Pthief=-23 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=-34 Pthief=-43 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.a reachObj._unlocked ) Ppolice1=-32 Ppolice2=4 Pthief=1 
While you are in (0<Cpolice1 && Cpolice1<=11) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.a reachObj.initial_location ) Ppolice1=-14 Ppolice2=4 Pthief=1 
While you are in (Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief-Cpolice1<-10 && Cthief-Cpolice2<=-1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1==10 && 10<Creach && Cpolice1-Cpolice2==9 && Cpolice2-Cthief==1 && Cthief==0) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<1 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1) || (1<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1==Cpolice2 && Cpolice1<Cthief && Cthief-Cpolice1<=1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=2 Pthief=-34 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.b thief.going_d_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=2 Pthief=-41 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (1<=Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=10) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=3 Pthief=-21 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-21 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=4 Pthief=-32 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<10 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.b reachObj._unlocked ) Ppolice1=3 Ppolice2=-12 Pthief=2 
While you are in (Cpolice2<=11), wait.

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-34 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-34 Pthief=3 
While you are in (0<Cpolice2 && 0<Cthief && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=11 && Cpolice2-Cthief<10) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=-14 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=4 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10 && Creach<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.c reachObj._unlocked ) Ppolice1=-23 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-12 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice1 && Creach<Cpolice1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-41 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.b thief.c reachObj.initial_location ) Ppolice1=4 Ppolice2=2 Pthief=3 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<Creach && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2-Cpolice1<1 && Cthief<Cpolice1 && Cthief<Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<Cpolice1) || (0<Creach && Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (0<Creach && Cpolice1-Cpolice2<=-1 && Cthief<=1 && Cthief<Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice2-Cpolice1<1 && Cthief<Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice2<=1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief-Cpolice1<=1), wait.

State: ( states.base police1.going_c_to_b police2.c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=3 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-21 Pthief=-23 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=3 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-14 Pthief=-41 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Creach<Cpolice2 && Creach<=Cthief), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-41 Pthief=2 
While you are in (0<Cpolice2 && 0<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<10) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-23 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=-41 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1==0 && Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=3 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<9 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice1-Cthief<=10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (9<=Cpolice1 && 10<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cpolice2<Creach && Cthief<Cpolice2) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<Cpolice1 && Creach<=Cpolice2) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Creach && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief-Cpolice2<=10), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.d reachObj._unlocked ) Ppolice1=-12 Ppolice2=1 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=1 Pthief=-43 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.a thief.going_c_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=1 Pthief=-34 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-43 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice1 && 1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-41 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Cthief<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.c reachObj._unlocked ) Ppolice1=3 Ppolice2=-43 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.c reachObj._unlocked ) Ppolice1=-34 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice1==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.b police2.a thief.going_a_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=1 Pthief=-12 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-12 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-21 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cthief<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=-14 Pthief=-12 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.c thief.d reachObj.initial_location ) Ppolice1=2 Ppolice2=3 Pthief=4 
While you are in (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=1 && Cthief<Cpolice2), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=3 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<10 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<10 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.b thief.b reachObj.initial_location ) Ppolice1=2 Ppolice2=2 Pthief=2 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cpolice1 && 1<Cthief && 0<Creach && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice2<Cthief && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<Cthief), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2<=1 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-34 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=-43 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1==0 && Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.a reachObj.initial_location ) Ppolice1=1 Ppolice2=-34 Pthief=1 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (1<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2==0 && Cthief<Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.c thief.going_b_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && Cpolice1==Cpolice2 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-12 Pthief=-21 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-41 Pthief=-43 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.a reachObj._unlocked ) Ppolice1=-43 Ppolice2=4 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=-43 Pthief=-34 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<-1 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-21 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.c thief.a reachObj.initial_location ) Ppolice1=1 Ppolice2=3 Pthief=1 
While you are in (0<Creach && Cpolice1<=Cthief && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1) || (1<Cthief && Cpolice1<=Cthief && Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=1 && Cthief<=Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cpolice2 && 1<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=1 && Cpolice2<Cpolice1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-34 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-23 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief) || (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=-43 Pthief=-32 
While you are in (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<-1 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.d reachObj.initial_location ) Ppolice1=-34 Ppolice2=2 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Creach<=Cpolice1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Creach<Cpolice2 && Creach<=Cthief), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-12 Pthief=-21 
While you are in (0<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Creach<Cpolice2 && Creach<=Cthief), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=-23 Pthief=-32 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-12 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-34 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=-32 Pthief=-34 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-43 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-41 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief-Creach<1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-32 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.b reachObj.initial_location ) Ppolice1=-34 Ppolice2=3 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2) || (Cpolice1-Cthief<=10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1-Cthief<=10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief-Cpolice1<=-10) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice2<=1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-43 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-43 Pthief=-41 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.c thief.d reachObj._unlocked ) Ppolice1=3 Ppolice2=3 Pthief=4 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=2 Pthief=-23 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-23 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.a police2.d thief.going_c_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.d thief.going_b_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=4 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=3 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.b thief.going_a_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=2 Pthief=-14 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=-32 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=2 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-41 Pthief=-14 
While you are in (0<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=2 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=1 Pthief=-32 
While you are in (Cpolice1-Cpolice2<9 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Creach<=Cpolice1) || (0<Cpolice1 && Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2-Cthief<=1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-43 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-32 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.c reachObj._unlocked ) Ppolice1=3 Ppolice2=-34 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-14 Pthief=-41 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.c thief.going_c_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=3 Pthief=-34 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Cpolice2 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-23 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1-Cpolice2<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=2 Pthief=-34 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<10 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.a reachObj._unlocked ) Ppolice1=-21 Ppolice2=4 Pthief=1 
While you are in (Cpolice1<=11), wait.

State: ( states.base police1.going_b_to_c police2.b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=2 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=-21 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=-21 Pthief=-12 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=3 Pthief=-32 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-23 Pthief=2 
While you are in (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2-Cthief<10 && Cpolice2<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=-43 Pthief=-21 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.d thief.going_a_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=4 Pthief=-12 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<=-1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice2<Cpolice1 && Cpolice2-Cthief<1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=11 && Cpolice2-Cthief<1 && Cpolice2-Creach<10 && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice2), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-12 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<10) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-14 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-12 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (0<Cpolice1 && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1==0 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (0<Cpolice1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.d reachObj.initial_location ) Ppolice1=1 Ppolice2=-14 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice2<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=4 Pthief=-23 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=10 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-21 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Cpolice1 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<11 && Cthief-Cpolice1<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.b thief.going_b_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=2 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-23 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.d police2.d thief.going_b_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=4 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<=Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=10) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.a reachObj.initial_location ) Ppolice1=-43 Ppolice2=4 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1-Cpolice2<10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach-Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=4 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11 && Creach<11 && Creach<=Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-14 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<10) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.d reachObj._unlocked ) Ppolice1=-34 Ppolice2=2 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=2 Pthief=-14 
While you are in (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<1) || (10<Cthief && Cpolice1<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=2 Pthief=-21 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-43 Pthief=-34 
While you are in (0<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.c reachObj.initial_location ) Ppolice1=1 Ppolice2=-43 Pthief=3 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice2<=11 && Cpolice2<Creach && Cthief<=1) || (1<Cpolice1 && Cpolice1-Cpolice2<-9 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief==10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2 && Creach-Cpolice1<=9 && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief-Cpolice2<=1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.c reachObj._unlocked ) Ppolice1=-34 Ppolice2=1 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=3 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<8 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice1<=Cthief && Cthief-Cpolice1<=1 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-41 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=-41 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief) || (Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.b thief.going_c_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && Cpolice1==Cpolice2 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=-43 Pthief=-41 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=1 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<9 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice1-Cthief<=10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (1<Cpolice2 && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (9<=Cpolice1 && 10<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief-Cpolice2<=10) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.b reachObj.initial_location ) Ppolice1=-12 Ppolice2=4 Pthief=2 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief-Cpolice1<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Creach<=Cpolice1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.b reachObj.initial_location ) Ppolice1=-23 Ppolice2=3 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=-10) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-23 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=10 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=-43 Pthief=-34 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=4 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.c thief.b reachObj.initial_location ) Ppolice1=3 Ppolice2=3 Pthief=2 
While you are in (Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1) || (Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cthief<=1 && Creach<=Cpolice1 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-32 Pthief=-32 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=-41 Pthief=-41 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-12 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-43 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.a reachObj._unlocked ) Ppolice1=1 Ppolice2=-32 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.b thief.going_b_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=2 Pthief=-21 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=1 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<9 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice1-Cthief<=10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (1<Cpolice2 && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (9<=Cpolice1 && 10<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief-Cpolice2<=10) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.b thief.b reachObj._unlocked ) Ppolice1=1 Ppolice2=2 Pthief=2 
While you are in (Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=1 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-43 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-34 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-32 Pthief=4 
While you are in (Cpolice1-Cthief<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=2 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.a thief.c reachObj._unlocked ) Ppolice1=3 Ppolice2=1 Pthief=3 
While you are in (Cpolice1<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-34 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Cthief<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.b reachObj._unlocked ) Ppolice1=3 Ppolice2=-21 Pthief=2 
While you are in (0<Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (Cpolice2<=11 && Cthief-Cpolice1<=11 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-21 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.b police2.a thief.d reachObj.initial_location ) Ppolice1=2 Ppolice2=1 Pthief=4 
While you are in (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cthief<=1) || (Cpolice1<=1 && Cpolice1<Cpolice2 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=1 && Cthief<Cpolice2), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-43 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.d thief.a reachObj._unlocked ) Ppolice1=1 Ppolice2=4 Pthief=1 
While you are in (Cpolice1<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=-12 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.d reachObj._unlocked ) Ppolice1=4 Ppolice2=-32 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-23 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.b thief.going_a_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=2 Pthief=-14 
While you are in (0<Creach && Cpolice1<Cpolice2 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cthief) || (Cthief<=10 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<=1 && Cthief<=11 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<=10 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=10) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-21 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.b reachObj._unlocked ) Ppolice1=-43 Ppolice2=1 Pthief=2 
While you are in (0<Cpolice1 && Cpolice1<=11) || (Cpolice1<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-32 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.a thief.going_b_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.c thief.going_b_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.c reachObj._unlocked ) Ppolice1=2 Ppolice2=-12 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-23 Pthief=-32 
While you are in (Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-34 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.b reachObj.initial_location ) Ppolice1=-21 Ppolice2=3 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.b reachObj.initial_location ) Ppolice1=3 Ppolice2=-12 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief-Cpolice2<=1) || (0<Creach && Cpolice2<=11 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-12 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=2 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=4 Pthief=-21 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=4 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=-21 Pthief=-14 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=4 Pthief=-12 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.c reachObj._unlocked ) Ppolice1=-43 Ppolice2=1 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.c police2.d thief.c reachObj._unlocked ) Ppolice1=3 Ppolice2=4 Pthief=3 
While you are in (Cpolice1<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-14 Pthief=-41 
While you are in (Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-34 Pthief=-34 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-14 Pthief=-41 
While you are in (Cpolice1==Cpolice2 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=-43 Pthief=-12 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-41 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Cpolice1 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<10) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<11 && Cthief-Cpolice1<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-23 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice1 && 1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.d reachObj._unlocked ) Ppolice1=4 Ppolice2=-14 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=-43 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.d thief.c reachObj.initial_location ) Ppolice1=1 Ppolice2=4 Pthief=3 
While you are in (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=1 && Cthief<=Cpolice2) || (Cthief<=1 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cthief<=1) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cpolice1 && Cthief<=1 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.a reachObj._unlocked ) Ppolice1=-34 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-23 Pthief=4 
While you are in (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<1 && Cthief<=Cpolice2) || (Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.d reachObj._unlocked ) Ppolice1=3 Ppolice2=-12 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-34 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.a thief.b reachObj._unlocked ) Ppolice1=2 Ppolice2=1 Pthief=2 
While you are in (Cpolice1<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=-21 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief) || (Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.a thief.a reachObj._unlocked ) Ppolice1=3 Ppolice2=1 Pthief=1 
While you are in (Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.c thief.going_c_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=3 Pthief=-32 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=3 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<9 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice1-Cthief<=10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (9<=Cpolice1 && 10<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief-Cpolice2<=10), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (0<Creach && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.c reachObj._unlocked ) Ppolice1=2 Ppolice2=-21 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.b reachObj.initial_location ) Ppolice1=-14 Ppolice2=2 Pthief=2 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach) || (1<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1==Cpolice2 && Cpolice1<Cthief && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=1 && Cthief<=Cpolice1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=3 Pthief=-41 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-23 Pthief=3 
While you are in (0<Cpolice1 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<11 && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-34 Pthief=-41 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.c reachObj.initial_location ) Ppolice1=-23 Ppolice2=1 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1-Cpolice2<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (Cpolice1-Cthief<=10 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cthief<1 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cthief<=10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<Cpolice2 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=-14 Pthief=-14 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-34 Pthief=3 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=Cpolice1) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cthief) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief==10 && Cpolice1<Creach && Cpolice2<=Cpolice1) || (0<Cpolice1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2 && Creach<Cthief) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<Cthief), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2==0) || (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0) || (0<Creach && Cpolice1<=1 && Cpolice1-Cthief<-1 && Cpolice2==0 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=2 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cthief<=10 && Cthief<Creach) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<=10) || (10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10 && Creach<=Cthief) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=3 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.c thief.going_b_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=3 Pthief=-21 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-43 Pthief=-21 
While you are in (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<1 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-12 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice2-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.d reachObj.initial_location ) Ppolice1=3 Ppolice2=-12 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice2<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<9 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<9 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (1<Cpolice2 && 10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.c thief.going_a_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=3 Pthief=-14 
While you are in (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief), wait.
When you are in (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-41 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-41 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cthief<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-21 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-34 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=-23 Pthief=-14 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.c reachObj.initial_location ) Ppolice1=-34 Ppolice2=2 Pthief=3 
While you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<Cpolice2) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cpolice1<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (1<Cpolice2 && 0<Creach && Cpolice1-Cthief<=10 && Cpolice2<=Cpolice1 && Cthief<=1 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Creach<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=-41 Pthief=-43 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Cthief<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=-41 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1==0 && Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (10<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=2 Pthief=-43 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.b thief.going_b_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=2 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Cpolice2 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.b thief.a reachObj._unlocked ) Ppolice1=3 Ppolice2=2 Pthief=1 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-32 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.d thief.going_c_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.b thief.going_a_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=2 Pthief=-14 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-34 Pthief=-43 
While you are in (Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-43 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cpolice2<=Cthief), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cthief<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-43 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.d reachObj._unlocked ) Ppolice1=-43 Ppolice2=1 Pthief=4 
While you are in (0<Cpolice1 && Cpolice1<=11 && Cpolice1<=Cthief) || (Cpolice1<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-41 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.d reachObj._unlocked ) Ppolice1=1 Ppolice2=-12 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-14 Pthief=-41 
While you are in (Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.a reachObj.initial_location ) Ppolice1=4 Ppolice2=-43 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Creach<1 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.b reachObj._unlocked ) Ppolice1=4 Ppolice2=-23 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.b police2.c thief.c reachObj.initial_location ) Ppolice1=2 Ppolice2=3 Pthief=3 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=1 && Cpolice2==Cthief && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-41 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=-23 Pthief=-32 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.d thief.going_a_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && Cpolice1==Cpolice2 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-32 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<9 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<9 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (1<Cpolice2 && 10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.b reachObj._unlocked ) Ppolice1=-12 Ppolice2=4 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-12 Pthief=-21 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10), wait.
When you are in (10<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=-10 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cthief<-10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-10 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-43 Pthief=4 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<Cpolice1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.c police2.d thief.going_a_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-14 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cthief-Cpolice2<=1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-34 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.b reachObj.initial_location ) Ppolice1=3 Ppolice2=-43 Pthief=2 
While you are in (Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-10) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.c police2.d thief.going_d_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=4 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=-23 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1==0 && Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (10<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Creach<Cpolice2 && Creach<=Cthief), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=3 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=3 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<9 && Cpolice1<Creach && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=10 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=-41 Pthief=-32 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.a reachObj._unlocked ) Ppolice1=-32 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=4 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-41 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=10 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1==Cpolice2 && Cthief<Creach && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.a thief.b reachObj.initial_location ) Ppolice1=4 Ppolice2=1 Pthief=2 
While you are in (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cthief<=1) || (Cpolice1<=1 && Cpolice1<Cpolice2 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=1 && Cthief<Cpolice2), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-14 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<=-9 && Cthief-Cpolice2<=-9 && Cthief-Creach<-10) || (Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2==0 && Cthief<=1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief-Cpolice1<=-10 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1), wait.
When you are in (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0) || (0<Creach && Cpolice1<=1 && Cpolice1-Cthief<-1 && Cpolice2==0) || (1<Cthief && Cpolice1<=1 && Cpolice1<Creach && Cpolice2==0 && Cthief-Cpolice1<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=1 Pthief=-34 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.c thief.going_d_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=3 Pthief=-41 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.a thief.going_b_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-32 Pthief=-43 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (1<Cpolice2 && 10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-23 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-14 Pthief=-14 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.a reachObj.initial_location ) Ppolice1=-43 Ppolice2=2 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1-Cpolice2<10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.d reachObj.initial_location ) Ppolice1=1 Ppolice2=-21 Pthief=4 
While you are in (Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-10) || (Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-43 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1-Cthief<9 && Cpolice2<=11) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=4 Pthief=-41 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-34 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.a reachObj.initial_location ) Ppolice1=2 Ppolice2=-12 Pthief=1 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=1 && Cpolice2==Cthief && Creach<=Cpolice2) || (10<=Cpolice2 && Cpolice1<=1 && Cpolice2-Cpolice1<=10 && Cpolice2-Cthief==10 && Cpolice2<Creach) || (Cpolice1<=1 && Cpolice1-Cpolice2<-9 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=-10) || (Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<=1 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-34 Pthief=2 
While you are in (Cpolice1-Cthief<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<9 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cthief), wait.
When you are in (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.d reachObj._unlocked ) Ppolice1=3 Ppolice2=-43 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-32 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-43 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=-34 Pthief=-43 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.b reachObj.initial_location ) Ppolice1=-34 Ppolice2=1 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2) || (Cpolice1-Cthief<=10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1-Cthief<=10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief-Cpolice1<=-10) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice2<=1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-23 Pthief=3 
While you are in (0<Cpolice1 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (0<Cpolice1 && 0<Cthief && Cpolice1<=11 && Cpolice1-Cthief<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief-Cpolice1<=1 && Cthief-Cpolice2<12) || (Cpolice1<11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-43 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.b thief.going_c_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=2 Pthief=-34 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cpolice2<Creach && Cthief==10) || (1<Cpolice2 && 0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-41 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=-41 Pthief=-43 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=-34 Pthief=-21 
While you are in (10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10 && Creach<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.a reachObj.initial_location ) Ppolice1=-32 Ppolice2=4 Pthief=1 
While you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<Cpolice2 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cpolice1<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.c thief.going_d_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=3 Pthief=-41 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-34 Pthief=-23 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=-41 Pthief=-23 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-21 Pthief=-43 
While you are in (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<1 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-12 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-32 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.b reachObj.initial_location ) Ppolice1=-41 Ppolice2=4 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief-Cpolice1<=-10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief) || (1<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1==Cpolice2 && Cpolice1<Cthief && Cthief-Cpolice1<=1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<11 && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=Cthief), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.b police2.d thief.d reachObj._unlocked ) Ppolice1=2 Ppolice2=4 Pthief=4 
While you are in (Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=-43 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.b thief.going_d_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=2 Pthief=-41 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-32 Pthief=1 
While you are in (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2==0 && Cthief<=1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Cpolice2 && 0<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<9 && Cpolice1<Creach && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-41 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-23 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=3 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<9 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice1-Cthief<=10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (9<=Cpolice1 && 10<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief-Cpolice2<=10), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=4 Pthief=-21 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-32 Pthief=-23 
While you are in (0<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-41 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=-43 Pthief=-12 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.d thief.going_d_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=4 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-34 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-32 Pthief=-14 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-21 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.d thief.going_c_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=4 Pthief=-32 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.b reachObj._unlocked ) Ppolice1=4 Ppolice2=-34 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<9 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<9 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (1<Cpolice2 && 10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-41 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-41 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-21 Pthief=-12 
While you are in (Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach-Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=4 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-43 Pthief=2 
While you are in (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=4 Pthief=-41 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-23 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-12 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=-21 Pthief=-23 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-43 Pthief=-34 
While you are in (Cpolice1==Cpolice2 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.c thief.c reachObj.initial_location ) Ppolice1=4 Ppolice2=3 Pthief=3 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=1 && Cpolice2==Cthief && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.a police2.c thief.c reachObj.initial_location ) Ppolice1=1 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=1) || (0<Creach && Cpolice2<=1 && Cpolice2==Cthief) || (0<Cpolice1 && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<Cthief && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cpolice2<Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1) || (1<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-34 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.a reachObj._unlocked ) Ppolice1=-23 Ppolice2=4 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=-41 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.b thief.going_c_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-21 Pthief=-14 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=3 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.c thief.going_b_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=3 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.c reachObj.initial_location ) Ppolice1=4 Ppolice2=-12 Pthief=3 
While you are in (0<Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2-Cthief<10 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (10<=Cpolice2 && Cpolice1<=1 && Cpolice2-Cpolice1<=10 && Cpolice2-Cthief==10 && Cpolice2<Creach) || (Cpolice1<=1 && Cpolice1-Cpolice2<-9 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=-10) || (Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cpolice2<Creach && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-41 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cthief && Cpolice1<=11 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Creach<Cpolice2 && Creach<=Cthief), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=-21 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1==0 && Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (10<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.a thief.c reachObj.initial_location ) Ppolice1=3 Ppolice2=1 Pthief=3 
While you are in (0<Creach && Cpolice1<=Cthief && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1) || (1<Cthief && 0<Creach && Cpolice2<Cthief && Cthief<=Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=1 && Cpolice2<Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=1 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<9 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Creach<=Cpolice1) || (0<Cpolice1 && Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2-Cthief<=1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=3 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=2 Pthief=-21 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<9 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=-41 Pthief=-43 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cthief) || (Cpolice2<=11 && Cthief<=10 && Cthief<Creach), wait.
When you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1) || (10<Cthief && Cpolice1<=Cthief && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.c thief.going_b_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=3 Pthief=-21 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-43 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Creach<Cpolice2 && Creach<=Cthief), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.c reachObj.initial_location ) Ppolice1=-21 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice2==Cthief && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1==Cpolice2 && Cthief-Cpolice1<=1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Creach<1 && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=4 Pthief=-43 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.d reachObj.initial_location ) Ppolice1=3 Ppolice2=-23 Pthief=4 
While you are in (Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-10) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=-34 Pthief=-34 
While you are in (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-14 Pthief=-14 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-32 Pthief=-23 
While you are in (Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=-23 Pthief=-14 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-12 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-23 Pthief=-32 
While you are in (Cpolice1==Cpolice2 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.b thief.going_d_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=2 Pthief=-41 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-41 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=-34 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=-14 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2-Cthief<=10 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<=Cpolice2) || (10<=Cpolice2 && 10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<10 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<=-10 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Creach && Cthief<=11) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.c reachObj.initial_location ) Ppolice1=4 Ppolice2=-14 Pthief=3 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=1 && Cpolice2==Cthief && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice2) || (10<=Cpolice2 && Cpolice1<=1 && Cpolice2-Cpolice1<=10 && Cpolice2-Cthief==10 && Cpolice2<Creach) || (Cpolice1<=1 && Cpolice1-Cpolice2<-9 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=-10) || (Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<=1 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-34 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=1 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=10 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<12 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=-32 Pthief=-32 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.a thief.going_c_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=1 Pthief=-32 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<9 && Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Creach) || (Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cthief) || (Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=1 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-41 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<9 && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=3 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-34 Pthief=4 
While you are in (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (0<Cpolice1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Creach && Cpolice2<Cpolice1 && Cpolice2<Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.b reachObj._unlocked ) Ppolice1=-21 Ppolice2=2 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=1 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.c reachObj._unlocked ) Ppolice1=-14 Ppolice2=4 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.b reachObj._unlocked ) Ppolice1=3 Ppolice2=-34 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.b police2.a thief.going_a_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=1 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<9 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cthief<=10 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11 && Creach<Cpolice1 && Creach<=Cthief) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<1 && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.a thief.going_d_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.c reachObj._unlocked ) Ppolice1=-43 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.d reachObj._unlocked ) Ppolice1=1 Ppolice2=-21 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-41 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.a thief.going_b_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=1 Pthief=-23 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-32 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.a thief.going_d_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=1 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=1 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-23 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-12 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-34 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=3 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=2 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.a reachObj._unlocked ) Ppolice1=-41 Ppolice2=2 Pthief=1 
While you are in (Cpolice1<=11), wait.

State: ( states.base police1.a police2.d thief.b reachObj.initial_location ) Ppolice1=1 Ppolice2=4 Pthief=2 
While you are in (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief<=1) || (Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (0<Cpolice1 && 0<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=1 && Creach<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=1 Pthief=-32 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.a thief.going_a_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=1 Pthief=-12 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (Cpolice1<=1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=4 Pthief=-43 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.a thief.going_c_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=1 Pthief=-32 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Cpolice2 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2), wait.
When you are in (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1<=11 && Cpolice1-Creach<1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=2 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.d reachObj._unlocked ) Ppolice1=4 Ppolice2=-43 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-34 Pthief=4 
While you are in (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice1 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-12 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.d reachObj.initial_location ) Ppolice1=-43 Ppolice2=3 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=-10) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-14 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief-Cpolice1<1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (1<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1==Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-12 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice1 && Creach<Cpolice1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-43 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.a reachObj._unlocked ) Ppolice1=4 Ppolice2=-41 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.a reachObj.initial_location ) Ppolice1=-43 Ppolice2=3 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=1 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=9 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cthief<1 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2-Cpolice1<=-10) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Creach<=Cpolice1 && Creach<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2-Cpolice1<1 && Cpolice2-Cthief<10 && Cpolice2<Creach), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-41 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=3 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.c thief.a reachObj.initial_location ) Ppolice1=4 Ppolice2=3 Pthief=1 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cthief<=1) || (1<=Cpolice1 && Cpolice2==1 && 1<Creach && Cpolice2-Cthief==1 && Cthief==0) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1) || (Cpolice2<2 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<1 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.d reachObj._unlocked ) Ppolice1=-41 Ppolice2=2 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-41 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.b reachObj.initial_location ) Ppolice1=2 Ppolice2=-21 Pthief=2 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.c reachObj.initial_location ) Ppolice1=1 Ppolice2=-23 Pthief=3 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice2) || (Cpolice2<=11 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (1<Cpolice1 && Cpolice1-Cpolice2<-9 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief==10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2 && Creach-Cpolice1<=9 && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief-Cpolice2<=1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.b reachObj._unlocked ) Ppolice1=2 Ppolice2=-43 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=4 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=2 Pthief=-21 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.b reachObj.initial_location ) Ppolice1=2 Ppolice2=-34 Pthief=2 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-34 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=-32 Pthief=-32 
While you are in (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2), wait.
When you are in (0<Cpolice1 && 10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.a reachObj.initial_location ) Ppolice1=2 Ppolice2=-21 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Creach<1 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-34 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=-14 Pthief=-12 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cpolice2<=2 && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<=2 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (10<Cthief && Cpolice1-Cpolice2<=2 && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.b reachObj._unlocked ) Ppolice1=3 Ppolice2=-14 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.d reachObj.initial_location ) Ppolice1=2 Ppolice2=-23 Pthief=4 
While you are in (0<Creach && Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-10) || (0<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief-Cpolice1<1 && Cthief<=Cpolice2 && Creach<=Cthief), wait.
When you are in (1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-41 Pthief=-23 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<1 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.a reachObj._unlocked ) Ppolice1=1 Ppolice2=-12 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-32 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=2 Pthief=-41 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=4 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=-14 Pthief=-23 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-41 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-23 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.c reachObj._unlocked ) Ppolice1=-14 Ppolice2=2 Pthief=3 
While you are in (0<Cpolice1 && Cpolice1<=11) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-14 Pthief=-14 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-23 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.c reachObj.initial_location ) Ppolice1=-41 Ppolice2=1 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=1 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=9 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cthief<1 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1==Cpolice2 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice2<=-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<=1 && Cpolice2-Creach<1 && Cthief<Cpolice1 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<=-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (1<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<Cpolice2 && Cthief<Creach && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Creach<=Cpolice1 && Creach<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cthief<Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.c reachObj.initial_location ) Ppolice1=4 Ppolice2=-21 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Creach<1 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.a reachObj._unlocked ) Ppolice1=3 Ppolice2=-34 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-14 Pthief=4 
While you are in (0<Cpolice1 && 0<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<10) || (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.d reachObj._unlocked ) Ppolice1=2 Ppolice2=-34 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-32 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Cthief<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.b thief.going_d_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=2 Pthief=-43 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.a reachObj._unlocked ) Ppolice1=2 Ppolice2=-23 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.c reachObj.initial_location ) Ppolice1=2 Ppolice2=-41 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Creach<1 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-23 Pthief=-21 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.c reachObj.initial_location ) Ppolice1=-12 Ppolice2=2 Pthief=3 
While you are in (Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief-Cpolice1<-10 && Cthief-Cpolice2<=-1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1==10 && 10<Creach && Cpolice1-Cpolice2==9 && Cpolice2-Cthief==1 && Cthief==0) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<1 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-21 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=-43 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.b reachObj._unlocked ) Ppolice1=4 Ppolice2=-32 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.c reachObj.initial_location ) Ppolice1=-12 Ppolice2=4 Pthief=3 
While you are in (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<Cpolice2) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cthief<1 && Cthief-Cpolice1<=-10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief-Cpolice1<-10 && Cthief-Cpolice2<=-1) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cthief-Cpolice1<=1) || (Cpolice1==10 && 10<Creach && Cpolice1-Cpolice2==9 && Cpolice2-Cthief==1 && Cthief==0) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.b thief.going_a_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=2 Pthief=-14 
While you are in (0<Creach && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cthief) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<=10 && Cthief<=10 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cthief<=10 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<=10) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cthief<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=11 && Creach<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<1 && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-43 Pthief=-34 
While you are in (0<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=-32 Pthief=-14 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=-43 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.a reachObj._unlocked ) Ppolice1=1 Ppolice2=-43 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-14 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11), wait.

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-41 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-14 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-23 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.b thief.going_a_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<9 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cthief), wait.
When you are in (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=2 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=4 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-32 Pthief=2 
While you are in (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1==0 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=3 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=-32 Pthief=-21 
While you are in (10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10 && Creach<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=1 Pthief=-43 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=2 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=1 Pthief=-32 
While you are in (Cpolice1-Cpolice2<9 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Creach<=Cpolice1) || (0<Cpolice1 && Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2-Cthief<=1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-23 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-43 Pthief=-34 
While you are in (0<Creach && Cpolice1==Cpolice2 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-43 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.c reachObj.initial_location ) Ppolice1=-41 Ppolice2=4 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1-Cpolice2<10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-43 Pthief=-41 
While you are in (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-43 Pthief=-34 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-23 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.d thief.going_a_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=4 Pthief=-12 
While you are in (0<Creach && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cthief) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<=10 && Cthief<=10 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cthief<=10 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<=10) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cthief<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=11 && Creach<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<1 && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-14 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-2 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=2 && Cpolice1-Cthief<=2 && Cpolice2<=11 && Cpolice2-Cthief<=1 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=2 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (2<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=-23 Pthief=-23 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=4 Pthief=-32 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=4 Pthief=-23 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.b thief.a reachObj._unlocked ) Ppolice1=1 Ppolice2=2 Pthief=1 
While you are in (Cpolice1<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=-14 Pthief=-14 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cpolice2<=2 && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (10<Cthief && Cpolice1-Cpolice2<=2 && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.c thief.b reachObj.initial_location ) Ppolice1=2 Ppolice2=3 Pthief=2 
While you are in (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=1) || (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=1 && Cthief<Cpolice2), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-32 Pthief=-23 
While you are in (Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-34 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief==10 && Cpolice1<Creach && Cpolice2<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cthief) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach<Cthief), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.b thief.going_b_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=2 Pthief=-21 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<=Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=10) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=11) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.c reachObj._unlocked ) Ppolice1=4 Ppolice2=-23 Pthief=3 
While you are in (Cpolice2<=11), wait.

State: ( states.base police1.b police2.going_b_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=-21 Pthief=-43 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-14 Pthief=-41 
While you are in (0<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=-34 Pthief=-23 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.b thief.going_a_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && Cpolice1==Cpolice2 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-41 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.b reachObj.initial_location ) Ppolice1=2 Ppolice2=-12 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1==Cpolice2 && Cpolice1<=Cthief && Cthief<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.c reachObj._unlocked ) Ppolice1=2 Ppolice2=-43 Pthief=3 
While you are in (Cpolice2<=11), wait.

State: ( states.base police1.going_c_to_b police2.d thief.d reachObj._unlocked ) Ppolice1=-32 Ppolice2=4 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-43 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-34 Pthief=-14 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=2 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-14 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=4 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.b reachObj._unlocked ) Ppolice1=-34 Ppolice2=3 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-34 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.a reachObj.initial_location ) Ppolice1=1 Ppolice2=-43 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice1) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=-1) || (1<Cthief && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-34 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.c thief.going_d_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=3 Pthief=-41 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.b reachObj.initial_location ) Ppolice1=3 Ppolice2=-23 Pthief=2 
While you are in (Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-10) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.d police2.b thief.d reachObj._unlocked ) Ppolice1=4 Ppolice2=2 Pthief=4 
While you are in (Cpolice1<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.b police2.c thief.going_b_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=3 Pthief=-21 
While you are in (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (1<Cpolice1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=1 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<9 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (0<Cpolice1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (10<Cthief && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cthief-Cpolice1<=10) || (10<Cthief && Cthief<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.d thief.b reachObj._unlocked ) Ppolice1=4 Ppolice2=4 Pthief=2 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.b reachObj.initial_location ) Ppolice1=-41 Ppolice2=2 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2==Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=Cthief), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-21 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-14 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-34 Pthief=-21 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.b thief.going_a_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=2 Pthief=-14 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<=-1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice2<Cpolice1 && Cpolice2-Cthief<1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=11 && Cpolice2-Cthief<1 && Cpolice2-Creach<10 && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice2), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-32 Pthief=-23 
While you are in (Cpolice1==Cpolice2 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=2 Pthief=-43 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=10 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.c reachObj.initial_location ) Ppolice1=1 Ppolice2=-14 Pthief=3 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2 && Creach<Cpolice1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=4 Pthief=-32 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-14 Pthief=-12 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=10 && Cpolice1-Cpolice2<=1 && Cpolice1==Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1==Cthief && Cpolice2<=11 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=-12 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<10 && Cpolice2==Cthief) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<=-10 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Creach && Cthief<=11) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=2 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.b thief.going_a_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.b reachObj._unlocked ) Ppolice1=2 Ppolice2=-32 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=-23 Pthief=-41 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.d reachObj._unlocked ) Ppolice1=-21 Ppolice2=2 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-14 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice2-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=2 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=1 Pthief=-32 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-32 Pthief=-34 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-23 Pthief=-41 
While you are in (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-14 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=-14 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-14 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2<=2 && Cpolice1-Cthief<=2 && Cpolice1-Creach<1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=1 Pthief=-32 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.d reachObj._unlocked ) Ppolice1=-41 Ppolice2=1 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.c reachObj._unlocked ) Ppolice1=-12 Ppolice2=2 Pthief=3 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-12 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-41 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.d police2.b thief.b reachObj.initial_location ) Ppolice1=4 Ppolice2=2 Pthief=2 
While you are in (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=1 && Cpolice2<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cpolice2<=Cpolice1 && Cpolice2==Cthief), wait.
When you are in (1<Cpolice1 && 1<Cthief && 0<Creach && Cthief<=Cpolice2) || (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2) || (1<Cthief && Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2<Cpolice1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-12 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice2-Cthief<=10 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=-34 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=4 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=-32 Pthief=-43 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-21 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=-14 Pthief=-34 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.a reachObj.initial_location ) Ppolice1=-21 Ppolice2=2 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1-Cpolice2<10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=-23 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.a thief.a reachObj.initial_location ) Ppolice1=2 Ppolice2=1 Pthief=1 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=1 && Cpolice2==Cthief && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.d thief.going_b_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=4 Pthief=-21 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.a thief.a reachObj._unlocked ) Ppolice1=4 Ppolice2=1 Pthief=1 
While you are in (Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-21 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=2 Pthief=-34 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=4 Pthief=-12 
While you are in (0<Creach && Cpolice1-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<=10) || (10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10 && Creach<=Cthief) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-12 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=-21 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=2 Pthief=-23 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=-12 Pthief=-14 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-23 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-41 Pthief=-43 
While you are in (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.a reachObj._unlocked ) Ppolice1=3 Ppolice2=-23 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.c reachObj.initial_location ) Ppolice1=2 Ppolice2=-23 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Creach<1 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.a reachObj.initial_location ) Ppolice1=-34 Ppolice2=3 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (1<Cpolice2 && Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=1 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.a thief.going_b_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-43 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.a police2.b thief.going_d_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=2 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=-23 Pthief=-34 
While you are in (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<-1 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.b thief.c reachObj.initial_location ) Ppolice1=1 Ppolice2=2 Pthief=3 
While you are in (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=1 && Cthief<=Cpolice2) || (Cthief<=1 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cthief<=1) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cpolice1 && Cthief<=1 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-12 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<11 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<=-9 && Cthief-Cpolice2<=-9 && Cthief-Creach<-10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cthief<9 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief-Cpolice2<=-10) || (0<Cpolice1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1), wait.
When you are in (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0) || (0<Cpolice1 && 1<Cthief && Cpolice1<=1 && Cpolice1<Creach && Cpolice2==0) || (0<Creach && Cpolice1<=1 && Cpolice1-Cthief<-1 && Cpolice2==0 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=-14 Pthief=-14 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.d thief.going_b_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=4 Pthief=-21 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2) || (1<=Cthief && 1<Creach && Cpolice1-Cpolice2==-1 && Cpolice2==1 && Cthief<=10) || (0<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<Cthief && Cthief<=11) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-34 Pthief=-21 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=2 && Cpolice1-Creach<1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<11 && Creach<Cpolice2 && Creach<=Cthief), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=-12 Pthief=-32 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-12 Pthief=-21 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Creach<1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-21 Pthief=-21 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-32 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-12 Pthief=-14 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<10) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.d thief.going_b_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=4 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (Cpolice2<Cpolice1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=1 && Cthief<=11) || (10<Cthief && Cpolice2<Cpolice1 && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-12 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.c reachObj._unlocked ) Ppolice1=1 Ppolice2=-43 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-41 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.d reachObj._unlocked ) Ppolice1=-43 Ppolice2=2 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-14 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice2-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=2 Pthief=-43 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-41 Pthief=2 
While you are in (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-41 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-32 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1-Cthief<9 && Cpolice2<=11) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.b reachObj.initial_location ) Ppolice1=-41 Ppolice2=3 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Creach<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.c reachObj._unlocked ) Ppolice1=2 Ppolice2=-34 Pthief=3 
While you are in (0<Cpolice2 && Cpolice2<=11) || (Cpolice2<=11 && Cpolice2-Cthief<10 && Cthief-Cpolice1<11 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-12 Pthief=-12 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=10 && Cpolice1-Cpolice2<=1 && Cpolice1==Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=3 Pthief=-21 
While you are in (Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-32 Pthief=2 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cthief<10 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=-10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), wait.

State: ( states.base police1.going_b_to_c police2.c thief.d reachObj._unlocked ) Ppolice1=-23 Ppolice2=3 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=-32 Pthief=-32 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=-34 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2==-10 && Cpolice1-Cthief<=-9 && Cpolice1-Creach<-10 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=1 && Cpolice1-Cpolice2==-10 && Cpolice1-Creach<-10 && Cthief-Cpolice1<=10), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.c thief.going_c_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=3 Pthief=-34 
While you are in (0<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Creach) || (Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cthief) || (Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=1 && Cpolice1-Cpolice2<1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=1 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.c reachObj.initial_location ) Ppolice1=3 Ppolice2=-43 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice2<=11) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<Cpolice1) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-34 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=-32 Pthief=-23 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.c reachObj._unlocked ) Ppolice1=4 Ppolice2=-41 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-32 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<=Cthief) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-14 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<11 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<=-9 && Cthief-Cpolice2<=-9 && Cthief-Creach<-10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cthief<9 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief-Cpolice2<=-10) || (0<Cpolice1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1), wait.
When you are in (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0) || (1<Cthief && Cpolice1<=1 && Cpolice1<Creach && Cpolice2==0) || (0<Creach && Cpolice1<=1 && Cpolice1-Cthief<-1 && Cpolice2==0 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.b reachObj.initial_location ) Ppolice1=-32 Ppolice2=1 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<12 && Cthief-Cpolice1<-10 && Cthief<Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<=10 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice2<=1), wait.

State: ( states.base police1.c police2.going_c_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=-32 Pthief=-23 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.d thief.going_b_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=4 Pthief=-21 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.a reachObj.initial_location ) Ppolice1=2 Ppolice2=-41 Pthief=1 
While you are in (Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<11 && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=1 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<=10) || (0<Cpolice1 && 0<Creach && Cpolice1<=1 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<10 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.

State: ( states.base police1.c police2.going_b_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-14 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.b reachObj.initial_location ) Ppolice1=1 Ppolice2=-14 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice2<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.b thief.going_a_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=-41 Pthief=-14 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.a thief.going_c_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=1 Pthief=-34 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=1 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (10<=Cpolice1 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cthief<=1 && Cthief-Cpolice1<-1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=11 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-34 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.d reachObj._unlocked ) Ppolice1=1 Ppolice2=-23 Pthief=4 
While you are in (Cpolice2<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Cthief && Cpolice2<=11 && Cpolice2-Cthief<10), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.a reachObj.initial_location ) Ppolice1=-14 Ppolice2=2 Pthief=1 
While you are in (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cthief<1 && Cthief-Cpolice1<=-10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief-Cpolice1<-10 && Cthief-Cpolice2<=-1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cthief-Cpolice1<=1) || (Cpolice1==10 && 10<Creach && Cpolice1-Cpolice2==9 && Cpolice2-Cthief==1 && Cthief==0) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.c reachObj.initial_location ) Ppolice1=1 Ppolice2=-32 Pthief=3 
While you are in (0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.a reachObj._unlocked ) Ppolice1=-41 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.a thief.going_b_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=1 Pthief=-23 
While you are in (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2-Cpolice1<1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=-1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=-1 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cpolice1 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Creach<10 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2), wait.
When you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<=10) || (10<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice1<=10 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief<=Cpolice2) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<11 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief-Cpolice1<=10 && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-14 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=-21 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-23 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.a reachObj._unlocked ) Ppolice1=2 Ppolice2=-12 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-14 Pthief=-34 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-41 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=-32 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.c reachObj.initial_location ) Ppolice1=-12 Ppolice2=1 Pthief=3 
While you are in (1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cpolice2 && Cpolice1<=11 && Cpolice1<Creach && Cthief-Cpolice1<=-10) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<=Cpolice1 && 1<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief==10 && Cpolice1-Creach<10 && Cpolice2<=Cpolice1 && Creach<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=-21 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1==0 && Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (10<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-34 Pthief=1 
While you are in (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1<Creach && Cpolice2<Cthief && Cthief-Cpolice1<=-10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=11 && Cpolice2-Cthief<11 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cpolice2<=11 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief==10 && Cpolice1-Creach<10 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<11 && Cpolice1<Creach && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2), wait.
When you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-21 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=-14 Pthief=-41 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-32 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=1 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10), wait.
When you are in (10<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=-10 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cthief<-10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-10 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=2 Pthief=-41 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=10 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=-12 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_c thief.d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-43 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.a reachObj.initial_location ) Ppolice1=3 Ppolice2=-21 Pthief=1 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice2<=11 && Cpolice2<Creach && Cthief<=1) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice2 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=1 && Cpolice2==Cthief && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=-23 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=1 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<9 && Cpolice1<Creach && Cpolice2-Cthief==-10 && Cthief==10) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief) || (Cpolice1<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-41 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<1 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-34 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.c thief.going_a_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=3 Pthief=-14 
While you are in (0<Creach && Cpolice1<=Cthief && Cthief<=10) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach) || (0<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Creach<1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.b reachObj._unlocked ) Ppolice1=-32 Ppolice2=1 Pthief=2 
While you are in (Cpolice1<=11), wait.

State: ( states.base police1.going_b_to_c police2.c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=3 Pthief=-32 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-21 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=3 Pthief=-34 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.b reachObj._unlocked ) Ppolice1=3 Ppolice2=-41 Pthief=2 
While you are in (Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=4 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.d reachObj.initial_location ) Ppolice1=-32 Ppolice2=2 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Creach<=Cpolice1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-34 Ppolice2=1 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.d reachObj.initial_location ) Ppolice1=-23 Ppolice2=1 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Creach<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-32 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.a reachObj.initial_location ) Ppolice1=4 Ppolice2=-34 Pthief=1 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1) || (Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief) || (1<Cthief && Cpolice1-Cthief<1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.b reachObj.initial_location ) Ppolice1=1 Ppolice2=-23 Pthief=2 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=Cpolice1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-23 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.d reachObj.initial_location ) Ppolice1=4 Ppolice2=-43 Pthief=4 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.b reachObj.initial_location ) Ppolice1=-43 Ppolice2=2 Pthief=2 
While you are in (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2==Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cthief<Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.b reachObj.initial_location ) Ppolice1=3 Ppolice2=-21 Pthief=2 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=Cpolice1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice1) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=1 Pthief=-32 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2-Cthief<=1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.b reachObj.initial_location ) Ppolice1=-23 Ppolice2=4 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief-Cpolice1<=-10) || (1<Cpolice2 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=1 && Cpolice2<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-12 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=4 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-43 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=1 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-14 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice1 && Creach<Cpolice1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-34 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Cthief<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.a reachObj._unlocked ) Ppolice1=2 Ppolice2=-21 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-21 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=1 Pthief=-32 
While you are in (Cpolice1<9 && Cpolice1<Creach && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2-Cpolice1<=-9 && Cpolice2-Cthief<=-9 && Cpolice2-Creach<-10 && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-10 && Cthief<=10 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1-Cthief<10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cthief<=1 && Cthief-Cpolice1<-1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2-Cthief<-10 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief-Cpolice2<=10 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=1 Pthief=-43 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.d reachObj._unlocked ) Ppolice1=-12 Ppolice2=4 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-12 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.b reachObj.initial_location ) Ppolice1=1 Ppolice2=-34 Pthief=2 
While you are in (0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (0<Creach && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-12 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief-Cpolice1<1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (1<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1==Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=-23 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1==0 && Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (10<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=-32 Pthief=-41 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-43 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.b reachObj._unlocked ) Ppolice1=-41 Ppolice2=1 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=3 Pthief=-41 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<10 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.d reachObj.initial_location ) Ppolice1=-12 Ppolice2=1 Pthief=4 
While you are in (Cpolice1-Cpolice2<10 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cpolice2<=Cthief && Cthief<=1 && Cthief-Cpolice1<-9 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Creach<=Cthief) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1==10 && 10<Creach && Cpolice1-Cpolice2==10 && Cpolice2-Cthief==-1 && Cthief==1) || (Cpolice1<1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<=1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-14 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=3 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<9 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice1-Cthief<=10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (9<=Cpolice1 && 10<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cpolice2<Creach && Cthief<Cpolice2) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<Cpolice1 && Creach<=Cpolice2) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Creach && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief-Cpolice2<=10), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-34 Pthief=-43 
While you are in (Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-23 Pthief=2 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1-Cthief<=1 && Cpolice2-Cthief<=1 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=1 Pthief=-34 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<1 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-12 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice2-Cthief<=10 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-34 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.c thief.c reachObj._unlocked ) Ppolice1=2 Ppolice2=3 Pthief=3 
While you are in (Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-21 Pthief=1 
While you are in (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.b thief.going_b_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=2 Pthief=-23 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.d reachObj.initial_location ) Ppolice1=-23 Ppolice2=3 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=-10) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2 && Creach<=Cpolice1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-23 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-34 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=1 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cthief<=10 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=-32 Pthief=-23 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=10) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=1 && Cpolice1-Cpolice2==-10 && Cpolice1-Creach<-10 && Cthief-Cpolice1<=10), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=2 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=2 Pthief=-34 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.d reachObj._unlocked ) Ppolice1=-14 Ppolice2=2 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=4 Pthief=-43 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=-23 Pthief=-32 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-23 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-32 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=-41 Pthief=-32 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-43 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-41 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11), wait.

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-23 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-32 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-14 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.d reachObj._unlocked ) Ppolice1=-12 Ppolice2=2 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=-21 Pthief=-21 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=1 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-23 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=10 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-14 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Creach<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=1 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<9 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Creach<=Cpolice1) || (0<Cpolice1 && Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2-Cthief<=1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=4 Ppolice2=-12 Pthief=-21 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=2 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=2 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<1) || (Cpolice1<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<1) || (10<Cthief && Cpolice1<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cpolice2<Creach && Cthief==10) || (1<Cpolice2 && 0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-34 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<9 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cthief), wait.
When you are in (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<9 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.going_d_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=-14 Pthief=-41 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=4 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.d reachObj.initial_location ) Ppolice1=2 Ppolice2=-34 Pthief=4 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (1<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice2<=1 && Cpolice2-Cpolice1<1 && Cpolice2-Cthief<1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<Cpolice1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-43 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<=1 && Cpolice2==Cthief) || (Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-14 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=-43 Pthief=-21 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.a reachObj._unlocked ) Ppolice1=4 Ppolice2=-23 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=3 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<9 && Cpolice1<Creach && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief) || (Cpolice1<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.b thief.going_c_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=2 Pthief=-34 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.c reachObj.initial_location ) Ppolice1=1 Ppolice2=-12 Pthief=3 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2 && Creach<Cpolice1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-23 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-41 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.going_b_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-23 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-23 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-32 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief), wait.
When you are in (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-41 Pthief=-21 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.a thief.going_b_to_a reachObj._unlocked ) Ppolice1=2 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=4 Pthief=-23 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice2<=Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.a thief.going_b_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=4 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=1 Pthief=-21 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-14 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-43 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && 0<Cthief && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=-21 Pthief=-21 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=-32 Pthief=-34 
While you are in (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (10<Creach && Cpolice1-Cpolice2==-10 && Cpolice2==Cthief && Cthief==10) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<10 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<=-10 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cpolice2), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.a thief.going_d_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=1 Pthief=-43 
While you are in (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice2-Cpolice1<1 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=-1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<=-1 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cpolice1 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Creach<10 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2), wait.
When you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=Cthief && Cthief<=11) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<=10) || (10<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice1<=10 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief<=Cpolice2) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<11 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief-Cpolice1<=10 && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.b reachObj.initial_location ) Ppolice1=-41 Ppolice2=1 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=-10) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2 && Creach<=Cpolice1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.c thief.going_c_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=3 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-12 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.b reachObj._unlocked ) Ppolice1=3 Ppolice2=-32 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-43 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.d thief.going_a_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-12 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.d reachObj.initial_location ) Ppolice1=3 Ppolice2=-41 Pthief=4 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=Cpolice1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice1) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=-34 Pthief=-32 
While you are in (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.b reachObj._unlocked ) Ppolice1=4 Ppolice2=-12 Pthief=2 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=2 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.d thief.a reachObj.initial_location ) Ppolice1=1 Ppolice2=4 Pthief=1 
While you are in (Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=1) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.c reachObj.initial_location ) Ppolice1=-34 Ppolice2=1 Pthief=3 
While you are in (1<Cpolice2 && Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=1 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice1 && Creach<=Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-32 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=-43 Pthief=-34 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.a reachObj._unlocked ) Ppolice1=-23 Ppolice2=2 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-23 Pthief=-32 
While you are in (Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-32 Pthief=2 
While you are in (Cpolice1-Cthief<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-32 Pthief=-41 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.d reachObj.initial_location ) Ppolice1=-21 Ppolice2=1 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cthief<10 && Cpolice2<Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=-10) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2 && Creach<=Cpolice1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=4 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.a thief.going_d_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=1 Pthief=-43 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.a reachObj.initial_location ) Ppolice1=4 Ppolice2=-41 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Creach<1 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<=10 && Cthief-Cpolice2<1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice1-Cthief<=-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.c reachObj._unlocked ) Ppolice1=4 Ppolice2=-32 Pthief=3 
While you are in (0<Cpolice2 && Cpolice2<=11) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.b police2.a thief.going_a_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=1 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=3 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (Cpolice1-Cpolice2<9 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice1-Cthief<=10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (9<=Cpolice1 && 10<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cpolice2<Creach && Cthief<Cpolice2) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<Cpolice1 && Creach<=Cpolice2) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Creach && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief-Cpolice2<=10), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-21 Pthief=-41 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.c thief.going_d_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=1 Pthief=-12 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=10 && Cpolice1-Cpolice2<-1 && Cpolice1==Cthief) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.b reachObj.initial_location ) Ppolice1=-34 Ppolice2=2 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1==Cpolice2 && Cpolice1<Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief-Cpolice1<=1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-41 Pthief=-41 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=2 Pthief=-23 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-41 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=-12 Pthief=-21 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.b reachObj.initial_location ) Ppolice1=-32 Ppolice2=2 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=-32 Pthief=-23 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.b reachObj.initial_location ) Ppolice1=-14 Ppolice2=4 Pthief=2 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief-Cpolice1<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Creach<=Cpolice1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-34 Pthief=4 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Creach<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=1 Pthief=-23 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=-21 Pthief=-34 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-12 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.b thief.c reachObj.initial_location ) Ppolice1=2 Ppolice2=2 Pthief=3 
While you are in (Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<1 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2-Cpolice1<1 && Cthief<=1 && Cthief<Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<=-1 && Cthief<=1) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice2-Cpolice1<1 && Cthief<Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice2<=1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<1 && Cthief<=1 && Cthief-Cpolice2<1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2) || (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice2<Cpolice1) || (0<Creach && Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-41 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.going_c_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=2 Ppolice2=-14 Pthief=-41 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=4 Pthief=-12 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.a thief.going_c_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=1 Pthief=-34 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.b thief.b reachObj._unlocked ) Ppolice1=4 Ppolice2=2 Pthief=2 
While you are in (Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.d police2.b thief.going_a_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.a thief.going_a_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=1 Pthief=-14 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cthief<=10 && Cthief<=Cpolice2) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1-Cpolice2<=1 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<=1 && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.a thief.going_d_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.c thief.b reachObj._unlocked ) Ppolice1=1 Ppolice2=3 Pthief=2 
While you are in true, wait.

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.d reachObj.initial_location ) Ppolice1=-21 Ppolice2=-14 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice2-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-43 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1==Cpolice2 && Cpolice2==Cthief && Cthief==Cpolice1 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=11 && Cpolice2<11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.d police2.c thief.going_a_to_d reachObj.initial_location ) Ppolice1=4 Ppolice2=3 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-12 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice2-Cthief<=10 && Cthief<=1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=2 Pthief=-23 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.c reachObj._unlocked ) Ppolice1=3 Ppolice2=-32 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.d police2.c thief.going_a_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=3 Pthief=-12 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.d reachObj.initial_location ) Ppolice1=-32 Ppolice2=-14 Pthief=4 
While you are in (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=-34 Pthief=-23 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=-23 Pthief=-32 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=4 Pthief=-34 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_a thief.d reachObj.initial_location ) Ppolice1=2 Ppolice2=-21 Pthief=4 
While you are in (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-10) || (0<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief-Cpolice1<1 && Cthief<=Cpolice2 && Creach<=Cthief), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2==0 && Cthief<=Cpolice1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.a reachObj._unlocked ) Ppolice1=3 Ppolice2=-12 Pthief=1 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=1 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-21 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-12 Pthief=-34 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-32 Ppolice2=1 Pthief=-43 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.a reachObj._unlocked ) Ppolice1=-12 Ppolice2=4 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1) || (0<Cpolice1 && Cpolice1<=11), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=-12 Pthief=-14 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=2 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=-32 Pthief=-32 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-23 Pthief=4 
While you are in (0<Cpolice1 && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2<Cthief), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice1 && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-43 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.b thief.b reachObj.initial_location ) Ppolice1=3 Ppolice2=2 Pthief=2 
While you are in (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2==Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief<=1) || (Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1 && Cthief-Cpolice2<1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.d reachObj._unlocked ) Ppolice1=-34 Ppolice2=4 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-21 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.c reachObj._unlocked ) Ppolice1=2 Ppolice2=-14 Pthief=3 
While you are in (0<Cpolice2 && Cpolice2<=11) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=4 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-34 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Cthief<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=-41 Pthief=-23 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-12 Pthief=-21 
While you are in (Cpolice1==Cpolice2 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.c thief.d reachObj.initial_location ) Ppolice1=3 Ppolice2=3 Pthief=4 
While you are in (Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1) || (Cpolice1<=1 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cthief<=1 && Creach<=Cpolice1 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-12 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice2-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-14 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-14 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<10) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-21 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.b reachObj.initial_location ) Ppolice1=-32 Ppolice2=3 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2) || (Cpolice1-Cthief<=10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1-Cthief<=10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief-Cpolice1<=-10) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice2<=1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-21 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.c reachObj.initial_location ) Ppolice1=-23 Ppolice2=4 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Creach<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1-Cpolice2<10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (0<Cpolice2 && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.

State: ( states.base police1.going_c_to_d police2.b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=2 Pthief=-41 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_c thief.c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-23 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11), wait.

State: ( states.base police1.going_b_to_a police2.c thief.d reachObj._unlocked ) Ppolice1=-21 Ppolice2=3 Pthief=4 
While you are in (0<Cpolice1 && Cpolice1<=11) || (Cpolice1<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-12 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-23 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.d reachObj._unlocked ) Ppolice1=2 Ppolice2=-43 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=-23 Pthief=-34 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=-21 Pthief=-32 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=2 Pthief=-41 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-41 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=-43 Pthief=-32 
While you are in (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.c thief.going_a_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=3 Pthief=-14 
While you are in (0<Creach && Cpolice1<=Cthief && Cthief<=10) || (Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (Cpolice1<=1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cthief<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.a reachObj.initial_location ) Ppolice1=1 Ppolice2=-41 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=-1) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Creach<=Cpolice2), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-21 Pthief=2 
While you are in (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.b reachObj._unlocked ) Ppolice1=-12 Ppolice2=1 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.b thief.d reachObj._unlocked ) Ppolice1=-32 Ppolice2=2 Pthief=4 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-21 Pthief=4 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Cpolice2) || (0<Creach && Cpolice1-Cthief<=1 && Cpolice2-Cthief<=1 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief), wait.
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10), wait.
When you are in (10<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=-10 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1-Cthief<-10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-10 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.c reachObj.initial_location ) Ppolice1=-32 Ppolice2=-12 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<11 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<=-9 && Cthief-Cpolice2<=-9 && Cthief-Creach<-10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cthief<9 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief-Cpolice2<=-10) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.c reachObj._unlocked ) Ppolice1=-34 Ppolice2=2 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && Cpolice1<=11), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.b reachObj._unlocked ) Ppolice1=-43 Ppolice2=3 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_d thief.c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-14 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<1 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.b police2.a thief.going_b_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=1 Pthief=-23 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.a thief.a reachObj._unlocked ) Ppolice1=1 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (10<Creach && Cpolice1-Cpolice2==-10 && Cpolice2==Cthief && Cthief==10) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<10 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<=-10 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cpolice2), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-32 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.going_a_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-41 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=-43 Pthief=-12 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-23 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=-34 Pthief=-43 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=1 Pthief=-23 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.c thief.going_a_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=3 Pthief=-14 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cpolice2<Creach && Cthief==10) || (1<Cpolice2 && 0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.a thief.d reachObj._unlocked ) Ppolice1=1 Ppolice2=1 Pthief=4 
While you are in (Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-41 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<=1 && Cpolice2==Cthief) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.b thief.going_c_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=1 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<9 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice1-Cthief<=10 && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice2<10) || (1<Cpolice2 && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (9<=Cpolice1 && 10<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cthief<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief-Cpolice2<=10) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=4 Ppolice2=-32 Pthief=-43 
While you are in (10<Creach && Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10 && Creach<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11 && Creach-Cpolice2<=1 && Creach<=Cthief), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-14 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach), wait.

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-12 Pthief=-43 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.c thief.going_d_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=3 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.d reachObj._unlocked ) Ppolice1=2 Ppolice2=-23 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-14 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<10) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=-21 Pthief=-23 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-43 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.a reachObj._unlocked ) Ppolice1=-23 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-21 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=-41 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1==0 && Cpolice2<=10 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (10<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.c reachObj.initial_location ) Ppolice1=1 Ppolice2=-41 Pthief=3 
While you are in (Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-10) || (Cpolice2<=11 && Cpolice2<Creach && Cthief<=1) || (1<Cpolice1 && Cpolice1-Cpolice2<-9 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief==10 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2 && Creach-Cpolice1<=9 && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief-Cpolice2<=1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (1<Cthief && Cpolice1-Cpolice2<=-10 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=-1) || (1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-34 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11 && Creach<11 && Creach<=Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.d reachObj.initial_location ) Ppolice1=-32 Ppolice2=1 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2) || (Cpolice1-Cthief<=10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief-Cpolice1<=-10) || (1<Cpolice2 && 0<Creach && Cpolice1-Cthief<=10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice2<=1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.a police2.d thief.going_d_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=4 Pthief=-43 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_b thief.going_b_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=-12 Pthief=-23 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-14 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.going_a_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=-34 Pthief=-12 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-43 Pthief=-14 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=-23 Pthief=-41 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-14 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cthief), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice2-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-32 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.c reachObj.initial_location ) Ppolice1=-12 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1) || (1<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Cthief<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-14 Pthief=-41 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.d reachObj._unlocked ) Ppolice1=-23 Ppolice2=4 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.b reachObj._unlocked ) Ppolice1=-12 Ppolice2=2 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-12 Pthief=-14 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=10 && Cpolice1-Cpolice2<=1 && Cpolice1==Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1==Cthief && Cpolice2<=11 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.b reachObj._unlocked ) Ppolice1=-32 Ppolice2=4 Pthief=2 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=1 Ppolice2=-12 Pthief=-41 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-41 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-14 Pthief=3 
While you are in (0<Cpolice2 && 0<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<1) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2-Cthief<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice1<12 && Cthief-Cpolice2<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<12 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.d police2.going_a_to_d thief.c reachObj._unlocked ) Ppolice1=4 Ppolice2=-14 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-12 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=2 Pthief=-43 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_b_to_a thief.a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-21 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11), wait.

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-32 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=11) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-32 Pthief=2 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=3 Pthief=-41 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-21 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=10 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=-23 Pthief=-43 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_d thief.b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-14 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.d reachObj._unlocked ) Ppolice1=3 Ppolice2=-34 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.b police2.a thief.going_c_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=1 Pthief=-32 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.a reachObj.initial_location ) Ppolice1=2 Ppolice2=-34 Pthief=1 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.b reachObj.initial_location ) Ppolice1=-14 Ppolice2=3 Pthief=2 
While you are in (Cpolice1-Cpolice2<10 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cpolice2<=Cthief && Cthief<=1 && Cthief-Cpolice1<-9 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Creach<=Cthief) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1==10 && 10<Creach && Cpolice1-Cpolice2==10 && Cpolice2-Cthief==-1 && Cthief==1) || (Cpolice1<1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<=1), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-32 Pthief=-12 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Cthief-Creach<1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-14 Pthief=3 
While you are in (Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<=-9 && Cthief-Cpolice2<=-9 && Cthief-Creach<-10) || (Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief-Cpolice1<=-10 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<=-10), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=-23 Pthief=-32 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.d reachObj.initial_location ) Ppolice1=-23 Ppolice2=4 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2==Cthief) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2), wait.
When you are in (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=Cthief), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.a reachObj._unlocked ) Ppolice1=1 Ppolice2=-41 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-32 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=1 Pthief=-32 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=-34 Pthief=-34 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-34 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-43 Pthief=-41 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.b reachObj._unlocked ) Ppolice1=-14 Ppolice2=2 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-43 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.going_d_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=4 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.going_c_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=3 Pthief=-34 
While you are in (Cpolice1<9 && Cpolice1<Creach && Cpolice2-Cthief==-10 && Cthief==10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2-Cpolice1<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (9<=Cpolice1 && 10<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<=-9 && Cpolice2-Creach<-10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2-Cthief<-10 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief-Cpolice2<=10 && Cthief<Creach && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Creach<1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-21 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.d reachObj.initial_location ) Ppolice1=2 Ppolice2=-14 Pthief=4 
While you are in (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (0<Cpolice1 && 1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach && Cthief-Cpolice1<10) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<Cpolice1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_b thief.d reachObj._unlocked ) Ppolice1=-41 Ppolice2=-12 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=-21 Pthief=-14 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_a_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.a reachObj._unlocked ) Ppolice1=-34 Ppolice2=4 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=-41 Pthief=-12 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (Cpolice1<=11 && Cpolice1-Creach<1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=3 Pthief=-21 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<10 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-41 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-43 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=10 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-43 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.going_b_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=4 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-34 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-32 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<11 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<11 && Creach<11 && Creach<=Cpolice1 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-32 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11), wait.

State: ( states.base police1.going_a_to_b police2.going_b_to_a thief.b reachObj.initial_location ) Ppolice1=-12 Ppolice2=-21 Pthief=2 
While you are in (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-1 && Cthief<Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.a reachObj.initial_location ) Ppolice1=-41 Ppolice2=3 Pthief=1 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=1 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<=9 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cthief<1 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2-Cpolice1<=-10) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Creach<=Cpolice1 && Creach<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2-Cpolice1<1 && Cpolice2-Cthief<10 && Cpolice2<Creach), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=-12 Pthief=-23 
While you are in (0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-14 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<11 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<=-9 && Cthief-Cpolice2<=-9 && Cthief-Creach<-10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cthief<9 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief-Cpolice2<=-10) || (0<Cpolice1 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice1 && Creach-Cpolice2<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1), wait.
When you are in (1<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0) || (1<Cthief && Cpolice1<=1 && Cpolice1<Creach && Cpolice2==0) || (0<Creach && Cpolice1<=1 && Cpolice1-Cthief<-1 && Cpolice2==0 && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=3 Ppolice2=-43 Pthief=-23 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.c reachObj._unlocked ) Ppolice1=2 Ppolice2=-23 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=-34 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-43 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<Creach && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=3 Pthief=-32 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=-32 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-34 Pthief=-23 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.d reachObj.initial_location ) Ppolice1=2 Ppolice2=-43 Pthief=4 
While you are in (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-10) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief-Cpolice1<1 && Cthief<=Cpolice2 && Creach<=Cthief), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_b thief.c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-32 Pthief=3 
While you are in (0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=11) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.going_c_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=-21 Pthief=-32 
While you are in (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<-1 && Creach<=Cpolice2) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<-1 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_d thief.going_b_to_c reachObj.initial_location ) Ppolice1=2 Ppolice2=-14 Pthief=-23 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=10 && Cpolice2==Cthief && Creach<=Cpolice2) || (Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11) || (0<Cpolice1 && 10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.a reachObj._unlocked ) Ppolice1=-41 Ppolice2=4 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.going_a_to_b reachObj.initial_location ) Ppolice1=-14 Ppolice2=1 Pthief=-12 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11 && Cthief-Cpolice2<10) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=-10 && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-21 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.b reachObj._unlocked ) Ppolice1=2 Ppolice2=-12 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=-41 Pthief=-41 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.c reachObj._unlocked ) Ppolice1=-32 Ppolice2=-14 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.c reachObj.initial_location ) Ppolice1=2 Ppolice2=-34 Pthief=3 
While you are in (0<Cpolice2 && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Creach && Cpolice1<1 && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=1) || (Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief-Cpolice2<=1) || (0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=2 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<10) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<Cthief && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<10) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=-34 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=-34 Pthief=-12 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Cpolice1 && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<Cthief && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<=Cpolice2 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-14 Ppolice2=-21 Pthief=-12 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.c reachObj.initial_location ) Ppolice1=3 Ppolice2=-21 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<10 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<Cpolice1) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=-1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-21 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-21 Ppolice2=-43 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.going_a_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=2 Pthief=-12 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-34 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=3 Pthief=-41 
While you are in (Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10 && Cthief-Cpolice1<=1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.going_b_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=-23 Pthief=-23 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.a thief.going_c_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=1 Pthief=-32 
While you are in (0<Cpolice2 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Creach<=Cthief) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (1<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cthief<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.b reachObj._unlocked ) Ppolice1=-12 Ppolice2=3 Pthief=2 
While you are in (Cpolice1<=11), wait.

State: ( states.base police1.going_d_to_c police2.going_b_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-21 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_d thief.a reachObj.initial_location ) Ppolice1=-41 Ppolice2=-34 Pthief=1 
While you are in (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.d police2.b thief.a reachObj._unlocked ) Ppolice1=4 Ppolice2=2 Pthief=1 
While you are in true, wait.

State: ( states.base police1.going_c_to_b police2.b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=2 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<10 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<Cthief && Cthief<=10 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<10 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Creach<=Cpolice1), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.going_a_to_d reachObj.initial_location ) Ppolice1=-32 Ppolice2=4 Pthief=-14 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=2 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.b reachObj.initial_location ) Ppolice1=-12 Ppolice2=3 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief) || (Cpolice1<=11 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Creach<=Cthief) || (10<=Cpolice1 && Cpolice1-Cpolice2==10 && Cpolice1-Cthief<=10 && Cthief<=1 && Cthief-Cpolice1<-9 && Cthief<Creach) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1==10 && 10<Creach && Cpolice1-Cpolice2==10 && Cpolice2-Cthief==-1 && Cthief==1) || (Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-43 Pthief=3 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_d thief.a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-14 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=1 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.d thief.c reachObj._unlocked ) Ppolice1=2 Ppolice2=4 Pthief=3 
While you are in true, wait.

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-43 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_c_to_d thief.going_d_to_a reachObj.initial_location ) Ppolice1=-43 Ppolice2=-34 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.b thief.going_d_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=2 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=2 Ppolice2=-43 Pthief=-32 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.a reachObj._unlocked ) Ppolice1=-32 Ppolice2=3 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.going_d_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-43 Ppolice2=4 Pthief=-32 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-23 Pthief=-41 
While you are in (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<1 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_b thief.d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-32 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_d_to_c thief.a reachObj._unlocked ) Ppolice1=-14 Ppolice2=-43 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief) || (0<Cpolice1 && 0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<10 && Cpolice2<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.c reachObj.initial_location ) Ppolice1=-21 Ppolice2=1 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1-Cpolice2<=10 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (Cpolice1-Cthief<=10 && Cpolice1<Creach && Cpolice2<=1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Cpolice2) || (Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cthief<1 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cthief<=10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<1 && Cthief<Cpolice2 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cthief<Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=2 Pthief=-21 
While you are in (Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=4 Ppolice2=-23 Pthief=-12 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.a thief.going_a_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=1 Pthief=-12 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cthief<=10 && Cthief<=Cpolice2) || (1<Cpolice1 && 0<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=10 && Cthief<Cpolice2) || (Cpolice1-Cpolice2<=1 && Cthief<=10 && Cthief-Cpolice1<1 && Cthief-Cpolice2<1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<=1 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<=1 && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-41 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=4 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-21 Ppolice2=-41 Pthief=-41 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=1 Pthief=-34 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_c_to_b thief.b reachObj.initial_location ) Ppolice1=-41 Ppolice2=-32 Pthief=2 
While you are in (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice1 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-12 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<10) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.going_a_to_b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-34 Pthief=-12 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-21 Pthief=4 
While you are in (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice2 && 1<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.d thief.c reachObj.initial_location ) Ppolice1=-34 Ppolice2=4 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice1-Cpolice2<1 && Cpolice1<Creach && Cthief<=1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1 && Creach<Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cthief-Cpolice1<=1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=1 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-32 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-14 Ppolice2=1 Pthief=-23 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.a thief.going_c_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=1 Pthief=-32 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=-32 Pthief=-41 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.c thief.going_d_to_a reachObj._unlocked ) Ppolice1=4 Ppolice2=3 Pthief=-41 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_c thief.b reachObj.initial_location ) Ppolice1=2 Ppolice2=-43 Pthief=2 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2==0 && Cthief<=Cpolice1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.b thief.c reachObj.initial_location ) Ppolice1=-41 Ppolice2=2 Pthief=3 
While you are in (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=1 && Cthief<Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=1 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1-Cpolice2<10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<=-10 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cthief<=Cpolice2) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_b thief.going_d_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-32 Pthief=-41 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1) || (Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Creach<=Cthief) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=2 && Cpolice2-Cthief<=2 && Cpolice2-Creach<1 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cthief<=1 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.going_a_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=-34 Pthief=-14 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_c thief.going_a_to_b reachObj.initial_location ) Ppolice1=-32 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10 && Cthief<Creach) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice2<=1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<-1 && Creach<=Cthief), wait.
When you are in (1<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-14 Pthief=-32 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_b_to_a thief.going_d_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<1 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.going_b_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=-21 Pthief=-21 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.d reachObj.initial_location ) Ppolice1=-23 Ppolice2=-41 Pthief=4 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<Cpolice1 && Creach<=Cpolice2), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.going_c_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.a reachObj._unlocked ) Ppolice1=-14 Ppolice2=3 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.b police2.c thief.going_a_to_b reachObj.initial_location ) Ppolice1=2 Ppolice2=3 Pthief=-12 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=-41 Pthief=-43 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.going_c_to_d reachObj._unlocked ) Ppolice1=-43 Ppolice2=-12 Pthief=-34 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.c thief.going_d_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=3 Pthief=-41 
While you are in (1<Cpolice2 && 0<Creach && Cpolice1<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice1-Cthief==-10 && Cpolice2<1 && Cpolice2<Creach && Cthief==10) || (Cpolice1<Creach && Cpolice2<=1 && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief) || (0<Creach && Cpolice2<Cpolice1 && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief<Cpolice2) || (Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Creach), wait.
When you are in (1<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cthief<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<Creach && Cpolice2<=1 && Cthief-Cpolice1<10 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<10) || (0<Creach && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=-10 && Cpolice1<Creach && Cpolice2<=1 && Cthief<=11) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-10 && Cpolice2<=1 && Cthief<=11 && Creach<=Cpolice1) || (1<Cpolice1 && 10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief<Cpolice2) || (10<Cthief && Cpolice1-Cthief<=1 && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<Cpolice1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.b thief.going_d_to_c reachObj.initial_location ) Ppolice1=-34 Ppolice2=2 Pthief=-43 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=11 && Cthief-Cpolice1<1 && Cthief-Cpolice2<10 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-12 Ppolice2=-41 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Creach<1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=-23 Ppolice2=-23 Pthief=-32 
While you are in (0<Creach && Cpolice1==Cpolice2 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.b thief.b reachObj.initial_location ) Ppolice1=1 Ppolice2=2 Pthief=2 
While you are in (1<Cpolice1 && 0<Creach && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=1 && Cpolice2<=Cpolice1 && Cpolice2==Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cthief<=1) || (Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<Cpolice1) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1 && Cthief-Cpolice2<1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_c_to_d thief.going_c_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=-34 Pthief=-32 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.c reachObj._unlocked ) Ppolice1=4 Ppolice2=-34 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.a thief.going_a_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=1 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=-43 Pthief=-12 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=4 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.d reachObj._unlocked ) Ppolice1=-32 Ppolice2=-12 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1) || (Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cthief-Cpolice2<=1), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<=1) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_b thief.going_b_to_a reachObj.initial_location ) Ppolice1=3 Ppolice2=-12 Pthief=-21 
While you are in (0<Creach && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_d_to_c thief.b reachObj.initial_location ) Ppolice1=-21 Ppolice2=-43 Pthief=2 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=1 && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice1 && 0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<9 && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Creach<=Cpolice2) || (0<Cpolice1 && 0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_a_to_b thief.a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-12 Pthief=1 
While you are in (Cpolice1-Cthief<10 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=1 && Cthief-Cpolice1<=-9 && Cthief-Cpolice2<=-9 && Cthief-Creach<-10) || (Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice2<-10 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-10 && Cthief-Cpolice2<-10 && Cthief<Creach && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief-Cpolice1<=-10 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cthief<10 && Cpolice2<Creach && Cthief<=1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<=-10), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<=Cthief && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cthief<Cpolice1 && Creach<=Cpolice2) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<1 && Cpolice2<Creach), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=3 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.going_b_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_b_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-21 Ppolice2=-23 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.b police2.going_b_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=-23 Pthief=-14 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-12 Ppolice2=3 Pthief=-14 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.b reachObj.initial_location ) Ppolice1=3 Ppolice2=-34 Pthief=2 
While you are in (0<Creach && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1) || (0<Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=10 && Cthief<=1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (1<Cthief && Cpolice2<=11 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief && Cthief-Cpolice2<=1 && Creach<=Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_a_to_d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-41 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.b reachObj._unlocked ) Ppolice1=-23 Ppolice2=-12 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cthief && Cpolice1<=11 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.going_b_to_c reachObj._unlocked ) Ppolice1=-41 Ppolice2=1 Pthief=-23 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_b thief.going_b_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=-32 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.going_a_to_d reachObj.initial_location ) Ppolice1=1 Ppolice2=-43 Pthief=-14 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1-Cthief<=1 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1-Cpolice2<=1 && Cpolice2<Cpolice1 && Cpolice2-Cthief<=1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief<Creach), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11 && Cthief<Cpolice1 && Cthief<Creach), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.b thief.going_c_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=2 Pthief=-32 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.b reachObj._unlocked ) Ppolice1=-12 Ppolice2=-34 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-23 Ppolice2=-21 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=10 && Cpolice2-Cpolice1<=1 && Cpolice2==Cthief) || (Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.c reachObj.initial_location ) Ppolice1=3 Ppolice2=-34 Pthief=3 
While you are in (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2<=11) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (1<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (0<Cpolice2 && 1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2==0 && Cthief<Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_b_to_c thief.going_d_to_a reachObj._unlocked ) Ppolice1=-12 Ppolice2=-23 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=-34 Pthief=-43 
While you are in (0<Creach && Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.a thief.going_b_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=1 Pthief=-23 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<-1) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=11 && Cthief<=Cpolice2) || (Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cthief<=11) || (0<Cpolice2 && 10<Cthief && Cpolice1-Cpolice2<10 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (Cpolice1<Creach && Cpolice2-Cthief<-10 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.going_c_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=4 Pthief=-43 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_d_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=2 Ppolice2=-41 Pthief=-14 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.going_c_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=-12 Pthief=-32 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.going_a_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=3 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_a thief.b reachObj._unlocked ) Ppolice1=-34 Ppolice2=-21 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=2 Pthief=-23 
While you are in (Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=10 && Cpolice1==Cthief && Cpolice2<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=Cpolice1 && Cthief-Cpolice2<=10 && Creach<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-10 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-43 Ppolice2=-43 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.a thief.going_a_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=1 Pthief=-12 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=-14 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.going_d_to_c thief.going_a_to_d reachObj._unlocked ) Ppolice1=4 Ppolice2=-43 Pthief=-14 
When you are in (10<Cthief && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=3 Ppolice2=-14 Pthief=-34 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<9 && Cpolice2<Creach && Cthief==10) || (Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1-Cthief<=-10 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<10 && Cthief-Cpolice2<10) || (Cpolice1-Cthief<-10 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (Cpolice1-Cpolice2<-10 && Cpolice1-Cthief<-10 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_a thief.d reachObj.initial_location ) Ppolice1=-34 Ppolice2=-41 Pthief=4 
While you are in (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<Creach) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<10 && Cthief<=Cpolice1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2==0 && Cthief<=1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && Cpolice1<=11 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cpolice2<Creach && Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1) || (0<Cpolice2 && Cpolice1<=11 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cpolice2-Cthief<10 && Cpolice2<Creach) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice2), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-14 Ppolice2=-21 Pthief=-43 
While you are in (Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=10 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cthief<10 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<=1 && Cthief<Creach && Creach<=Cpolice2) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<11 && Creach<=Cpolice1 && Creach<=Cpolice2) || (Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-43 Ppolice2=1 Pthief=-41 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_c_to_d thief.going_d_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=-34 Pthief=-43 
While you are in (Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.c thief.going_b_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_d thief.going_c_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=-34 Pthief=-34 
While you are in (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Creach<=Cpolice2) || (Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cpolice2<Creach && Cthief<=11) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=10 && Cthief<=Cpolice2), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.going_c_to_b thief.c reachObj._unlocked ) Ppolice1=2 Ppolice2=-32 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.a reachObj.initial_location ) Ppolice1=-14 Ppolice2=3 Pthief=1 
While you are in (1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-10) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (10<=Cpolice1 && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief==10 && Cpolice1<Creach) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<=10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1==0), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1 && Cpolice2-Cpolice1<=1) || (1<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Cthief<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Creach<=Cpolice2 && Creach<=Cthief) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.going_c_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=2 Pthief=-34 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-10 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=10 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=10 && Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.d thief.going_b_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=4 Pthief=-21 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_d thief.b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-34 Pthief=2 
While you are in (Cpolice1-Cthief<10 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cpolice2<Creach && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-10 && Creach-Cpolice1<=1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice1<-10 && Cthief<=Cpolice2 && Creach<=Cpolice2) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2-Cthief<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_c thief.going_c_to_b reachObj.initial_location ) Ppolice1=3 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10) || (Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cthief) || (0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice2<=11 && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief) || (10<Cthief && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.c thief.c reachObj.initial_location ) Ppolice1=-32 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief<=Cpolice1 && Cthief<Creach) || (0<Cpolice1 && 1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1-Cthief<-1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_c thief.a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-23 Pthief=1 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=1) || (0<Cpolice1 && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=1) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1) || (0<Creach && Cpolice1<=1 && Cpolice1<=Cpolice2 && Cpolice1==Cthief && Cpolice2-Cpolice1<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<11 && Cpolice2<=11 && Cthief<=1 && Cthief<Cpolice1 && Cthief<=Cpolice2), wait.
When you are in (1<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cpolice2<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (1<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=Cpolice2 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1-Cthief<=1 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (0<Cpolice1 && 1<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cpolice2<Cthief && Creach<=Cpolice1), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<Cpolice2), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.going_c_to_b thief.c reachObj._unlocked ) Ppolice1=1 Ppolice2=-32 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11 && Cthief<=Cpolice1) || (1<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Cpolice2 && 1<Cthief && Cpolice1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<Cthief && Cpolice2==0), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }

State: ( states.base police1.b police2.going_a_to_b thief.d reachObj._unlocked ) Ppolice1=2 Ppolice2=-12 Pthief=4 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.a thief.c reachObj.initial_location ) Ppolice1=-14 Ppolice2=1 Pthief=3 
While you are in (1<Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Creach) || (1<Cpolice2 && Cpolice1<=11 && Cpolice1<Creach && Cthief-Cpolice1<=-10) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief-Cpolice1<-10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1) || (Cpolice1<=11 && Cpolice2<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (10<=Cpolice1 && 1<Cpolice2 && Cpolice1<=11 && Cpolice1-Cthief==10 && Cpolice1-Creach<10 && Cpolice2<=Cpolice1 && Creach<=Cpolice1), wait.
When you are in (Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Creach<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<11 && Cthief<Creach) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice2<1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice1==Cpolice2 && Cpolice2==0) || (1<Cthief && 0<Creach && Cpolice1==0 && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.c thief.going_b_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=3 Pthief=-23 
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.going_d_to_c thief.going_c_to_b reachObj._unlocked ) Ppolice1=-41 Ppolice2=-43 Pthief=-32 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_a_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-32 Ppolice2=-12 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_a_to_b thief.going_d_to_c reachObj._unlocked ) Ppolice1=-21 Ppolice2=-12 Pthief=-43 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.d police2.a thief.going_d_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=1 Pthief=-43 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.c thief.going_d_to_c reachObj.initial_location ) Ppolice1=1 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_a_to_b thief.going_a_to_d reachObj.initial_location ) Ppolice1=-43 Ppolice2=-12 Pthief=-14 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<-1 && Cpolice2<=11 && Cthief<Cpolice1 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<10) || (Cpolice1<Cpolice2 && Cpolice2<=11 && Cpolice2-Cpolice1<=1 && Cthief-Cpolice1<-1 && Cthief<Creach && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<Creach && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1 && Creach<=Cthief), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (0<Cpolice2 && 10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.b police2.d thief.b reachObj._unlocked ) Ppolice1=2 Ppolice2=4 Pthief=2 
While you are in (Cpolice1<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.c thief.a reachObj._unlocked ) Ppolice1=-21 Ppolice2=3 Pthief=1 
While you are in (Cpolice1<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.c police2.going_c_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=3 Ppolice2=-34 Pthief=-43 
When you are in (10<Cthief && 0<Creach && Cpolice1==0 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.b reachObj._unlocked ) Ppolice1=-43 Ppolice2=-41 Pthief=2 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cthief<11), wait.
When you are in (0<Cpolice2 && 1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }
When you are in (1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.b->thief.going_b_to_a { Cthief > 1, thief_b2a!, Pthief := -21, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.b thief.going_b_to_c reachObj.initial_location ) Ppolice1=-23 Ppolice2=2 Pthief=-23 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<-1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-12 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.going_c_to_d thief.d reachObj._unlocked ) Ppolice1=-21 Ppolice2=-34 Pthief=4 
While you are in (0<Cpolice1 && Cpolice1<=11 && Cpolice2<=11) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice2<=11 && Cthief-Cpolice1<=1), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.a reachObj._unlocked ) Ppolice1=-34 Ppolice2=-32 Pthief=1 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1) || (0<Cpolice1 && 0<Cpolice2 && 0<Cthief && Cpolice1<=11 && Cpolice2<=11), wait.
When you are in (1<Cthief && Cpolice1==0 && Cpolice2<=11), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }
When you are in (0<Cpolice1 && 1<Cthief && Cpolice1<=11 && Cpolice2==0), take transition thief.a->thief.going_a_to_b { Cthief > 1, thief_a2b!, Pthief := -12, Cthief := 0 }

State: ( states.base police1.a police2.a thief.going_c_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=1 Pthief=-32 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_d_to_a thief.going_c_to_b reachObj._unlocked ) Ppolice1=3 Ppolice2=-41 Pthief=-32 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.c police2.going_a_to_d thief.c reachObj.initial_location ) Ppolice1=3 Ppolice2=-14 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach) || (0<Cpolice2 && 0<Creach && Cpolice2<=11 && Cpolice2-Cthief<-1 && Cthief<=Cpolice1) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && 0<Creach && Cpolice2==0 && Cthief<Cpolice1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_c_to_b thief.going_c_to_b reachObj.initial_location ) Ppolice1=-34 Ppolice2=-32 Pthief=-32 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2==Cthief) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice1<-1) || (Cpolice1-Cthief<=1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (Cpolice1-Cpolice2<10 && Cpolice1<=Cthief && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10 && Creach<=Cpolice2) || (0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cthief<=1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && Cpolice1-Cpolice2<11 && Cpolice1<=Cthief && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1-Cthief<-1 && Cpolice2<=Cpolice1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_c_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.d thief.going_b_to_c reachObj._unlocked ) Ppolice1=-12 Ppolice2=4 Pthief=-23 
While you are in (Cpolice1<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.b thief.going_c_to_d reachObj.initial_location ) Ppolice1=2 Ppolice2=2 Pthief=-34 
While you are in (0<Creach && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (Cpolice2-Cpolice1<9 && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief-Cpolice1<9 && Cthief-Cpolice2<9 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=10) || (0<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cthief<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1) || (10<Cthief && Cpolice2-Cthief<=1 && Cthief<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=11 && Cthief<Cpolice2), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.c police2.c thief.c reachObj._unlocked ) Ppolice1=3 Ppolice2=3 Pthief=3 
While you are in (Cpolice1<=Cthief && Cpolice2<=Cthief && Cthief<=1), wait.
When you are in (1<Cpolice2 && 1<Cthief), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice2<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.a thief.going_a_to_b reachObj._unlocked ) Ppolice1=-32 Ppolice2=1 Pthief=-12 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.a police2.going_d_to_c thief.d reachObj.initial_location ) Ppolice1=1 Ppolice2=-43 Pthief=4 
While you are in (0<Cpolice2 && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<11 && Cpolice2<=11 && Cthief<=Cpolice1) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief) || (0<Cpolice2 && 1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice2<=11) || (0<Cpolice2 && 0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (Cpolice2<=11 && Cpolice2<=Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1) || (0<Cpolice2 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_c_to_b police2.going_d_to_a thief.going_b_to_a reachObj.initial_location ) Ppolice1=-32 Ppolice2=-41 Pthief=-21 
While you are in (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief && Cthief<=10 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice2<=Cthief && Cthief<=10 && Creach<=Cpolice2) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10 && Cthief<=Cpolice1 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<1 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.b thief.a reachObj.initial_location ) Ppolice1=1 Ppolice2=2 Pthief=1 
While you are in (Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Cpolice2<Creach) || (Cpolice1-Cpolice2<1 && Cpolice1<=Cthief && Cpolice1<Creach && Cthief<=1) || (1<Cpolice2 && 0<Cthief && 0<Creach && Cpolice1<=Cthief && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.a police2.c thief.going_b_to_a reachObj._unlocked ) Ppolice1=1 Ppolice2=3 Pthief=-21 
When you are in (10<Cthief && Cpolice1==0 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.c reachObj._unlocked ) Ppolice1=1 Ppolice2=-21 Pthief=3 
While you are in (Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11) || (Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1), take transition thief.c->thief.going_c_to_b { Cthief > 1, thief_c2b!, Pthief := -32, Cthief := 0 }
When you are in (1<Cthief && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<=Cthief) || (1<Cthief && Cpolice2<=11 && Cpolice2<Cpolice1 && Cthief-Cpolice2<=1), take transition thief.c->thief.going_c_to_d { Cthief > 1, thief_c2d!, Pthief := -34, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_c thief.going_a_to_b reachObj._unlocked ) Ppolice1=1 Ppolice2=-23 Pthief=-12 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.going_d_to_a thief.going_d_to_c reachObj._unlocked ) Ppolice1=-43 Ppolice2=-41 Pthief=-43 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.b police2.b thief.going_d_to_c reachObj._unlocked ) Ppolice1=2 Ppolice2=2 Pthief=-43 
While you are in (Cthief<=10), wait.
When you are in (10<Cthief && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_b_to_a thief.going_c_to_d reachObj.initial_location ) Ppolice1=-14 Ppolice2=-21 Pthief=-34 
While you are in (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (Cpolice1<=Cthief && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2-Cthief<=1 && Cthief<=10 && Cthief<Cpolice2 && Creach<=Cthief), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice1<Creach && Cpolice2<=11 && Cthief<Cpolice2 && Creach<=Cthief), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-23 Ppolice2=-12 Pthief=-14 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_d_to_c thief.going_b_to_a reachObj.initial_location ) Ppolice1=-12 Ppolice2=-43 Pthief=-21 
While you are in (0<Creach && Cpolice1-Cthief==-10 && Cpolice2<=11 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1<=11 && Cpolice1<Creach && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<Cpolice1 && Cthief-Cpolice2<=1 && Cthief<Creach), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_c_to_b thief.going_b_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-32 Pthief=-21 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_a_to_b police2.going_c_to_d thief.going_d_to_c reachObj.initial_location ) Ppolice1=-12 Ppolice2=-34 Pthief=-43 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<=Cpolice1 && Cthief<Creach) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2-Cpolice1<=1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=2 && Cthief-Cpolice2<=2 && Cthief-Creach<1), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_a_to_b thief.going_d_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-12 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.a police2.going_a_to_b thief.going_a_to_b reachObj.initial_location ) Ppolice1=1 Ppolice2=-12 Pthief=-12 
While you are in (0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=10) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=Cthief && Cthief<=10) || (0<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (Cpolice1-Cpolice2<=2 && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice2-Cpolice1<-1 && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-10 && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2-Cpolice1<11 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cthief<=11 && Cthief-Cpolice1<-1 && Cthief-Cpolice2<=1) || (10<Cthief && Cpolice1-Cpolice2<=2 && Cpolice1-Cthief<=1 && Cpolice2<Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2-Cpolice1<=10 && Cthief<Cpolice2 && Cthief<Creach), take transition thief.going_a_to_b->thief.b { Cthief > 10, tau, Pthief := 2, Cthief := 0 }

State: ( states.base police1.going_d_to_a police2.d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-41 Ppolice2=4 Pthief=-21 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1) || (Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=10 && Cthief-Cpolice1<10 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (0<Cpolice1 && 0<Creach && Cpolice1<=Cthief && Cpolice2<=Cpolice1 && Cthief<=10), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=11 && Cthief-Cpolice1<=1) || (10<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Cthief<Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Cthief-Cpolice2<-1 && Creach<=Cpolice1) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=11 && Cthief<Cpolice2 && Creach-Cpolice1<=1 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief<Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Cpolice1 && 10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cthief<=11), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_d_to_c police2.b thief.c reachObj.initial_location ) Ppolice1=-43 Ppolice2=2 Pthief=3 
While you are in (0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=Cpolice2) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1 && Creach<=Cthief) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=1 && Cthief<=Cpolice1 && Cthief-Cpolice2<11) || (Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2-Cthief<=1) || (Cpolice1<=11 && Cpolice2<=Cpolice1 && Cpolice2<=Cthief && Cpolice2<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<10 && Cpolice2<=1 && Cpolice2<=Cpolice1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Cpolice2 && Cpolice1<=11 && Cthief<Cpolice1 && Cthief-Cpolice2<10 && Cthief<Creach), wait.

State: ( states.base police1.going_d_to_a police2.going_d_to_a thief.going_d_to_c reachObj.initial_location ) Ppolice1=-41 Ppolice2=-41 Pthief=-43 
While you are in (0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=10) || (Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<10) || (Cpolice1<=11 && Cpolice2<=11 && Cpolice2-Cpolice1<11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Creach<=Cthief) || (0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=10 && Creach<=Cpolice2), wait.
When you are in (10<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<=Cthief && Cthief<=11) || (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice1<11 && Cthief<=Cpolice2) || (0<Cpolice1 && 10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2 && Cthief<Creach) || (10<Cthief && 0<Creach && Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cthief<=11 && Creach<=Cpolice2), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.a thief.d reachObj._unlocked ) Ppolice1=-23 Ppolice2=1 Pthief=4 
While you are in (0<Cpolice1 && Cpolice1<=11) || (Cpolice1<=11 && Cthief-Cpolice1<=1 && Cthief-Cpolice2<=1), wait.
When you are in (1<Cthief && Cpolice1==0), take transition thief.d->thief.going_d_to_c { Cthief > 1, thief_d2c!, Pthief := -43, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-23 Ppolice2=3 Pthief=-43 
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2==0 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.going_b_to_c reachObj._unlocked ) Ppolice1=1 Ppolice2=-21 Pthief=-23 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_b_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.c police2.going_b_to_a thief.going_a_to_d reachObj._unlocked ) Ppolice1=3 Ppolice2=-21 Pthief=-14 
While you are in (Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_b_to_c thief.going_d_to_a reachObj.initial_location ) Ppolice1=-34 Ppolice2=-23 Pthief=-41 
While you are in (Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1<=Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief-Cpolice2<-1) || (0<Cpolice2 && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief-Cpolice1<-1 && Cthief<=Cpolice2) || (0<Creach && Cpolice1<=10 && Cpolice1==Cthief && Cpolice2-Cpolice1<-1 && Creach<=Cpolice2) || (0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief && Cthief<=10 && Cthief<Cpolice1) || (Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10) || (Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=10 && Creach<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=10 && Creach<=Cpolice2 && Creach<=Cthief) || (Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief-Cpolice2<1 && Cthief<Creach), wait.
When you are in (10<Cthief && Cpolice1<Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cthief<=Cpolice1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1-Cpolice2<=1 && Cpolice1-Cthief<-1 && Cpolice2<Creach && Cthief<=11 && Creach<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1-Cthief<-1 && Cpolice2<=11 && Cthief<=11 && Creach<=Cpolice2 && Creach<=Cthief) || (10<Cthief && Cpolice1<=11 && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cthief<=11 && Cthief-Cpolice2<1 && Cthief<Creach), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.d police2.going_b_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=4 Ppolice2=-23 Pthief=-43 
While you are in (Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_d_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-41 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.c thief.d reachObj.initial_location ) Ppolice1=-34 Ppolice2=3 Pthief=4 
While you are in (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1-Cpolice2<-1 && Cpolice1<=Cthief && Cthief<=1 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice1<-10 && Cthief<Cpolice2) || (Cpolice1-Cthief<=10 && Cthief<=1 && Cthief<=Cpolice1 && Cthief<Cpolice2 && Cthief<Creach) || (1<Cpolice2 && 0<Creach && Cpolice1-Cthief<=10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cthief-Cpolice1<=-10) || (Cpolice1<Cthief && Cpolice1<Creach && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice1<=11 && Cthief<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1 && Cpolice1<Cthief && Cthief<=Cpolice2 && Creach<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1-Cthief<-1 && Cpolice2<Cthief) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cthief-Cpolice2<=1) || (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cthief && Cpolice2<=Cpolice1), take transition thief.d->thief.going_d_to_a { Cthief > 1, thief_d2a!, Pthief := -41, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_c_to_b thief.going_a_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=-32 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cpolice2<=11 && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.a police2.going_b_to_a thief.b reachObj.initial_location ) Ppolice1=1 Ppolice2=-21 Pthief=2 
While you are in (Cpolice2<=Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Cthief<Creach) || (0<Creach && Cpolice1<Cpolice2 && Cpolice2<=11 && Cthief<=1 && Cthief<=Cpolice1) || (0<Creach && Cpolice1==Cpolice2 && Cpolice1-Cthief<10 && Cthief<=1 && Cthief<=Cpolice1 && Creach<=Cthief) || (0<Creach && Cpolice1-Cpolice2<-10 && Cpolice1<Cthief && Cpolice2<=11 && Cthief<=1 && Creach<=Cpolice1) || (1<Cpolice1 && 0<Creach && Cpolice2<Cpolice1 && Cpolice2-Cthief<10 && Cthief<=1 && Cthief<=Cpolice2 && Creach<=Cthief) || (0<Creach && Cpolice2<=11 && Cpolice2<=Cpolice1 && Cthief-Cpolice2<=-10) || (Cpolice2<Cthief && Cpolice2<Creach && Cthief<=1) || (Cpolice1<Cpolice2 && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=1), wait.
When you are in (1<Cthief && 0<Creach && Cpolice2<=11 && Cpolice2-Cpolice1<-1 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice1<=Cpolice2 && Cpolice2<=11 && Cpolice2<Cthief) || (1<Cthief && 0<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (0<Creach && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2-Cthief<-1) || (1<Cthief && Cpolice1-Cpolice2<=1 && Cpolice2<=11 && Cpolice2<Cpolice1 && Cpolice2<Cthief && Cpolice2<Creach && Cthief-Cpolice2<=1), take transition thief.b->thief.going_b_to_c { Cthief > 1, thief_b2c!, Pthief := -23, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.going_a_to_d thief.going_b_to_a reachObj.initial_location ) Ppolice1=-14 Ppolice2=-14 Pthief=-21 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=10) || (Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=10) || (Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief<=Cpolice1) || (0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=10 && Cthief<=Cpolice2) || (Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=10 && Cthief-Creach<1) || (Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=10 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=10 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), wait.
When you are in (10<Cthief && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<-1 && Cthief<=11) || (10<Cthief && Cpolice1-Cthief<-1 && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=11) || (10<Cthief && Cpolice1<=11 && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=Cpolice1) || (10<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=11 && Cthief<=Cpolice1 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<=11 && Cthief<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice1<Creach && Cpolice2<Cthief && Cpolice2<Creach && Cthief<=11 && Cthief-Creach<1) || (10<Cthief && Cpolice1-Cpolice2<-1 && Cpolice1<Creach && Cpolice2<Cthief && Cthief<=11 && Cthief-Cpolice2<=1 && Creach<=Cpolice2) || (10<Cthief && Cpolice1<Cthief && Cpolice2-Cpolice1<-1 && Cpolice2<Creach && Cthief<=11 && Cthief-Cpolice1<=1 && Creach<=Cpolice1), take transition thief.going_b_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_b_to_c police2.going_b_to_a thief.going_d_to_a reachObj._unlocked ) Ppolice1=-23 Ppolice2=-21 Pthief=-41 
While you are in (Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_a->thief.a { Cthief > 10, tau, Pthief := 1, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.going_d_to_c reachObj._unlocked ) Ppolice1=-34 Ppolice2=-43 Pthief=-43 
While you are in (Cpolice1-Cthief==-10 && Cpolice2<=10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_d_to_c->thief.c { Cthief > 10, tau, Pthief := 3, Cthief := 0 }

State: ( states.base police1.going_b_to_a police2.a thief.a reachObj.initial_location ) Ppolice1=-21 Ppolice2=1 Pthief=1 
While you are in (Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2<=Cthief && Cthief<=1) || (Cpolice1<=Cthief && Cpolice2<Cpolice1 && Cpolice2<Creach && Cthief<=1) || (0<Creach && Cpolice1<=11 && Cpolice2<=Cthief && Cthief<=1 && Cthief<Cpolice1) || (0<Creach && Cpolice1<=1 && Cpolice1==Cthief && Cpolice2<=Cpolice1 && Creach<=Cpolice2), wait.
When you are in (0<Cpolice1 && 1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice2<=Cpolice1) || (1<Cthief && Cpolice1<=11 && Cpolice1<=Cpolice2 && Cpolice1<Creach && Cpolice2-Cthief<11) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1<Cpolice2 && Cpolice2-Cpolice1<=1 && Cthief<=Cpolice1 && Creach<=Cpolice1) || (1<Cthief && 0<Creach && Cpolice1<=11 && Cpolice1-Cpolice2<-1), take transition thief.a->thief.going_a_to_d { Cthief > 1, thief_a2d!, Pthief := -14, Cthief := 0 }

State: ( states.base police1.going_c_to_d police2.going_d_to_c thief.going_c_to_d reachObj._unlocked ) Ppolice1=-34 Ppolice2=-43 Pthief=-34 
While you are in (Cpolice1<=10 && Cpolice2-Cthief==-10 && Cthief==10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cpolice2<=11 && Cthief<=11), take transition thief.going_c_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }

State: ( states.base police1.going_a_to_d police2.c thief.going_a_to_d reachObj._unlocked ) Ppolice1=-14 Ppolice2=3 Pthief=-14 
While you are in (Cpolice1<=Cthief && Cthief<=10), wait.
When you are in (10<Cthief && Cpolice1<=11 && Cthief<=11), take transition thief.going_a_to_d->thief.d { Cthief > 10, tau, Pthief := 4, Cthief := 0 }
