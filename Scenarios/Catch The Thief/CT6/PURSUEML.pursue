//locations
poi "a"
poi "b"
poi "c"
poi "d"
poi "e"
poi "f"
poi "g"
poi "h"
poi "i"
poi "l"
poi "m"
poi "n"
poi "o"
poi "p"
poi "stairs"
poi "window1"
poi "window2"

//connections  
connect a and window1 distance 5
connect window1 and p distance 5
connect g and window2 distance 5
connect window2 and h distance 11
connect c and stairs distance 8
connect stairs and n distance 8
connect a and b distance 10
connect p and o distance 10
connect b and c distance 4
connect o and n distance 4
connect c and d distance 3
connect n and m distance 3
connect d and e distance 4
connect m and i distance 4
connect d and f distance 9
connect m and l distance 9
connect f and g distance 4
connect l and h distance 4
connect e and g distance 9
connect i and h distance 9

//events
event "catch" collaborative
event "steal1" location a
event "steal2" location b
event "steal3" location g
event "stolen"
event "leave1" location window1
event "leave2" location window2
event "leave3" location stairs
event "enter" location stairs

//Rule
//foran okbect to be stolen, the thief must first steal to have object stolen
rule "stealing": ((steal1 or steal2) or steal3) before (stolen or catch)

//states
state "away" : initially false, true_if leave1, leave2, leave3 false_if enter

//state depndencies
stateDependency: catch only_if away is_false
stateDependency: steal1 only_if away is_false
stateDependency: steal2 only_if away is_false
stateDependency: steal3 only_if away is_false
stateDependency: stolen only_if away is_true

//agents (must specify if controllable and/or mobile, initial location actions and reactions)
agent "police" mobile 1 location a can_do catch
agent "thief" controllable mobile 1 location stairs can_do steal1, steal2, steal3, leave1, leave2, leave3, enter, stolen reacts_to catch

//objectives (only action reaction within time limit for now
reach_objective: do stolen after 0
