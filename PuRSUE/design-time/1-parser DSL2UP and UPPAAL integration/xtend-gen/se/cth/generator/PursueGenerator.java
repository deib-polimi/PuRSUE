/**
 * generated by Xtext 2.14.0
 */
package se.cth.generator;

import com.google.common.base.Objects;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import se.cth.generator.rule;
import se.cth.generator.ruler;
import se.cth.generator.set_of_actions;
import se.cth.generator.strin;
import se.cth.pursue.Agent;
import se.cth.pursue.Event;
import se.cth.pursue.Model;
import se.cth.pursue.Pdi;
import se.cth.pursue.Regola;
import se.cth.pursue.Sequence;
import se.cth.pursue.StateDep;
import se.cth.pursue.Stato;
import se.cth.pursue.connection;

@SuppressWarnings("all")
public class PursueGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    fsa.generateFile("output_model.xml", this.SDLtoUPPAAL(((Model) _head)));
    EObject _head_1 = IterableExtensions.<EObject>head(resource.getContents());
    fsa.generateFile("output_model.q", this.SDLtoQ(((Model) _head_1)));
  }
  
  public CharSequence SDLtoQ(final Model m) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((m.isHave_obj() && m.isHave_reach_obj())) {
        _builder.append(" control : A[not(obj.lose) U (reachObj.win)]");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((m.isHave_obj() && (!m.isHave_reach_obj()))) {
        _builder.append(" control : A[]not(obj.lose)");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if (((!m.isHave_obj()) && m.isHave_reach_obj())) {
        _builder.append(" control : A<>reachObj.win");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if (((!m.isHave_obj()) && (!m.isHave_reach_obj()))) {
      }
    }
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence SDLtoUPPAAL(final Model m) {
    StringConcatenation _builder = new StringConcatenation();
    ruler le_regole = new ruler();
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<nta>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<declaration>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//events");
    _builder.newLine();
    {
      if (((!m.getConnections().isEmpty()) && (!IterableExtensions.isEmpty(IterableExtensions.<Agent>filter(m.getAgents(), ((Function1<Agent, Boolean>) (Agent it) -> {
        return Boolean.valueOf(it.isMobile());
      })))))) {
        _builder.append("\t");
        _builder.append("//movements ");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("broadcast chan ");
        {
          final Function1<Agent, Boolean> _function = (Agent it) -> {
            return Boolean.valueOf(it.isMobile());
          };
          Iterable<Agent> _filter = IterableExtensions.<Agent>filter(m.getAgents(), _function);
          boolean _hasElements = false;
          for(final Agent ag : _filter) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            {
              EList<connection> _connections = m.getConnections();
              boolean _hasElements_1 = false;
              for(final connection connect : _connections) {
                if (!_hasElements_1) {
                  _hasElements_1 = true;
                } else {
                  _builder.appendImmediate(", ", "\t");
                }
                String _name = ag.getName();
                String _plus = (_name + "_");
                String _name_1 = connect.getPdi1().getName();
                String _plus_1 = (_plus + _name_1);
                String _plus_2 = (_plus_1 + "2");
                String _name_2 = connect.getPdi2().getName();
                String _plus_3 = (_plus_2 + _name_2);
                _builder.append(_plus_3, "\t");
                _builder.append(", ");
                String _name_3 = ag.getName();
                String _plus_4 = (_name_3 + "_");
                String _name_4 = connect.getPdi2().getName();
                String _plus_5 = (_plus_4 + _name_4);
                String _plus_6 = (_plus_5 + "2");
                String _name_5 = connect.getPdi1().getName();
                String _plus_7 = (_plus_6 + _name_5);
                _builder.append(_plus_7, "\t");
              }
            }
          }
        }
        _builder.append(" ;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("//actions");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("broadcast chan ");
    {
      EList<Event> _events = m.getEvents();
      boolean _hasElements_2 = false;
      for(final Event act : _events) {
        if (!_hasElements_2) {
          _hasElements_2 = true;
        } else {
          _builder.appendImmediate(", ", "\t");
        }
        String _name_6 = act.getName();
        _builder.append(_name_6, "\t");
        {
          boolean _isHas_duration = act.isHas_duration();
          if (_isHas_duration) {
            _builder.append(", ");
            String _name_7 = act.getName();
            _builder.append(_name_7, "\t");
            _builder.append("DONE ");
          }
        }
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//assuzione che initial state per ogni rule è sempre a index zero quandi si crea, dovrebbe essere coso");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//nota concettuale importante: mentre per le posizioni uso come sono ordinate nella definizione, erl e regole uso come le ordino io nel crearle");
    _builder.newLine();
    {
      boolean _isEmpty = m.getRegole().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("\t");
        _builder.append("int ");
        {
          EList<Regola> _regole = m.getRegole();
          boolean _hasElements_3 = false;
          for(final Regola rule : _regole) {
            if (!_hasElements_3) {
              _hasElements_3 = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            _builder.append("P");
            String _name_8 = rule.getName();
            _builder.append(_name_8, "\t");
            _builder.append("=0");
          }
        }
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("//Agents");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//nota: rule and agents can\'t have the same name");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("clock ");
    {
      EList<Agent> _agents = m.getAgents();
      boolean _hasElements_4 = false;
      for(final Agent ag_1 : _agents) {
        if (!_hasElements_4) {
          _hasElements_4 = true;
        } else {
          _builder.appendImmediate(", ", "\t");
        }
        _builder.append("C");
        String _name_9 = ag_1.getName();
        _builder.append(_name_9, "\t");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("//tutte le volta che si prendono gli indici delle location, si shiftano di uno, così no c\'è la location zero, e quindi non c\'è nemmeno lo stato -0 che manda tutto in merda");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int ");
    {
      EList<Agent> _agents_1 = m.getAgents();
      boolean _hasElements_5 = false;
      for(final Agent ag_2 : _agents_1) {
        if (!_hasElements_5) {
          _hasElements_5 = true;
        } else {
          _builder.appendImmediate(", ", "\t");
        }
        _builder.append("P");
        String _name_10 = ag_2.getName();
        _builder.append(_name_10, "\t");
        _builder.append("=");
        int _indexOf = m.getLocations().indexOf(ag_2.getInitial_location());
        int _plus_8 = (_indexOf + 1);
        _builder.append(_plus_8, "\t");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      boolean _isEmpty_1 = m.getStati().isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append("\t");
        _builder.append("int ");
        {
          EList<Stato> _stati = m.getStati();
          boolean _hasElements_6 = false;
          for(final Stato st : _stati) {
            if (!_hasElements_6) {
              _hasElements_6 = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            _builder.append("S");
            String _name_11 = st.getName();
            _builder.append(_name_11, "\t");
            _builder.append("=");
            {
              boolean _isTr = st.isTr();
              if (_isTr) {
                _builder.append("1");
              }
            }
            {
              boolean _isFl = st.isFl();
              if (_isFl) {
                _builder.append("0");
              }
            }
          }
        }
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("//Objective");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    {
      boolean _isHave_reach_obj = m.isHave_reach_obj();
      if (_isHave_reach_obj) {
        _builder.append("clock Creach;");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    {
      boolean _isHave_obj = m.isHave_obj();
      if (_isHave_obj) {
        _builder.append("clock Cobj;");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</declaration>");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("automata_declaration");
    _builder.newLine();
    {
      boolean _isEmpty_2 = m.getStati().isEmpty();
      boolean _not_2 = (!_isEmpty_2);
      if (_not_2) {
        _builder.append("\t");
        _builder.append("state_updater");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<template>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<name>states</name>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<location id=\"base\">");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<name>base</name>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("</location>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<init ref = \"base\"/>\t");
        _builder.newLine();
        {
          EList<Stato> _stati_1 = m.getStati();
          for(final Stato st_1 : _stati_1) {
            {
              EList<Event> _true_events = st_1.getTrue_events();
              for(final Event ev : _true_events) {
                _builder.append("\t");
                _builder.append("<transition>");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("<source ref=\"base\"/>");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("<target ref=\"base\"/>");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("<label kind=\"synchronisation\">");
                String _name_12 = ev.getName();
                String _plus_9 = (_name_12 + "?");
                _builder.append(_plus_9, "\t");
                _builder.append("</label>");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("<label kind=\"assignment\">");
                String _name_13 = st_1.getName();
                String _plus_10 = ("S" + _name_13);
                _builder.append(_plus_10, "\t");
                _builder.append("=1</label>");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("</transition>");
                _builder.newLine();
              }
            }
            {
              EList<Event> _false_events = st_1.getFalse_events();
              for(final Event ev_1 : _false_events) {
                _builder.append("\t");
                _builder.append("<transition>");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("<source ref=\"base\"/>");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("<target ref=\"base\"/>");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("<label kind=\"synchronisation\">");
                String _name_14 = ev_1.getName();
                String _plus_11 = (_name_14 + "?");
                _builder.append(_plus_11, "\t");
                _builder.append("</label>");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("<label kind=\"assignment\">");
                String _name_15 = st_1.getName();
                String _plus_12 = ("S" + _name_15);
                _builder.append(_plus_12, "\t");
                _builder.append("=0</label>");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("</transition>");
                _builder.newLine();
              }
            }
          }
        }
        _builder.append("\t");
        _builder.append("</template>");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rules");
    _builder.newLine();
    {
      EList<Regola> _regole_1 = m.getRegole();
      for(final Regola rule_1 : _regole_1) {
        _builder.append("\t\t");
        le_regole.add_rule(rule_1.getName());
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("<template>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("<name>");
        String _name_16 = rule_1.getName();
        _builder.append(_name_16, "\t\t");
        _builder.append("</name>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("//states declarions");
        _builder.newLine();
        _builder.append("\t\t");
        CharSequence _print_rule_states = this.print_rule_states(rule_1, le_regole);
        _builder.append(_print_rule_states, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("<init ref = \"");
        String _name_17 = rule_1.getName();
        String _plus_13 = (_name_17 + "_initial_location");
        _builder.append(_plus_13, "\t\t");
        _builder.append("\"/>\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("//transitions");
        _builder.newLine();
        _builder.append("\t\t");
        CharSequence _print_rule_transitions = this.print_rule_transitions(rule_1, le_regole);
        _builder.append(_print_rule_transitions, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("</template>");
        _builder.newLine();
      }
    }
    _builder.append("agents");
    _builder.newLine();
    {
      EList<Agent> _agents_2 = m.getAgents();
      for(final Agent ag_3 : _agents_2) {
        _builder.append("\t");
        _builder.append("<template>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<name>");
        String _name_18 = ag_3.getName();
        _builder.append(_name_18, "\t");
        _builder.append("</name>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append(" ");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//no local declarations used");
        _builder.newLine();
        _builder.append("\t");
        _builder.append(" ");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//LOCATIONS");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//nota: sto dando stesso ID a location su agneti diversi, spero non lo mandi a male");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//se lo user non definisce connesssioni tra tutte le location lui non smatta");
        _builder.newLine();
        {
          boolean _isMobile = ag_3.isMobile();
          if (_isMobile) {
            {
              EList<Pdi> _locations = m.getLocations();
              for(final Pdi loc : _locations) {
                _builder.append("<location id=\"");
                String _name_19 = loc.getName();
                _builder.append(_name_19);
                _builder.append("\"> ");
                _builder.newLineIfNotEmpty();
                _builder.append("<name>");
                String _name_20 = loc.getName();
                _builder.append(_name_20);
                _builder.append("</name>");
                _builder.newLineIfNotEmpty();
                _builder.append("</location>");
                _builder.newLine();
              }
            }
            _builder.append("\t\t");
            _builder.newLine();
            _builder.append("//transitional locations");
            _builder.newLine();
            {
              EList<connection> _connections_1 = m.getConnections();
              for(final connection connect_1 : _connections_1) {
                _builder.append("<location id=\"");
                String _name_21 = connect_1.getPdi1().getName();
                String _plus_14 = ("going_" + _name_21);
                String _plus_15 = (_plus_14 + "_to_");
                String _name_22 = connect_1.getPdi2().getName();
                String _plus_16 = (_plus_15 + _name_22);
                _builder.append(_plus_16);
                _builder.append("\">");
                _builder.newLineIfNotEmpty();
                _builder.append("<name>");
                String _name_23 = connect_1.getPdi1().getName();
                String _plus_17 = ("going_" + _name_23);
                String _plus_18 = (_plus_17 + "_to_");
                String _name_24 = connect_1.getPdi2().getName();
                String _plus_19 = (_plus_18 + _name_24);
                _builder.append(_plus_19);
                _builder.append("</name>");
                _builder.newLineIfNotEmpty();
                _builder.append("<label kind=\"invariant\">");
                String _name_25 = ag_3.getName();
                String _plus_20 = ("C" + _name_25);
                _builder.append(_plus_20);
                _builder.append("&lt;=");
                int _distance = connect_1.getDistance();
                int _speed = ag_3.getSpeed();
                int _multiply = (_distance * _speed);
                int _plus_21 = (_multiply + 1);
                _builder.append(_plus_21);
                _builder.append("</label>");
                _builder.newLineIfNotEmpty();
                _builder.append("</location>");
                _builder.newLine();
                _builder.append("<location id=\"");
                String _name_26 = connect_1.getPdi2().getName();
                String _plus_22 = ("going_" + _name_26);
                String _plus_23 = (_plus_22 + "_to_");
                String _name_27 = connect_1.getPdi1().getName();
                String _plus_24 = (_plus_23 + _name_27);
                _builder.append(_plus_24);
                _builder.append("\"> ");
                _builder.newLineIfNotEmpty();
                _builder.append("<name>");
                String _name_28 = connect_1.getPdi2().getName();
                String _plus_25 = ("going_" + _name_28);
                String _plus_26 = (_plus_25 + "_to_");
                String _name_29 = connect_1.getPdi1().getName();
                String _plus_27 = (_plus_26 + _name_29);
                _builder.append(_plus_27);
                _builder.append("</name>\t\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("<label kind=\"invariant\">");
                String _name_30 = ag_3.getName();
                String _plus_28 = ("C" + _name_30);
                _builder.append(_plus_28);
                _builder.append("&lt;=");
                int _distance_1 = connect_1.getDistance();
                int _speed_1 = ag_3.getSpeed();
                int _multiply_1 = (_distance_1 * _speed_1);
                int _plus_29 = (_multiply_1 + 1);
                _builder.append(_plus_29);
                _builder.append("</label>");
                _builder.newLineIfNotEmpty();
                _builder.append("</location>");
                _builder.newLine();
                _builder.append(" ");
                _builder.newLine();
              }
            }
          }
        }
        {
          boolean _isMobile_1 = ag_3.isMobile();
          boolean _not_3 = (!_isMobile_1);
          if (_not_3) {
            _builder.append("<location id = \"");
            String _name_31 = ag_3.getInitial_location().getName();
            _builder.append(_name_31);
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append("<name>");
            String _name_32 = ag_3.getInitial_location().getName();
            _builder.append(_name_32);
            _builder.append("</name>");
            _builder.newLineIfNotEmpty();
            _builder.append("</location>");
            _builder.newLine();
            _builder.append(" ");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//location for durable actions (just one if it\'s locations specic and/or the agent isn\'t mobile )");
        _builder.newLine();
        {
          EList<Event> _actions = ag_3.getActions();
          for(final Event act_1 : _actions) {
            {
              boolean _isHas_duration_1 = act_1.isHas_duration();
              if (_isHas_duration_1) {
                {
                  boolean _isLocation_specific = act_1.isLocation_specific();
                  if (_isLocation_specific) {
                    _builder.append("<location id = \"");
                    String _name_33 = act_1.getName();
                    String _plus_30 = ("doing_" + _name_33);
                    String _plus_31 = (_plus_30 + "_in_");
                    String _name_34 = act_1.getLocation().getName();
                    String _plus_32 = (_plus_31 + _name_34);
                    _builder.append(_plus_32);
                    _builder.append("\">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<name>");
                    String _name_35 = act_1.getName();
                    String _plus_33 = ("doing_" + _name_35);
                    String _plus_34 = (_plus_33 + "_in_");
                    String _name_36 = act_1.getLocation().getName();
                    String _plus_35 = (_plus_34 + _name_36);
                    _builder.append(_plus_35);
                    _builder.append("</name>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"invariant\">");
                    String _name_37 = ag_3.getName();
                    String _plus_36 = ("C" + _name_37);
                    _builder.append(_plus_36);
                    _builder.append("&lt;=");
                    int _duration = act_1.getDuration();
                    int _plus_37 = (_duration + 1);
                    _builder.append(_plus_37);
                    _builder.append("</label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("</location>");
                    _builder.newLine();
                  }
                }
                {
                  if (((!act_1.isLocation_specific()) && (!ag_3.isMobile()))) {
                    _builder.append("<location id = \"");
                    String _name_38 = act_1.getName();
                    String _plus_38 = ("doing_" + _name_38);
                    String _plus_39 = (_plus_38 + "_in_");
                    String _name_39 = ag_3.getInitial_location().getName();
                    String _plus_40 = (_plus_39 + _name_39);
                    _builder.append(_plus_40);
                    _builder.append("\">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<name>");
                    String _name_40 = act_1.getName();
                    String _plus_41 = ("doing_" + _name_40);
                    String _plus_42 = (_plus_41 + "_in_");
                    String _name_41 = ag_3.getInitial_location().getName();
                    String _plus_43 = (_plus_42 + _name_41);
                    _builder.append(_plus_43);
                    _builder.append("</name>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"invariant\">");
                    String _name_42 = ag_3.getName();
                    String _plus_44 = ("C" + _name_42);
                    _builder.append(_plus_44);
                    _builder.append("&lt;=");
                    int _duration_1 = act_1.getDuration();
                    int _plus_45 = (_duration_1 + 1);
                    _builder.append(_plus_45);
                    _builder.append("</label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("</location>");
                    _builder.newLine();
                  }
                }
                {
                  if (((!act_1.isLocation_specific()) && ag_3.isMobile())) {
                    {
                      EList<Pdi> _locations_1 = m.getLocations();
                      for(final Pdi loc_1 : _locations_1) {
                        _builder.append("<location id = \"");
                        String _name_43 = act_1.getName();
                        String _plus_46 = ("doing_" + _name_43);
                        String _plus_47 = (_plus_46 + "_in_");
                        String _name_44 = loc_1.getName();
                        String _plus_48 = (_plus_47 + _name_44);
                        _builder.append(_plus_48);
                        _builder.append("\">");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<name>");
                        String _name_45 = act_1.getName();
                        String _plus_49 = ("doing_" + _name_45);
                        String _plus_50 = (_plus_49 + "_in_");
                        String _name_46 = loc_1.getName();
                        String _plus_51 = (_plus_50 + _name_46);
                        _builder.append(_plus_51);
                        _builder.append("</name>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<label kind=\"invariant\">");
                        String _name_47 = ag_3.getName();
                        String _plus_52 = ("C" + _name_47);
                        _builder.append(_plus_52);
                        _builder.append(" &lt;= ");
                        int _duration_2 = act_1.getDuration();
                        int _plus_53 = (_duration_2 + 1);
                        _builder.append(_plus_53);
                        _builder.append("</label>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("</location>");
                        _builder.newLine();
                      }
                    }
                  }
                }
                _builder.append("\t");
                _builder.append("\t");
                _builder.newLine();
              }
            }
          }
        }
        _builder.append("\t");
        _builder.append("\t\t\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//initial location id is passed");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<init ref = \"");
        String _name_48 = ag_3.getInitial_location().getName();
        _builder.append(_name_48, "\t");
        _builder.append("\"/>\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//transitions");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//movement transitions");
        _builder.newLine();
        {
          boolean _isMobile_2 = ag_3.isMobile();
          if (_isMobile_2) {
            {
              EList<connection> _connections_2 = m.getConnections();
              for(final connection connect_2 : _connections_2) {
                _builder.append("<transition");
                {
                  boolean _isControllable = ag_3.isControllable();
                  boolean _not_4 = (!_isControllable);
                  if (_not_4) {
                    _builder.append(" controllable=\"false\" ");
                  }
                }
                _builder.append(">");
                _builder.newLineIfNotEmpty();
                _builder.append("<source ref=\"");
                String _name_49 = connect_2.getPdi1().getName();
                _builder.append(_name_49);
                _builder.append("\"/>");
                _builder.newLineIfNotEmpty();
                _builder.append("<target ref=\"");
                String _name_50 = connect_2.getPdi1().getName();
                String _plus_54 = ("going_" + _name_50);
                String _plus_55 = (_plus_54 + "_to_");
                String _name_51 = connect_2.getPdi2().getName();
                String _plus_56 = (_plus_55 + _name_51);
                _builder.append(_plus_56);
                _builder.append("\"/>");
                _builder.newLineIfNotEmpty();
                _builder.append("<label kind=\"synchronisation\">");
                String _name_52 = ag_3.getName();
                String _plus_57 = (_name_52 + "_");
                String _name_53 = connect_2.getPdi1().getName();
                String _plus_58 = (_plus_57 + _name_53);
                String _plus_59 = (_plus_58 + "2");
                String _name_54 = connect_2.getPdi2().getName();
                String _plus_60 = (_plus_59 + _name_54);
                String _plus_61 = (_plus_60 + "!");
                _builder.append(_plus_61);
                _builder.append("</label>");
                _builder.newLineIfNotEmpty();
                _builder.append("<label kind=\"guard\">");
                String _name_55 = ag_3.getName();
                String _plus_62 = ("C" + _name_55);
                _builder.append(_plus_62);
                _builder.append(" &gt; 1</label>");
                _builder.newLineIfNotEmpty();
                _builder.append("<label kind=\"assignment\">");
                String _name_56 = ag_3.getName();
                String _plus_63 = ("P" + _name_56);
                _builder.append(_plus_63);
                _builder.append(" = ");
                int _indexOf_1 = m.getLocations().indexOf(connect_2.getPdi1());
                int _plus_64 = (_indexOf_1 + 1);
                String _plus_65 = ("-" + Integer.valueOf(_plus_64));
                int _indexOf_2 = m.getLocations().indexOf(connect_2.getPdi2());
                int _plus_66 = (_indexOf_2 + 1);
                String _plus_67 = (_plus_65 + Integer.valueOf(_plus_66));
                _builder.append(_plus_67);
                _builder.append(",  ");
                String _name_57 = ag_3.getName();
                String _plus_68 = ("C" + _name_57);
                _builder.append(_plus_68);
                _builder.append("= 0</label>");
                _builder.newLineIfNotEmpty();
                _builder.append("</transition>");
                _builder.newLine();
                _builder.append(" ");
                _builder.newLine();
                _builder.append("<transition");
                {
                  boolean _isControllable_1 = ag_3.isControllable();
                  boolean _not_5 = (!_isControllable_1);
                  if (_not_5) {
                    _builder.append(" controllable=\"false\" ");
                  }
                }
                _builder.append(">");
                _builder.newLineIfNotEmpty();
                _builder.append("<source ref=\"");
                String _name_58 = connect_2.getPdi1().getName();
                String _plus_69 = ("going_" + _name_58);
                String _plus_70 = (_plus_69 + "_to_");
                String _name_59 = connect_2.getPdi2().getName();
                String _plus_71 = (_plus_70 + _name_59);
                _builder.append(_plus_71);
                _builder.append("\"/>");
                _builder.newLineIfNotEmpty();
                _builder.append("<target ref=\"");
                String _name_60 = connect_2.getPdi2().getName();
                _builder.append(_name_60);
                _builder.append("\"/>");
                _builder.newLineIfNotEmpty();
                _builder.append("<label kind=\"guard\">");
                String _name_61 = ag_3.getName();
                String _plus_72 = ("C" + _name_61);
                _builder.append(_plus_72);
                _builder.append(" &gt; ");
                int _distance_2 = connect_2.getDistance();
                int _speed_2 = ag_3.getSpeed();
                int _multiply_2 = (_distance_2 * _speed_2);
                _builder.append(_multiply_2);
                _builder.append("</label>");
                _builder.newLineIfNotEmpty();
                _builder.append("<label kind=\"assignment\">");
                String _name_62 = ag_3.getName();
                String _plus_73 = ("P" + _name_62);
                _builder.append(_plus_73);
                _builder.append(" = ");
                int _indexOf_3 = m.getLocations().indexOf(connect_2.getPdi2());
                int _plus_74 = (_indexOf_3 + 1);
                _builder.append(_plus_74);
                _builder.append(",  ");
                String _name_63 = ag_3.getName();
                String _plus_75 = ("C" + _name_63);
                _builder.append(_plus_75);
                _builder.append("= 0</label>");
                _builder.newLineIfNotEmpty();
                _builder.append("</transition>");
                _builder.newLine();
                _builder.append(" ");
                _builder.newLine();
                _builder.append("<transition");
                {
                  boolean _isControllable_2 = ag_3.isControllable();
                  boolean _not_6 = (!_isControllable_2);
                  if (_not_6) {
                    _builder.append(" controllable=\"false\" ");
                  }
                }
                _builder.append(">");
                _builder.newLineIfNotEmpty();
                _builder.append("<source ref=\"");
                String _name_64 = connect_2.getPdi2().getName();
                _builder.append(_name_64);
                _builder.append("\"/>");
                _builder.newLineIfNotEmpty();
                _builder.append("<target ref=\"");
                String _name_65 = connect_2.getPdi2().getName();
                String _plus_76 = ("going_" + _name_65);
                String _plus_77 = (_plus_76 + "_to_");
                String _name_66 = connect_2.getPdi1().getName();
                String _plus_78 = (_plus_77 + _name_66);
                _builder.append(_plus_78);
                _builder.append("\"/>");
                _builder.newLineIfNotEmpty();
                _builder.append("<label kind=\"synchronisation\">");
                String _name_67 = ag_3.getName();
                String _plus_79 = (_name_67 + "_");
                String _name_68 = connect_2.getPdi2().getName();
                String _plus_80 = (_plus_79 + _name_68);
                String _plus_81 = (_plus_80 + "2");
                String _name_69 = connect_2.getPdi1().getName();
                String _plus_82 = (_plus_81 + _name_69);
                String _plus_83 = (_plus_82 + "!");
                _builder.append(_plus_83);
                _builder.append("</label>");
                _builder.newLineIfNotEmpty();
                _builder.append("<label kind=\"guard\">");
                String _name_70 = ag_3.getName();
                String _plus_84 = ("C" + _name_70);
                _builder.append(_plus_84);
                _builder.append(" &gt; 1</label>");
                _builder.newLineIfNotEmpty();
                _builder.append("<label kind=\"assignment\"> ");
                String _name_71 = ag_3.getName();
                String _plus_85 = ("P" + _name_71);
                _builder.append(_plus_85);
                _builder.append(" = ");
                int _indexOf_4 = m.getLocations().indexOf(connect_2.getPdi2());
                int _plus_86 = (_indexOf_4 + 1);
                String _plus_87 = ("-" + Integer.valueOf(_plus_86));
                int _indexOf_5 = m.getLocations().indexOf(connect_2.getPdi1());
                int _plus_88 = (_indexOf_5 + 1);
                String _plus_89 = (_plus_87 + Integer.valueOf(_plus_88));
                _builder.append(_plus_89);
                _builder.append(",  ");
                String _name_72 = ag_3.getName();
                String _plus_90 = ("C" + _name_72);
                _builder.append(_plus_90);
                _builder.append("= 0</label>");
                _builder.newLineIfNotEmpty();
                _builder.append("</transition>");
                _builder.newLine();
                _builder.append(" ");
                _builder.newLine();
                _builder.append("<transition");
                {
                  boolean _isControllable_3 = ag_3.isControllable();
                  boolean _not_7 = (!_isControllable_3);
                  if (_not_7) {
                    _builder.append(" controllable=\"false\" ");
                  }
                }
                _builder.append(">");
                _builder.newLineIfNotEmpty();
                _builder.append("<source ref=\"");
                String _name_73 = connect_2.getPdi2().getName();
                String _plus_91 = ("going_" + _name_73);
                String _plus_92 = (_plus_91 + "_to_");
                String _name_74 = connect_2.getPdi1().getName();
                String _plus_93 = (_plus_92 + _name_74);
                _builder.append(_plus_93);
                _builder.append("\"/>");
                _builder.newLineIfNotEmpty();
                _builder.append("<target ref=\"");
                String _name_75 = connect_2.getPdi1().getName();
                _builder.append(_name_75);
                _builder.append("\"/>");
                _builder.newLineIfNotEmpty();
                _builder.append("<label kind=\"guard\">");
                String _name_76 = ag_3.getName();
                String _plus_94 = ("C" + _name_76);
                _builder.append(_plus_94);
                _builder.append("&gt;");
                int _distance_3 = connect_2.getDistance();
                int _speed_3 = ag_3.getSpeed();
                int _multiply_3 = (_distance_3 * _speed_3);
                _builder.append(_multiply_3);
                _builder.append("</label>");
                _builder.newLineIfNotEmpty();
                _builder.append("<label kind=\"assignment\">");
                String _name_77 = ag_3.getName();
                String _plus_95 = ("P" + _name_77);
                _builder.append(_plus_95);
                _builder.append(" = ");
                int _indexOf_6 = m.getLocations().indexOf(connect_2.getPdi1());
                int _plus_96 = (_indexOf_6 + 1);
                _builder.append(_plus_96);
                _builder.append(",  ");
                String _name_78 = ag_3.getName();
                String _plus_97 = ("C" + _name_78);
                _builder.append(_plus_97);
                _builder.append("= 0</label>");
                _builder.newLineIfNotEmpty();
                _builder.append("</transition>");
                _builder.newLine();
              }
            }
          }
        }
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//action transitions");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//BUG : if an action si collaborative but nobody can react to it, the action will be always allowed");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        {
          EList<Event> _actions_1 = ag_3.getActions();
          for(final Event act_2 : _actions_1) {
            {
              boolean _isLocation_specific_1 = act_2.isLocation_specific();
              if (_isLocation_specific_1) {
                {
                  boolean _isHas_duration_2 = act_2.isHas_duration();
                  if (_isHas_duration_2) {
                    _builder.append("<transition");
                    {
                      boolean _isControllable_4 = ag_3.isControllable();
                      boolean _not_8 = (!_isControllable_4);
                      if (_not_8) {
                        _builder.append(" controllable=\"false\" ");
                      }
                    }
                    _builder.append(">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<source ref=\"");
                    String _name_79 = act_2.getLocation().getName();
                    _builder.append(_name_79);
                    _builder.append("\"/>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<target ref=\"");
                    String _name_80 = act_2.getName();
                    String _plus_98 = ("doing_" + _name_80);
                    String _plus_99 = (_plus_98 + "_in_");
                    String _name_81 = act_2.getLocation().getName();
                    String _plus_100 = (_plus_99 + _name_81);
                    _builder.append(_plus_100);
                    _builder.append("\"/>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"synchronisation\">");
                    String _name_82 = act_2.getName();
                    String _plus_101 = (_name_82 + "!");
                    _builder.append(_plus_101);
                    _builder.append("</label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"assignment\"> ");
                    String _name_83 = ag_3.getName();
                    String _plus_102 = ("C" + _name_83);
                    _builder.append(_plus_102);
                    _builder.append(" =0,");
                    String _name_84 = ag_3.getName();
                    String _plus_103 = ("P" + _name_84);
                    _builder.append(_plus_103);
                    _builder.append("=");
                    int _indexOf_7 = m.getLocations().indexOf(act_2.getLocation());
                    int _plus_104 = (_indexOf_7 + 1);
                    String _plus_105 = ("-" + Integer.valueOf(_plus_104));
                    int _indexOf_8 = m.getLocations().indexOf(act_2.getLocation());
                    int _plus_106 = (_indexOf_8 + 1);
                    String _plus_107 = (_plus_105 + Integer.valueOf(_plus_106));
                    _builder.append(_plus_107);
                    _builder.append(" </label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"guard\">");
                    String _name_85 = ag_3.getName();
                    String _plus_108 = ("C" + _name_85);
                    _builder.append(_plus_108);
                    _builder.append(" &gt; 1");
                    {
                      boolean _isCollaborative = act_2.isCollaborative();
                      if (_isCollaborative) {
                        _builder.append(" &amp;&amp; (");
                        {
                          final Function1<Agent, Boolean> _function_1 = (Agent it) -> {
                            return Boolean.valueOf(it.getReactions().contains(act_2));
                          };
                          Iterable<Agent> _filter_1 = IterableExtensions.<Agent>filter(m.getAgents(), _function_1);
                          boolean _hasElements_7 = false;
                          for(final Agent collaborator : _filter_1) {
                            if (!_hasElements_7) {
                              _hasElements_7 = true;
                            } else {
                              _builder.appendImmediate(" || ", "");
                            }
                            String _name_86 = collaborator.getName();
                            String _plus_109 = ("P" + _name_86);
                            String _plus_110 = (_plus_109 + "==");
                            int _indexOf_9 = m.getLocations().indexOf(act_2.getLocation());
                            int _plus_111 = (_indexOf_9 + 1);
                            String _plus_112 = (_plus_110 + Integer.valueOf(_plus_111));
                            _builder.append(_plus_112);
                          }
                        }
                        _builder.append(") ");
                      }
                    }
                    {
                      boolean _are_there_blocks = le_regole.are_there_blocks(act_2.getName());
                      if (_are_there_blocks) {
                        _builder.append(" &amp;&amp; ");
                      }
                    }
                    _builder.append("  ");
                    {
                      List<List<String>> _action_blocks = le_regole.action_blocks(act_2.getName());
                      boolean _hasElements_8 = false;
                      for(final List<String> block : _action_blocks) {
                        if (!_hasElements_8) {
                          _hasElements_8 = true;
                        } else {
                          _builder.appendImmediate(" &amp;&amp; ", "");
                        }
                        _builder.append(" ( ");
                        {
                          boolean _hasElements_9 = false;
                          for(final String rulla : block) {
                            if (!_hasElements_9) {
                              _hasElements_9 = true;
                            } else {
                              _builder.appendImmediate(" || ", "");
                            }
                            _builder.append(rulla);
                          }
                        }
                        _builder.append(" ) ");
                      }
                    }
                    {
                      final Function1<StateDep, Boolean> _function_2 = (StateDep it) -> {
                        Event _evento = it.getEvento();
                        return Boolean.valueOf(Objects.equal(_evento, act_2));
                      };
                      Iterable<StateDep> _filter_2 = IterableExtensions.<StateDep>filter(m.getDipendenze(), _function_2);
                      for(final StateDep dip : _filter_2) {
                        {
                          boolean _isTr_1 = dip.isTr();
                          if (_isTr_1) {
                            String _name_87 = dip.getStat().getName();
                            String _plus_113 = (("&amp;&amp; " + "S") + _name_87);
                            String _plus_114 = (_plus_113 + "==1");
                            _builder.append(_plus_114);
                          }
                        }
                        {
                          boolean _isFl_1 = dip.isFl();
                          if (_isFl_1) {
                            String _name_88 = dip.getStat().getName();
                            String _plus_115 = ((" &amp;&amp; " + "S") + _name_88);
                            String _plus_116 = (_plus_115 + "==0");
                            _builder.append(_plus_116);
                          }
                        }
                      }
                    }
                    _builder.append("</label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("</transition>");
                    _builder.newLine();
                    _builder.append(" ");
                    _builder.newLine();
                    _builder.append("<transition");
                    {
                      boolean _isControllable_5 = ag_3.isControllable();
                      boolean _not_9 = (!_isControllable_5);
                      if (_not_9) {
                        _builder.append(" controllable=\"false\" ");
                      }
                    }
                    _builder.append(">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<source ref=\"");
                    String _name_89 = act_2.getName();
                    String _plus_117 = ("doing_" + _name_89);
                    String _plus_118 = (_plus_117 + "_in_");
                    String _name_90 = act_2.getLocation().getName();
                    String _plus_119 = (_plus_118 + _name_90);
                    _builder.append(_plus_119);
                    _builder.append("\"/>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<target ref=\"");
                    String _name_91 = act_2.getLocation().getName();
                    _builder.append(_name_91);
                    _builder.append("\"/>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"synchronisation\">");
                    String _name_92 = act_2.getName();
                    String _plus_120 = (_name_92 + "DONE");
                    String _plus_121 = (_plus_120 + "!");
                    _builder.append(_plus_121);
                    _builder.append("</label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"assignment\"> ");
                    String _name_93 = ag_3.getName();
                    String _plus_122 = ("C" + _name_93);
                    _builder.append(_plus_122);
                    _builder.append(" =0, ");
                    String _name_94 = ag_3.getName();
                    String _plus_123 = ("P" + _name_94);
                    _builder.append(_plus_123);
                    _builder.append("=");
                    int _indexOf_10 = m.getLocations().indexOf(act_2.getLocation());
                    int _plus_124 = (_indexOf_10 + 1);
                    _builder.append(_plus_124);
                    _builder.append(" </label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"guard\"> ");
                    String _name_95 = ag_3.getName();
                    String _plus_125 = ("C" + _name_95);
                    _builder.append(_plus_125);
                    _builder.append(" &gt; ");
                    int _duration_3 = act_2.getDuration();
                    _builder.append(_duration_3);
                    {
                      String _name_96 = act_2.getName();
                      String _plus_126 = (_name_96 + "DONE");
                      boolean _are_there_blocks_1 = le_regole.are_there_blocks(_plus_126);
                      if (_are_there_blocks_1) {
                        _builder.append(" &amp;&amp; ");
                      }
                    }
                    _builder.append(" ");
                    {
                      String _name_97 = act_2.getName();
                      String _plus_127 = (_name_97 + "DONE");
                      List<List<String>> _action_blocks_1 = le_regole.action_blocks(_plus_127);
                      boolean _hasElements_10 = false;
                      for(final List<String> block_1 : _action_blocks_1) {
                        if (!_hasElements_10) {
                          _hasElements_10 = true;
                        } else {
                          _builder.appendImmediate(" &amp;&amp; ", "");
                        }
                        _builder.append(" ( ");
                        {
                          boolean _hasElements_11 = false;
                          for(final String rulla_1 : block_1) {
                            if (!_hasElements_11) {
                              _hasElements_11 = true;
                            } else {
                              _builder.appendImmediate(" || ", "");
                            }
                            _builder.append(rulla_1);
                          }
                        }
                        _builder.append(" ) ");
                      }
                    }
                    _builder.append("</label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("</transition>\t\t\t");
                    _builder.newLine();
                    _builder.append(" ");
                    _builder.newLine();
                  }
                }
                {
                  boolean _isHas_duration_3 = act_2.isHas_duration();
                  boolean _not_10 = (!_isHas_duration_3);
                  if (_not_10) {
                    _builder.append("<transition");
                    {
                      boolean _isControllable_6 = ag_3.isControllable();
                      boolean _not_11 = (!_isControllable_6);
                      if (_not_11) {
                        _builder.append(" controllable=\"false\" ");
                      }
                    }
                    _builder.append(">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<source ref=\"");
                    String _name_98 = act_2.getLocation().getName();
                    _builder.append(_name_98);
                    _builder.append("\"/>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<target ref=\"");
                    String _name_99 = act_2.getLocation().getName();
                    _builder.append(_name_99);
                    _builder.append("\"/>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"synchronisation\">");
                    String _name_100 = act_2.getName();
                    String _plus_128 = (_name_100 + "!");
                    _builder.append(_plus_128);
                    _builder.append("</label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"assignment\"> ");
                    String _name_101 = ag_3.getName();
                    String _plus_129 = ("C" + _name_101);
                    _builder.append(_plus_129);
                    _builder.append(" =0 </label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"guard\">");
                    String _name_102 = ag_3.getName();
                    String _plus_130 = ("C" + _name_102);
                    _builder.append(_plus_130);
                    _builder.append(" &gt; 1");
                    {
                      boolean _isCollaborative_1 = act_2.isCollaborative();
                      if (_isCollaborative_1) {
                        _builder.append(" &amp;&amp; (");
                        {
                          final Function1<Agent, Boolean> _function_3 = (Agent it) -> {
                            return Boolean.valueOf(it.getReactions().contains(act_2));
                          };
                          Iterable<Agent> _filter_3 = IterableExtensions.<Agent>filter(m.getAgents(), _function_3);
                          boolean _hasElements_12 = false;
                          for(final Agent collaborator_1 : _filter_3) {
                            if (!_hasElements_12) {
                              _hasElements_12 = true;
                            } else {
                              _builder.appendImmediate(" || ", "");
                            }
                            String _name_103 = collaborator_1.getName();
                            String _plus_131 = ("P" + _name_103);
                            String _plus_132 = (_plus_131 + "==");
                            int _indexOf_11 = m.getLocations().indexOf(act_2.getLocation());
                            int _plus_133 = (_indexOf_11 + 1);
                            String _plus_134 = (_plus_132 + Integer.valueOf(_plus_133));
                            _builder.append(_plus_134);
                          }
                        }
                        _builder.append(")");
                      }
                    }
                    {
                      boolean _are_there_blocks_2 = le_regole.are_there_blocks(act_2.getName());
                      if (_are_there_blocks_2) {
                        _builder.append(" &amp;&amp; ");
                      }
                    }
                    _builder.append(" ");
                    {
                      List<List<String>> _action_blocks_2 = le_regole.action_blocks(act_2.getName());
                      boolean _hasElements_13 = false;
                      for(final List<String> block_2 : _action_blocks_2) {
                        if (!_hasElements_13) {
                          _hasElements_13 = true;
                        } else {
                          _builder.appendImmediate(" &amp;&amp; ", "");
                        }
                        _builder.append(" ( ");
                        {
                          boolean _hasElements_14 = false;
                          for(final String rulla_2 : block_2) {
                            if (!_hasElements_14) {
                              _hasElements_14 = true;
                            } else {
                              _builder.appendImmediate(" || ", "");
                            }
                            _builder.append(rulla_2);
                          }
                        }
                        _builder.append(" ) ");
                      }
                    }
                    {
                      final Function1<StateDep, Boolean> _function_4 = (StateDep it) -> {
                        Event _evento = it.getEvento();
                        return Boolean.valueOf(Objects.equal(_evento, act_2));
                      };
                      Iterable<StateDep> _filter_4 = IterableExtensions.<StateDep>filter(m.getDipendenze(), _function_4);
                      for(final StateDep dip_1 : _filter_4) {
                        {
                          boolean _isTr_2 = dip_1.isTr();
                          if (_isTr_2) {
                            String _name_104 = dip_1.getStat().getName();
                            String _plus_135 = (("&amp;&amp; " + "S") + _name_104);
                            String _plus_136 = (_plus_135 + "==1");
                            _builder.append(_plus_136);
                          }
                        }
                        {
                          boolean _isFl_2 = dip_1.isFl();
                          if (_isFl_2) {
                            String _name_105 = dip_1.getStat().getName();
                            String _plus_137 = ((" &amp;&amp; " + "S") + _name_105);
                            String _plus_138 = (_plus_137 + "==0");
                            _builder.append(_plus_138);
                          }
                        }
                      }
                    }
                    _builder.append("</label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("</transition>");
                    _builder.newLine();
                    _builder.append(" ");
                    _builder.newLine();
                  }
                }
              }
            }
            {
              if (((!act_2.isLocation_specific()) && (!ag_3.isMobile()))) {
                {
                  boolean _isHas_duration_4 = act_2.isHas_duration();
                  if (_isHas_duration_4) {
                    _builder.append("<transition");
                    {
                      boolean _isControllable_7 = ag_3.isControllable();
                      boolean _not_12 = (!_isControllable_7);
                      if (_not_12) {
                        _builder.append(" controllable=\"false\" ");
                      }
                    }
                    _builder.append(">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<source ref=\"");
                    String _name_106 = ag_3.getInitial_location().getName();
                    _builder.append(_name_106);
                    _builder.append("\"/>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<target ref=\"");
                    String _name_107 = act_2.getName();
                    String _plus_139 = ("doing_" + _name_107);
                    String _plus_140 = (_plus_139 + "_in_");
                    String _name_108 = ag_3.getInitial_location().getName();
                    String _plus_141 = (_plus_140 + _name_108);
                    _builder.append(_plus_141);
                    _builder.append("\"/>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"synchronisation\">");
                    String _name_109 = act_2.getName();
                    String _plus_142 = (_name_109 + "!");
                    _builder.append(_plus_142);
                    _builder.append("</label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"assignment\">");
                    String _name_110 = ag_3.getName();
                    String _plus_143 = ("C" + _name_110);
                    _builder.append(_plus_143);
                    _builder.append(" =0,");
                    String _name_111 = ag_3.getName();
                    String _plus_144 = ("P" + _name_111);
                    _builder.append(_plus_144);
                    _builder.append("=");
                    int _indexOf_12 = m.getLocations().indexOf(ag_3.getInitial_location());
                    int _plus_145 = (_indexOf_12 + 1);
                    String _plus_146 = ("-" + Integer.valueOf(_plus_145));
                    int _indexOf_13 = m.getLocations().indexOf(ag_3.getInitial_location());
                    int _plus_147 = (_indexOf_13 + 1);
                    String _plus_148 = (_plus_146 + Integer.valueOf(_plus_147));
                    _builder.append(_plus_148);
                    _builder.append("</label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"guard\">");
                    String _name_112 = ag_3.getName();
                    String _plus_149 = ("C" + _name_112);
                    _builder.append(_plus_149);
                    _builder.append(" &gt; 1");
                    {
                      boolean _isCollaborative_2 = act_2.isCollaborative();
                      if (_isCollaborative_2) {
                        _builder.append(" &amp;&amp; (");
                        {
                          final Function1<Agent, Boolean> _function_5 = (Agent it) -> {
                            return Boolean.valueOf(it.getReactions().contains(act_2));
                          };
                          Iterable<Agent> _filter_5 = IterableExtensions.<Agent>filter(m.getAgents(), _function_5);
                          boolean _hasElements_15 = false;
                          for(final Agent collaborator_2 : _filter_5) {
                            if (!_hasElements_15) {
                              _hasElements_15 = true;
                            } else {
                              _builder.appendImmediate(" || ", "");
                            }
                            String _name_113 = collaborator_2.getName();
                            String _plus_150 = ("P" + _name_113);
                            String _plus_151 = (_plus_150 + "==");
                            int _indexOf_14 = m.getLocations().indexOf(ag_3.getInitial_location());
                            int _plus_152 = (_indexOf_14 + 1);
                            String _plus_153 = (_plus_151 + Integer.valueOf(_plus_152));
                            _builder.append(_plus_153);
                          }
                        }
                        _builder.append(")");
                      }
                    }
                    {
                      boolean _are_there_blocks_3 = le_regole.are_there_blocks(act_2.getName());
                      if (_are_there_blocks_3) {
                        _builder.append(" &amp;&amp; ");
                      }
                    }
                    _builder.append("  ");
                    {
                      List<List<String>> _action_blocks_3 = le_regole.action_blocks(act_2.getName());
                      boolean _hasElements_16 = false;
                      for(final List<String> block_3 : _action_blocks_3) {
                        if (!_hasElements_16) {
                          _hasElements_16 = true;
                        } else {
                          _builder.appendImmediate(" &amp;&amp; ", "");
                        }
                        _builder.append(" ( ");
                        {
                          boolean _hasElements_17 = false;
                          for(final String rulla_3 : block_3) {
                            if (!_hasElements_17) {
                              _hasElements_17 = true;
                            } else {
                              _builder.appendImmediate(" || ", "");
                            }
                            _builder.append(rulla_3);
                          }
                        }
                        _builder.append(" ) ");
                      }
                    }
                    {
                      final Function1<StateDep, Boolean> _function_6 = (StateDep it) -> {
                        Event _evento = it.getEvento();
                        return Boolean.valueOf(Objects.equal(_evento, act_2));
                      };
                      Iterable<StateDep> _filter_6 = IterableExtensions.<StateDep>filter(m.getDipendenze(), _function_6);
                      for(final StateDep dip_2 : _filter_6) {
                        {
                          boolean _isTr_3 = dip_2.isTr();
                          if (_isTr_3) {
                            String _name_114 = dip_2.getStat().getName();
                            String _plus_154 = (("&amp;&amp; " + "S") + _name_114);
                            String _plus_155 = (_plus_154 + "==1");
                            _builder.append(_plus_155);
                          }
                        }
                        {
                          boolean _isFl_3 = dip_2.isFl();
                          if (_isFl_3) {
                            String _name_115 = dip_2.getStat().getName();
                            String _plus_156 = ((" &amp;&amp; " + "S") + _name_115);
                            String _plus_157 = (_plus_156 + "==0");
                            _builder.append(_plus_157);
                          }
                        }
                      }
                    }
                    _builder.append("</label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("</transition>");
                    _builder.newLine();
                    _builder.append(" ");
                    _builder.newLine();
                    _builder.append("<transition");
                    {
                      boolean _isControllable_8 = ag_3.isControllable();
                      boolean _not_13 = (!_isControllable_8);
                      if (_not_13) {
                        _builder.append(" controllable=\"false\" ");
                      }
                    }
                    _builder.append(">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<source ref=\"");
                    String _name_116 = act_2.getName();
                    String _plus_158 = ("doing_" + _name_116);
                    String _plus_159 = (_plus_158 + "_in_");
                    String _name_117 = ag_3.getInitial_location().getName();
                    String _plus_160 = (_plus_159 + _name_117);
                    _builder.append(_plus_160);
                    _builder.append("\"/>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<target ref=\"");
                    String _name_118 = ag_3.getInitial_location().getName();
                    _builder.append(_name_118);
                    _builder.append("\"/>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"synchronisation\">");
                    String _name_119 = act_2.getName();
                    String _plus_161 = (_name_119 + "DONE");
                    String _plus_162 = (_plus_161 + "!");
                    _builder.append(_plus_162);
                    _builder.append("</label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"assignment\"> ");
                    String _name_120 = ag_3.getName();
                    String _plus_163 = ("C" + _name_120);
                    _builder.append(_plus_163);
                    _builder.append(" =0,");
                    String _name_121 = ag_3.getName();
                    String _plus_164 = ("P" + _name_121);
                    _builder.append(_plus_164);
                    _builder.append("=");
                    int _indexOf_15 = m.getLocations().indexOf(ag_3.getInitial_location());
                    int _plus_165 = (_indexOf_15 + 1);
                    _builder.append(_plus_165);
                    _builder.append("  </label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"guard\"> ");
                    String _name_122 = ag_3.getName();
                    String _plus_166 = ("C" + _name_122);
                    _builder.append(_plus_166);
                    _builder.append(" &gt; ");
                    int _duration_4 = act_2.getDuration();
                    _builder.append(_duration_4);
                    {
                      String _name_123 = act_2.getName();
                      String _plus_167 = (_name_123 + "DONE");
                      boolean _are_there_blocks_4 = le_regole.are_there_blocks(_plus_167);
                      if (_are_there_blocks_4) {
                        _builder.append(" &amp;&amp; ");
                      }
                    }
                    _builder.append(" ");
                    {
                      String _name_124 = act_2.getName();
                      String _plus_168 = (_name_124 + "DONE");
                      List<List<String>> _action_blocks_4 = le_regole.action_blocks(_plus_168);
                      boolean _hasElements_18 = false;
                      for(final List<String> block_4 : _action_blocks_4) {
                        if (!_hasElements_18) {
                          _hasElements_18 = true;
                        } else {
                          _builder.appendImmediate(" &amp;&amp; ", "");
                        }
                        _builder.append(" ( ");
                        {
                          boolean _hasElements_19 = false;
                          for(final String rulla_4 : block_4) {
                            if (!_hasElements_19) {
                              _hasElements_19 = true;
                            } else {
                              _builder.appendImmediate(" || ", "");
                            }
                            _builder.append(rulla_4);
                          }
                        }
                        _builder.append(" ) ");
                      }
                    }
                    _builder.append("</label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("</transition>\t\t\t");
                    _builder.newLine();
                    _builder.append(" ");
                    _builder.newLine();
                  }
                }
                _builder.newLine();
                {
                  boolean _isHas_duration_5 = act_2.isHas_duration();
                  boolean _not_14 = (!_isHas_duration_5);
                  if (_not_14) {
                    _builder.append("<transition");
                    {
                      boolean _isControllable_9 = ag_3.isControllable();
                      boolean _not_15 = (!_isControllable_9);
                      if (_not_15) {
                        _builder.append(" controllable=\"false\" ");
                      }
                    }
                    _builder.append(">");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<source ref=\"");
                    String _name_125 = ag_3.getInitial_location().getName();
                    _builder.append(_name_125);
                    _builder.append("\"/>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<target ref=\"");
                    String _name_126 = ag_3.getInitial_location().getName();
                    _builder.append(_name_126);
                    _builder.append("\"/>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"synchronisation\">");
                    String _name_127 = act_2.getName();
                    String _plus_169 = (_name_127 + "!");
                    _builder.append(_plus_169);
                    _builder.append("</label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"assignment\"> ");
                    String _name_128 = ag_3.getName();
                    String _plus_170 = ("C" + _name_128);
                    _builder.append(_plus_170);
                    _builder.append(" =0 </label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("<label kind=\"guard\">");
                    String _name_129 = ag_3.getName();
                    String _plus_171 = ("C" + _name_129);
                    _builder.append(_plus_171);
                    _builder.append(" &gt; 1");
                    {
                      boolean _isCollaborative_3 = act_2.isCollaborative();
                      if (_isCollaborative_3) {
                        _builder.append(" &amp;&amp; (");
                        {
                          final Function1<Agent, Boolean> _function_7 = (Agent it) -> {
                            return Boolean.valueOf(it.getReactions().contains(act_2));
                          };
                          Iterable<Agent> _filter_7 = IterableExtensions.<Agent>filter(m.getAgents(), _function_7);
                          boolean _hasElements_20 = false;
                          for(final Agent collaborator_3 : _filter_7) {
                            if (!_hasElements_20) {
                              _hasElements_20 = true;
                            } else {
                              _builder.appendImmediate(" || ", "");
                            }
                            String _name_130 = collaborator_3.getName();
                            String _plus_172 = ("P" + _name_130);
                            String _plus_173 = (_plus_172 + "==");
                            int _indexOf_16 = m.getLocations().indexOf(ag_3.getInitial_location());
                            int _plus_174 = (_indexOf_16 + 1);
                            String _plus_175 = (_plus_173 + Integer.valueOf(_plus_174));
                            _builder.append(_plus_175);
                          }
                        }
                        _builder.append(")");
                      }
                    }
                    {
                      boolean _are_there_blocks_5 = le_regole.are_there_blocks(act_2.getName());
                      if (_are_there_blocks_5) {
                        _builder.append(" &amp;&amp; ");
                      }
                    }
                    _builder.append(" ");
                    {
                      List<List<String>> _action_blocks_5 = le_regole.action_blocks(act_2.getName());
                      boolean _hasElements_21 = false;
                      for(final List<String> block_5 : _action_blocks_5) {
                        if (!_hasElements_21) {
                          _hasElements_21 = true;
                        } else {
                          _builder.appendImmediate(" &amp;&amp; ", "");
                        }
                        _builder.append(" ( ");
                        {
                          boolean _hasElements_22 = false;
                          for(final String rulla_5 : block_5) {
                            if (!_hasElements_22) {
                              _hasElements_22 = true;
                            } else {
                              _builder.appendImmediate(" || ", "");
                            }
                            _builder.append(rulla_5);
                          }
                        }
                        _builder.append(" ) ");
                      }
                    }
                    {
                      final Function1<StateDep, Boolean> _function_8 = (StateDep it) -> {
                        Event _evento = it.getEvento();
                        return Boolean.valueOf(Objects.equal(_evento, act_2));
                      };
                      Iterable<StateDep> _filter_8 = IterableExtensions.<StateDep>filter(m.getDipendenze(), _function_8);
                      for(final StateDep dip_3 : _filter_8) {
                        {
                          boolean _isTr_4 = dip_3.isTr();
                          if (_isTr_4) {
                            String _name_131 = dip_3.getStat().getName();
                            String _plus_176 = (("&amp;&amp; " + "S") + _name_131);
                            String _plus_177 = (_plus_176 + "==1");
                            _builder.append(_plus_177);
                          }
                        }
                        {
                          boolean _isFl_4 = dip_3.isFl();
                          if (_isFl_4) {
                            String _name_132 = dip_3.getStat().getName();
                            String _plus_178 = ((" &amp;&amp; " + "S") + _name_132);
                            String _plus_179 = (_plus_178 + "==0");
                            _builder.append(_plus_179);
                          }
                        }
                      }
                    }
                    _builder.append("</label>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("</transition>");
                    _builder.newLine();
                    _builder.append(" \t\t");
                    _builder.newLine();
                  }
                }
              }
            }
            _builder.newLine();
            {
              if (((!act_2.isLocation_specific()) && ag_3.isMobile())) {
                {
                  EList<Pdi> _locations_2 = m.getLocations();
                  for(final Pdi loc_2 : _locations_2) {
                    {
                      boolean _isHas_duration_6 = act_2.isHas_duration();
                      if (_isHas_duration_6) {
                        _builder.append("<transition");
                        {
                          boolean _isControllable_10 = ag_3.isControllable();
                          boolean _not_16 = (!_isControllable_10);
                          if (_not_16) {
                            _builder.append(" controllable=\"false\" ");
                          }
                        }
                        _builder.append(">");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<source ref=\"");
                        String _name_133 = loc_2.getName();
                        _builder.append(_name_133);
                        _builder.append("\"/>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<target ref=\"");
                        String _name_134 = act_2.getName();
                        String _plus_180 = ("doing_" + _name_134);
                        String _plus_181 = (_plus_180 + "_in_");
                        String _name_135 = loc_2.getName();
                        String _plus_182 = (_plus_181 + _name_135);
                        _builder.append(_plus_182);
                        _builder.append("\"/>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<label kind=\"synchronisation\">");
                        String _name_136 = act_2.getName();
                        String _plus_183 = (_name_136 + "!");
                        _builder.append(_plus_183);
                        _builder.append("</label>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<label kind=\"assignment\">");
                        String _name_137 = ag_3.getName();
                        String _plus_184 = ("C" + _name_137);
                        _builder.append(_plus_184);
                        _builder.append(" =0,");
                        String _name_138 = ag_3.getName();
                        String _plus_185 = ("P" + _name_138);
                        _builder.append(_plus_185);
                        _builder.append("=");
                        int _indexOf_17 = m.getLocations().indexOf(loc_2);
                        int _plus_186 = (_indexOf_17 + 1);
                        String _plus_187 = ("-" + Integer.valueOf(_plus_186));
                        int _indexOf_18 = m.getLocations().indexOf(loc_2);
                        int _plus_188 = (_indexOf_18 + 1);
                        String _plus_189 = (_plus_187 + Integer.valueOf(_plus_188));
                        _builder.append(_plus_189);
                        _builder.append(" </label>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<label kind=\"guard\">");
                        String _name_139 = ag_3.getName();
                        String _plus_190 = ("C" + _name_139);
                        _builder.append(_plus_190);
                        _builder.append(" &gt; 1");
                        {
                          boolean _isCollaborative_4 = act_2.isCollaborative();
                          if (_isCollaborative_4) {
                            _builder.append(" &amp;&amp; (");
                            {
                              final Function1<Agent, Boolean> _function_9 = (Agent it) -> {
                                return Boolean.valueOf(it.getReactions().contains(act_2));
                              };
                              Iterable<Agent> _filter_9 = IterableExtensions.<Agent>filter(m.getAgents(), _function_9);
                              boolean _hasElements_23 = false;
                              for(final Agent collaborator_4 : _filter_9) {
                                if (!_hasElements_23) {
                                  _hasElements_23 = true;
                                } else {
                                  _builder.appendImmediate(" || ", "");
                                }
                                String _name_140 = collaborator_4.getName();
                                String _plus_191 = ("P" + _name_140);
                                String _plus_192 = (_plus_191 + "==");
                                int _indexOf_19 = m.getLocations().indexOf(loc_2);
                                int _plus_193 = (_indexOf_19 + 1);
                                String _plus_194 = (_plus_192 + Integer.valueOf(_plus_193));
                                _builder.append(_plus_194);
                              }
                            }
                            _builder.append(") ");
                          }
                        }
                        {
                          boolean _are_there_blocks_6 = le_regole.are_there_blocks(act_2.getName());
                          if (_are_there_blocks_6) {
                            _builder.append(" &amp;&amp; ");
                          }
                        }
                        _builder.append(" ");
                        {
                          List<List<String>> _action_blocks_6 = le_regole.action_blocks(act_2.getName());
                          boolean _hasElements_24 = false;
                          for(final List<String> block_6 : _action_blocks_6) {
                            if (!_hasElements_24) {
                              _hasElements_24 = true;
                            } else {
                              _builder.appendImmediate(" &amp;&amp; ", "");
                            }
                            _builder.append(" ( ");
                            {
                              boolean _hasElements_25 = false;
                              for(final String rulla_6 : block_6) {
                                if (!_hasElements_25) {
                                  _hasElements_25 = true;
                                } else {
                                  _builder.appendImmediate(" || ", "");
                                }
                                _builder.append(rulla_6);
                              }
                            }
                            _builder.append(" ) ");
                          }
                        }
                        {
                          final Function1<StateDep, Boolean> _function_10 = (StateDep it) -> {
                            Event _evento = it.getEvento();
                            return Boolean.valueOf(Objects.equal(_evento, act_2));
                          };
                          Iterable<StateDep> _filter_10 = IterableExtensions.<StateDep>filter(m.getDipendenze(), _function_10);
                          for(final StateDep dip_4 : _filter_10) {
                            {
                              boolean _isTr_5 = dip_4.isTr();
                              if (_isTr_5) {
                                String _name_141 = dip_4.getStat().getName();
                                String _plus_195 = (("&amp;&amp; " + "S") + _name_141);
                                String _plus_196 = (_plus_195 + "==1");
                                _builder.append(_plus_196);
                              }
                            }
                            {
                              boolean _isFl_5 = dip_4.isFl();
                              if (_isFl_5) {
                                String _name_142 = dip_4.getStat().getName();
                                String _plus_197 = ((" &amp;&amp; " + "S") + _name_142);
                                String _plus_198 = (_plus_197 + "==0");
                                _builder.append(_plus_198);
                              }
                            }
                          }
                        }
                        _builder.append("</label>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("</transition>");
                        _builder.newLine();
                        _builder.append(" ");
                        _builder.newLine();
                        _builder.append("<transition");
                        {
                          boolean _isControllable_11 = ag_3.isControllable();
                          boolean _not_17 = (!_isControllable_11);
                          if (_not_17) {
                            _builder.append(" controllable=\"false\" ");
                          }
                        }
                        _builder.append(">");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<source ref=\"");
                        String _name_143 = act_2.getName();
                        String _plus_199 = ("doing_" + _name_143);
                        String _plus_200 = (_plus_199 + "_in_");
                        String _name_144 = loc_2.getName();
                        String _plus_201 = (_plus_200 + _name_144);
                        _builder.append(_plus_201);
                        _builder.append("\"/>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<target ref=\"");
                        String _name_145 = loc_2.getName();
                        _builder.append(_name_145);
                        _builder.append("\"/>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<label kind=\"synchronisation\">");
                        String _name_146 = act_2.getName();
                        String _plus_202 = (_name_146 + "DONE");
                        String _plus_203 = (_plus_202 + "!");
                        _builder.append(_plus_203);
                        _builder.append("</label>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<label kind=\"assignment\"> ");
                        String _name_147 = ag_3.getName();
                        String _plus_204 = ("C" + _name_147);
                        _builder.append(_plus_204);
                        _builder.append(" =0, ");
                        String _name_148 = ag_3.getName();
                        String _plus_205 = ("P" + _name_148);
                        _builder.append(_plus_205);
                        _builder.append("=");
                        int _indexOf_20 = m.getLocations().indexOf(loc_2);
                        int _plus_206 = (_indexOf_20 + 1);
                        _builder.append(_plus_206);
                        _builder.append(" </label>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<label kind=\"guard\"> ");
                        String _name_149 = ag_3.getName();
                        String _plus_207 = ("C" + _name_149);
                        _builder.append(_plus_207);
                        _builder.append(" &gt; ");
                        int _duration_5 = act_2.getDuration();
                        _builder.append(_duration_5);
                        {
                          String _name_150 = act_2.getName();
                          String _plus_208 = (_name_150 + "DONE");
                          boolean _are_there_blocks_7 = le_regole.are_there_blocks(_plus_208);
                          if (_are_there_blocks_7) {
                            _builder.append(" &amp;&amp; ");
                          }
                        }
                        _builder.append(" ");
                        {
                          String _name_151 = act_2.getName();
                          String _plus_209 = (_name_151 + "DONE");
                          List<List<String>> _action_blocks_7 = le_regole.action_blocks(_plus_209);
                          boolean _hasElements_26 = false;
                          for(final List<String> block_7 : _action_blocks_7) {
                            if (!_hasElements_26) {
                              _hasElements_26 = true;
                            } else {
                              _builder.appendImmediate(" &amp;&amp; ", "");
                            }
                            _builder.append(" ( ");
                            {
                              boolean _hasElements_27 = false;
                              for(final String rulla_7 : block_7) {
                                if (!_hasElements_27) {
                                  _hasElements_27 = true;
                                } else {
                                  _builder.appendImmediate(" || ", "");
                                }
                                _builder.append(rulla_7);
                              }
                            }
                            _builder.append(" ) ");
                          }
                        }
                        _builder.append("</label>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("</transition>\t\t\t");
                        _builder.newLine();
                        _builder.append(" ");
                        _builder.newLine();
                      }
                    }
                    _builder.newLine();
                    {
                      boolean _isHas_duration_7 = act_2.isHas_duration();
                      boolean _not_18 = (!_isHas_duration_7);
                      if (_not_18) {
                        _builder.append("<transition");
                        {
                          boolean _isControllable_12 = ag_3.isControllable();
                          boolean _not_19 = (!_isControllable_12);
                          if (_not_19) {
                            _builder.append(" controllable=\"false\" ");
                          }
                        }
                        _builder.append(">");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<source ref=\"");
                        String _name_152 = loc_2.getName();
                        _builder.append(_name_152);
                        _builder.append("\"/>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<target ref=\"");
                        String _name_153 = loc_2.getName();
                        _builder.append(_name_153);
                        _builder.append("\"/>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<label kind=\"synchronisation\">");
                        String _name_154 = act_2.getName();
                        String _plus_210 = (_name_154 + "!");
                        _builder.append(_plus_210);
                        _builder.append("</label>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<label kind=\"assignment\"> ");
                        String _name_155 = ag_3.getName();
                        String _plus_211 = ("C" + _name_155);
                        _builder.append(_plus_211);
                        _builder.append(" =0 </label>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<label kind=\"guard\">");
                        String _name_156 = ag_3.getName();
                        String _plus_212 = ("C" + _name_156);
                        _builder.append(_plus_212);
                        _builder.append(" &gt; 1");
                        {
                          boolean _isCollaborative_5 = act_2.isCollaborative();
                          if (_isCollaborative_5) {
                            _builder.append(" &amp;&amp; (");
                            {
                              final Function1<Agent, Boolean> _function_11 = (Agent it) -> {
                                return Boolean.valueOf(it.getReactions().contains(act_2));
                              };
                              Iterable<Agent> _filter_11 = IterableExtensions.<Agent>filter(m.getAgents(), _function_11);
                              boolean _hasElements_28 = false;
                              for(final Agent collaborator_5 : _filter_11) {
                                if (!_hasElements_28) {
                                  _hasElements_28 = true;
                                } else {
                                  _builder.appendImmediate(" || ", "");
                                }
                                String _name_157 = collaborator_5.getName();
                                String _plus_213 = ("P" + _name_157);
                                String _plus_214 = (_plus_213 + "==");
                                int _indexOf_21 = m.getLocations().indexOf(loc_2);
                                int _plus_215 = (_indexOf_21 + 1);
                                String _plus_216 = (_plus_214 + Integer.valueOf(_plus_215));
                                _builder.append(_plus_216);
                              }
                            }
                            _builder.append(")");
                          }
                        }
                        {
                          boolean _are_there_blocks_8 = le_regole.are_there_blocks(act_2.getName());
                          if (_are_there_blocks_8) {
                            _builder.append(" &amp;&amp; ");
                          }
                        }
                        _builder.append("  ");
                        {
                          List<List<String>> _action_blocks_8 = le_regole.action_blocks(act_2.getName());
                          boolean _hasElements_29 = false;
                          for(final List<String> block_8 : _action_blocks_8) {
                            if (!_hasElements_29) {
                              _hasElements_29 = true;
                            } else {
                              _builder.appendImmediate(" &amp;&amp; ", "");
                            }
                            _builder.append(" ( ");
                            {
                              boolean _hasElements_30 = false;
                              for(final String rulla_8 : block_8) {
                                if (!_hasElements_30) {
                                  _hasElements_30 = true;
                                } else {
                                  _builder.appendImmediate(" || ", "");
                                }
                                _builder.append(rulla_8);
                              }
                            }
                            _builder.append(" ) ");
                          }
                        }
                        {
                          final Function1<StateDep, Boolean> _function_12 = (StateDep it) -> {
                            Event _evento = it.getEvento();
                            return Boolean.valueOf(Objects.equal(_evento, act_2));
                          };
                          Iterable<StateDep> _filter_12 = IterableExtensions.<StateDep>filter(m.getDipendenze(), _function_12);
                          for(final StateDep dip_5 : _filter_12) {
                            {
                              boolean _isTr_6 = dip_5.isTr();
                              if (_isTr_6) {
                                String _name_158 = dip_5.getStat().getName();
                                String _plus_217 = (("&amp;&amp; " + "S") + _name_158);
                                String _plus_218 = (_plus_217 + "==1");
                                _builder.append(_plus_218);
                              }
                            }
                            {
                              boolean _isFl_6 = dip_5.isFl();
                              if (_isFl_6) {
                                String _name_159 = dip_5.getStat().getName();
                                String _plus_219 = ((" &amp;&amp; " + "S") + _name_159);
                                String _plus_220 = (_plus_219 + "==0");
                                _builder.append(_plus_220);
                              }
                            }
                          }
                        }
                        _builder.append("</label>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("</transition>");
                        _builder.newLine();
                        _builder.append(" ");
                        _builder.newLine();
                      }
                    }
                  }
                }
                {
                  EList<connection> _connections_3 = m.getConnections();
                  for(final connection con : _connections_3) {
                    {
                      boolean _isHas_duration_8 = act_2.isHas_duration();
                      boolean _not_20 = (!_isHas_duration_8);
                      if (_not_20) {
                        _builder.append("<transition");
                        {
                          boolean _isControllable_13 = ag_3.isControllable();
                          boolean _not_21 = (!_isControllable_13);
                          if (_not_21) {
                            _builder.append(" controllable=\"false\" ");
                          }
                        }
                        _builder.append(">");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<source ref=\"");
                        String _name_160 = con.getPdi1().getName();
                        String _plus_221 = ("going_" + _name_160);
                        String _plus_222 = (_plus_221 + "_to_");
                        String _name_161 = con.getPdi2().getName();
                        String _plus_223 = (_plus_222 + _name_161);
                        _builder.append(_plus_223);
                        _builder.append("\"/>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<target ref=\"");
                        String _name_162 = con.getPdi1().getName();
                        String _plus_224 = ("going_" + _name_162);
                        String _plus_225 = (_plus_224 + "_to_");
                        String _name_163 = con.getPdi2().getName();
                        String _plus_226 = (_plus_225 + _name_163);
                        _builder.append(_plus_226);
                        _builder.append("\"/>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<label kind=\"synchronisation\">");
                        String _name_164 = act_2.getName();
                        String _plus_227 = (_name_164 + "!");
                        _builder.append(_plus_227);
                        _builder.append("</label>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<label kind=\"guard\">");
                        String _name_165 = ag_3.getName();
                        String _plus_228 = ("C" + _name_165);
                        _builder.append(_plus_228);
                        _builder.append(" &gt; 0");
                        {
                          boolean _isCollaborative_6 = act_2.isCollaborative();
                          if (_isCollaborative_6) {
                            _builder.append(" &amp;&amp; (");
                            {
                              final Function1<Agent, Boolean> _function_13 = (Agent it) -> {
                                return Boolean.valueOf(it.getReactions().contains(act_2));
                              };
                              Iterable<Agent> _filter_13 = IterableExtensions.<Agent>filter(m.getAgents(), _function_13);
                              boolean _hasElements_31 = false;
                              for(final Agent collaborator_6 : _filter_13) {
                                if (!_hasElements_31) {
                                  _hasElements_31 = true;
                                } else {
                                  _builder.appendImmediate(" || ", "");
                                }
                                String _name_166 = collaborator_6.getName();
                                String _plus_229 = ("P" + _name_166);
                                String _plus_230 = (_plus_229 + "==");
                                String _plus_231 = (_plus_230 + "-");
                                int _indexOf_22 = m.getLocations().indexOf(con.getPdi2());
                                int _plus_232 = (_indexOf_22 + 1);
                                String _plus_233 = (_plus_231 + Integer.valueOf(_plus_232));
                                int _indexOf_23 = m.getLocations().indexOf(con.getPdi1());
                                int _plus_234 = (_indexOf_23 + 1);
                                String _plus_235 = (_plus_233 + Integer.valueOf(_plus_234));
                                _builder.append(_plus_235);
                              }
                            }
                            _builder.append(")");
                          }
                        }
                        {
                          boolean _are_there_blocks_9 = le_regole.are_there_blocks(act_2.getName());
                          if (_are_there_blocks_9) {
                            _builder.append(" &amp;&amp; ");
                          }
                        }
                        _builder.append("  ");
                        {
                          List<List<String>> _action_blocks_9 = le_regole.action_blocks(act_2.getName());
                          boolean _hasElements_32 = false;
                          for(final List<String> block_9 : _action_blocks_9) {
                            if (!_hasElements_32) {
                              _hasElements_32 = true;
                            } else {
                              _builder.appendImmediate(" &amp;&amp; ", "");
                            }
                            _builder.append(" ( ");
                            {
                              boolean _hasElements_33 = false;
                              for(final String rulla_9 : block_9) {
                                if (!_hasElements_33) {
                                  _hasElements_33 = true;
                                } else {
                                  _builder.appendImmediate(" || ", "");
                                }
                                _builder.append(rulla_9);
                              }
                            }
                            _builder.append(" ) ");
                          }
                        }
                        {
                          final Function1<StateDep, Boolean> _function_14 = (StateDep it) -> {
                            Event _evento = it.getEvento();
                            return Boolean.valueOf(Objects.equal(_evento, act_2));
                          };
                          Iterable<StateDep> _filter_14 = IterableExtensions.<StateDep>filter(m.getDipendenze(), _function_14);
                          for(final StateDep dip_6 : _filter_14) {
                            {
                              boolean _isTr_7 = dip_6.isTr();
                              if (_isTr_7) {
                                String _name_167 = dip_6.getStat().getName();
                                String _plus_236 = (("&amp;&amp; " + "S") + _name_167);
                                String _plus_237 = (_plus_236 + "==1");
                                _builder.append(_plus_237);
                              }
                            }
                            {
                              boolean _isFl_7 = dip_6.isFl();
                              if (_isFl_7) {
                                String _name_168 = dip_6.getStat().getName();
                                String _plus_238 = ((" &amp;&amp; " + "S") + _name_168);
                                String _plus_239 = (_plus_238 + "==0");
                                _builder.append(_plus_239);
                              }
                            }
                          }
                        }
                        _builder.append("</label>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("</transition>");
                        _builder.newLine();
                        _builder.newLine();
                        _builder.append("<transition");
                        {
                          boolean _isControllable_14 = ag_3.isControllable();
                          boolean _not_22 = (!_isControllable_14);
                          if (_not_22) {
                            _builder.append(" controllable=\"false\" ");
                          }
                        }
                        _builder.append(">");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<source ref=\"");
                        String _name_169 = con.getPdi2().getName();
                        String _plus_240 = ("going_" + _name_169);
                        String _plus_241 = (_plus_240 + "_to_");
                        String _name_170 = con.getPdi1().getName();
                        String _plus_242 = (_plus_241 + _name_170);
                        _builder.append(_plus_242);
                        _builder.append("\"/>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<target ref=\"");
                        String _name_171 = con.getPdi2().getName();
                        String _plus_243 = ("going_" + _name_171);
                        String _plus_244 = (_plus_243 + "_to_");
                        String _name_172 = con.getPdi1().getName();
                        String _plus_245 = (_plus_244 + _name_172);
                        _builder.append(_plus_245);
                        _builder.append("\"/>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<label kind=\"synchronisation\">");
                        String _name_173 = act_2.getName();
                        String _plus_246 = (_name_173 + "!");
                        _builder.append(_plus_246);
                        _builder.append("</label>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<label kind=\"guard\">");
                        String _name_174 = ag_3.getName();
                        String _plus_247 = ("C" + _name_174);
                        _builder.append(_plus_247);
                        _builder.append(" &gt; 0");
                        {
                          boolean _isCollaborative_7 = act_2.isCollaborative();
                          if (_isCollaborative_7) {
                            _builder.append(" &amp;&amp; (");
                            {
                              final Function1<Agent, Boolean> _function_15 = (Agent it) -> {
                                return Boolean.valueOf(it.getReactions().contains(act_2));
                              };
                              Iterable<Agent> _filter_15 = IterableExtensions.<Agent>filter(m.getAgents(), _function_15);
                              boolean _hasElements_34 = false;
                              for(final Agent collaborator_7 : _filter_15) {
                                if (!_hasElements_34) {
                                  _hasElements_34 = true;
                                } else {
                                  _builder.appendImmediate(" || ", "");
                                }
                                String _name_175 = collaborator_7.getName();
                                String _plus_248 = ("P" + _name_175);
                                String _plus_249 = (_plus_248 + "==");
                                String _plus_250 = (_plus_249 + "-");
                                int _indexOf_24 = m.getLocations().indexOf(con.getPdi1());
                                int _plus_251 = (_indexOf_24 + 1);
                                String _plus_252 = (_plus_250 + Integer.valueOf(_plus_251));
                                int _indexOf_25 = m.getLocations().indexOf(con.getPdi2());
                                int _plus_253 = (_indexOf_25 + 1);
                                String _plus_254 = (_plus_252 + Integer.valueOf(_plus_253));
                                _builder.append(_plus_254);
                              }
                            }
                            _builder.append(")");
                          }
                        }
                        {
                          boolean _are_there_blocks_10 = le_regole.are_there_blocks(act_2.getName());
                          if (_are_there_blocks_10) {
                            _builder.append(" &amp;&amp; ");
                          }
                        }
                        _builder.append("  ");
                        {
                          List<List<String>> _action_blocks_10 = le_regole.action_blocks(act_2.getName());
                          boolean _hasElements_35 = false;
                          for(final List<String> block_10 : _action_blocks_10) {
                            if (!_hasElements_35) {
                              _hasElements_35 = true;
                            } else {
                              _builder.appendImmediate(" &amp;&amp; ", "");
                            }
                            _builder.append(" ( ");
                            {
                              boolean _hasElements_36 = false;
                              for(final String rulla_10 : block_10) {
                                if (!_hasElements_36) {
                                  _hasElements_36 = true;
                                } else {
                                  _builder.appendImmediate(" || ", "");
                                }
                                _builder.append(rulla_10);
                              }
                            }
                            _builder.append(" ) ");
                          }
                        }
                        {
                          final Function1<StateDep, Boolean> _function_16 = (StateDep it) -> {
                            Event _evento = it.getEvento();
                            return Boolean.valueOf(Objects.equal(_evento, act_2));
                          };
                          Iterable<StateDep> _filter_16 = IterableExtensions.<StateDep>filter(m.getDipendenze(), _function_16);
                          for(final StateDep dip_7 : _filter_16) {
                            {
                              boolean _isTr_8 = dip_7.isTr();
                              if (_isTr_8) {
                                String _name_176 = dip_7.getStat().getName();
                                String _plus_255 = (("&amp;&amp; " + "S") + _name_176);
                                String _plus_256 = (_plus_255 + "==1");
                                _builder.append(_plus_256);
                              }
                            }
                            {
                              boolean _isFl_8 = dip_7.isFl();
                              if (_isFl_8) {
                                String _name_177 = dip_7.getStat().getName();
                                String _plus_257 = ((" &amp;&amp; " + "S") + _name_177);
                                String _plus_258 = (_plus_257 + "==0");
                                _builder.append(_plus_258);
                              }
                            }
                          }
                        }
                        _builder.append("</label>");
                        _builder.newLineIfNotEmpty();
                        _builder.append("</transition>");
                        _builder.newLine();
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append("\t");
        _builder.append("\t\t\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("</template>\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append(" ");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("objectives");
    _builder.newLine();
    _builder.newLine();
    {
      boolean _isHave_obj_1 = m.isHave_obj();
      if (_isHave_obj_1) {
        _builder.append("<template>");
        _builder.newLine();
        _builder.append("<name>obj</name>");
        _builder.newLine();
        _builder.newLine();
        _builder.append("//locations declaration");
        _builder.newLine();
        _builder.newLine();
        _builder.append("<location id = \"idle\">");
        _builder.newLine();
        _builder.append("<name>idle</name>");
        _builder.newLine();
        _builder.append("</location>");
        _builder.newLine();
        _builder.newLine();
        _builder.append("<location id = \"lose\">");
        _builder.newLine();
        _builder.append("<name>lose</name>");
        _builder.newLine();
        _builder.append("</location>\t\t");
        _builder.newLine();
        _builder.newLine();
        {
          boolean _isIs_if = m.getObjective().isIs_if();
          if (_isIs_if) {
            _builder.append("<location id = \"atRisk\">");
            _builder.newLine();
            _builder.append("<name>atRisk</name>");
            _builder.newLine();
            _builder.append("<label kind=\"invariant\"> Cobj &lt;= ");
            int _time = m.getObjective().getTime();
            _builder.append(_time);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("</location>\t");
            _builder.newLine();
          }
        }
        _builder.append("<init ref = \"idle\"/>\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("//transition declaration");
        _builder.newLine();
        _builder.append(" ");
        _builder.newLine();
        {
          boolean _isIs_if_1 = m.getObjective().isIs_if();
          if (_isIs_if_1) {
            _builder.append("<transition>");
            _builder.newLine();
            _builder.append("<source ref=\"idle\"/>");
            _builder.newLine();
            _builder.append("<target ref=\"atRisk\"/>");
            _builder.newLine();
            {
              boolean _isHas_duration_9 = m.getObjective().getCause().isHas_duration();
              if (_isHas_duration_9) {
                _builder.append("<label kind=\"synchronisation\">");
                String _name_178 = m.getObjective().getCause().getName();
                String _plus_259 = (_name_178 + "DONE");
                String _plus_260 = (_plus_259 + "?");
                _builder.append(_plus_260);
                _builder.append("</label>");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              boolean _isHas_duration_10 = m.getObjective().getCause().isHas_duration();
              boolean _not_23 = (!_isHas_duration_10);
              if (_not_23) {
                _builder.append("<label kind=\"synchronisation\">");
                String _name_179 = m.getObjective().getCause().getName();
                String _plus_261 = (_name_179 + "?");
                _builder.append(_plus_261);
                _builder.append("</label>");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("<label kind = \"assignment\">Cobj = 0</label>");
            _builder.newLine();
            _builder.append("</transition>");
            _builder.newLine();
            _builder.newLine();
            _builder.append("<transition>");
            _builder.newLine();
            _builder.append("<source ref=\"atRisk\"/>");
            _builder.newLine();
            _builder.append("<target ref=\"idle\"/>");
            _builder.newLine();
            {
              boolean _isHas_duration_11 = m.getObjective().getReaction().isHas_duration();
              if (_isHas_duration_11) {
                _builder.append("<label kind=\"synchronisation\">");
                String _name_180 = m.getObjective().getReaction().getName();
                String _plus_262 = (_name_180 + "DONE");
                String _plus_263 = (_plus_262 + "?");
                _builder.append(_plus_263);
                _builder.append("</label>");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              boolean _isHas_duration_12 = m.getObjective().getReaction().isHas_duration();
              boolean _not_24 = (!_isHas_duration_12);
              if (_not_24) {
                _builder.append("<label kind=\"synchronisation\">");
                String _name_181 = m.getObjective().getReaction().getName();
                String _plus_264 = (_name_181 + "?");
                _builder.append(_plus_264);
                _builder.append("</label>");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("</transition>\t\t\t\t");
            _builder.newLine();
            _builder.append("<transition>");
            _builder.newLine();
            _builder.append("<source ref=\"atRisk\"/>");
            _builder.newLine();
            _builder.append("<target ref=\"lose\"/>");
            _builder.newLine();
            _builder.append("</transition>\t\t\t\t");
            _builder.newLine();
          }
        }
        {
          boolean _isIs_avoid = m.getObjective().isIs_avoid();
          if (_isIs_avoid) {
            _builder.append("<transition>");
            _builder.newLine();
            _builder.append("<source ref=\"idle\"/>");
            _builder.newLine();
            _builder.append("<target ref=\"lose\"/>");
            _builder.newLine();
            {
              boolean _isHas_duration_13 = m.getObjective().getLose().isHas_duration();
              if (_isHas_duration_13) {
                _builder.append("<label kind=\"synchronisation\">");
                String _name_182 = m.getObjective().getLose().getName();
                String _plus_265 = (_name_182 + "DONE");
                String _plus_266 = (_plus_265 + "?");
                _builder.append(_plus_266);
                _builder.append("</label>");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              boolean _isHas_duration_14 = m.getObjective().getLose().isHas_duration();
              boolean _not_25 = (!_isHas_duration_14);
              if (_not_25) {
                _builder.append("<label kind=\"synchronisation\">");
                String _name_183 = m.getObjective().getLose().getName();
                String _plus_267 = (_name_183 + "?");
                _builder.append(_plus_267);
                _builder.append("</label>");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("</transition>");
            _builder.newLine();
          }
        }
        _builder.append("</template>");
        _builder.newLine();
      }
    }
    {
      boolean _isHave_reach_obj_1 = m.isHave_reach_obj();
      if (_isHave_reach_obj_1) {
        _builder.append("<template>");
        _builder.newLine();
        _builder.append("<name>reachObj</name>");
        _builder.newLine();
        _builder.append("//locations");
        _builder.newLine();
        _builder.newLine();
        _builder.append("<location id = \"initial_location\">");
        _builder.newLine();
        _builder.append("<name>initial_location</name>");
        _builder.newLine();
        _builder.append("</location>");
        _builder.newLine();
        _builder.append("<location id = \"unlocked\">");
        _builder.newLine();
        _builder.append("</location>");
        _builder.newLine();
        _builder.append("<location id = \"win\">");
        _builder.newLine();
        _builder.append("<name>win</name>");
        _builder.newLine();
        _builder.append("</location>");
        _builder.newLine();
        _builder.append(" ");
        _builder.newLine();
        _builder.append("<init ref = \"initial_location\"/>\t");
        _builder.newLine();
        _builder.append(" ");
        _builder.newLine();
        _builder.append("//transitions");
        _builder.newLine();
        _builder.append("<transition>");
        _builder.newLine();
        _builder.append("<source ref=\"initial_location\"/>");
        _builder.newLine();
        _builder.append("<target ref=\"unlocked\"/>");
        _builder.newLine();
        _builder.append("<label kind = \"guard\">Creach &gt; ");
        int _life_span = m.getReachobjective().getLife_span();
        _builder.append(_life_span);
        _builder.append("</label>");
        _builder.newLineIfNotEmpty();
        _builder.append("</transition>\t");
        _builder.newLine();
        _builder.newLine();
        _builder.append("<transition>");
        _builder.newLine();
        _builder.append("<source ref=\"unlocked\"/>");
        _builder.newLine();
        _builder.append("<target ref=\"win\"/>");
        _builder.newLine();
        {
          boolean _isHas_duration_15 = m.getReachobjective().getGoal().isHas_duration();
          if (_isHas_duration_15) {
            _builder.append("<label kind=\"synchronisation\">");
            String _name_184 = m.getReachobjective().getGoal().getName();
            String _plus_268 = (_name_184 + "DONE");
            String _plus_269 = (_plus_268 + "?");
            _builder.append(_plus_269);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isHas_duration_16 = m.getReachobjective().getGoal().isHas_duration();
          boolean _not_26 = (!_isHas_duration_16);
          if (_not_26) {
            _builder.append("<label kind=\"synchronisation\">");
            String _name_185 = m.getReachobjective().getGoal().getName();
            String _plus_270 = (_name_185 + "?");
            _builder.append(_plus_270);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("</transition>");
        _builder.newLine();
        _builder.newLine();
        _builder.append("</template>");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//in questo momento bugga se non ci sono regole");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<system>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("system ");
    {
      boolean _isEmpty_3 = m.getStati().isEmpty();
      boolean _not_27 = (!_isEmpty_3);
      if (_not_27) {
        _builder.append(" states,");
      }
    }
    _builder.append(" ");
    {
      EList<Agent> _agents_3 = m.getAgents();
      boolean _hasElements_37 = false;
      for(final Agent ag_4 : _agents_3) {
        if (!_hasElements_37) {
          _hasElements_37 = true;
        } else {
          _builder.appendImmediate(", ", "\t");
        }
        String _name_186 = ag_4.getName();
        _builder.append(_name_186, "\t");
      }
    }
    {
      boolean _isHave_obj_2 = m.isHave_obj();
      if (_isHave_obj_2) {
        _builder.append(", obj");
      }
    }
    {
      boolean _isHave_reach_obj_2 = m.isHave_reach_obj();
      if (_isHave_reach_obj_2) {
        _builder.append(" ,reachObj ");
      }
    }
    _builder.append(" ");
    {
      EList<Regola> _regole_2 = m.getRegole();
      for(final Regola rule_2 : _regole_2) {
        _builder.append(", ");
        String _name_187 = rule_2.getName();
        _builder.append(_name_187, "\t");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</system>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</nta>");
    _builder.newLine();
    return _builder;
  }
  
  public boolean is_location_here(final Pdi[] locations, final String loc) {
    boolean flag = false;
    return flag;
  }
  
  public boolean is_event_here(final Regola r, final String event) {
    boolean flag1 = false;
    boolean flag2 = false;
    boolean _isIs_seq1 = r.isIs_seq1();
    if (_isIs_seq1) {
      flag1 = this.is_event_here_2(r.getFirst_seq(), event);
    } else {
      flag1 = event.equals(r.getFirst_ev().getName());
    }
    boolean _isIs_seq2 = r.isIs_seq2();
    if (_isIs_seq2) {
      flag2 = this.is_event_here_2(r.getSecond_seq(), event);
    } else {
      flag2 = event.equals(r.getSecond_ev().getName());
    }
    return (flag1 || flag2);
  }
  
  public boolean is_event_here_2(final Sequence s, final String event) {
    boolean flag1 = false;
    boolean flag2 = false;
    boolean _isIs_seq1 = s.isIs_seq1();
    if (_isIs_seq1) {
      flag1 = this.is_event_here_2(s.getFirst_seq(), event);
    } else {
      flag1 = event.equals(s.getFirst_ev().getName());
    }
    boolean _isIs_seq2 = s.isIs_seq2();
    if (_isIs_seq2) {
      flag2 = this.is_event_here_2(s.getSecond_seq(), event);
    } else {
      flag2 = event.equals(s.getSecond_ev().getName());
    }
    return (flag1 || flag2);
  }
  
  public CharSequence print_rule_events(final Regola r) {
    StringConcatenation _builder = new StringConcatenation();
    set_of_actions azioni_dichiarate = new set_of_actions();
    _builder.newLineIfNotEmpty();
    {
      boolean _isIs_seq1 = r.isIs_seq1();
      if (_isIs_seq1) {
        CharSequence _print_sequence_events = this.print_sequence_events(r, r.getFirst_seq(), azioni_dichiarate);
        _builder.append(_print_sequence_events);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (((!r.isIs_seq1()) && (!azioni_dichiarate.is_there(r.getFirst_ev().getName())))) {
        _builder.append("chan ");
        String _name = r.getName();
        String _plus = (_name + "_");
        String _name_1 = r.getFirst_ev().getName();
        String _plus_1 = (_plus + _name_1);
        _builder.append(_plus_1);
        {
          boolean _isHas_duration = r.getFirst_ev().isHas_duration();
          if (_isHas_duration) {
            _builder.append(", ");
            String _name_2 = r.getName();
            String _plus_2 = (_name_2 + "_");
            String _name_3 = r.getFirst_ev().getName();
            String _plus_3 = (_plus_2 + _name_3);
            String _plus_4 = (_plus_3 + "DONE");
            _builder.append(_plus_4);
          }
        }
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        azioni_dichiarate.add_action(r.getFirst_ev().getName());
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isIs_seq2 = r.isIs_seq2();
      if (_isIs_seq2) {
        CharSequence _print_sequence_events_1 = this.print_sequence_events(r, r.getSecond_seq(), azioni_dichiarate);
        _builder.append(_print_sequence_events_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (((!r.isIs_seq2()) && (!azioni_dichiarate.is_there(r.getSecond_ev().getName())))) {
        _builder.append("chan ");
        String _name_4 = r.getName();
        String _plus_5 = (_name_4 + "_");
        String _name_5 = r.getSecond_ev().getName();
        String _plus_6 = (_plus_5 + _name_5);
        _builder.append(_plus_6);
        {
          boolean _isHas_duration_1 = r.getSecond_ev().isHas_duration();
          if (_isHas_duration_1) {
            _builder.append(", ");
            String _name_6 = r.getName();
            String _plus_7 = (_name_6 + "_");
            String _name_7 = r.getSecond_ev().getName();
            String _plus_8 = (_plus_7 + _name_7);
            String _plus_9 = (_plus_8 + "DONE");
            _builder.append(_plus_9);
          }
        }
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        azioni_dichiarate.add_action(r.getFirst_ev().getName());
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence print_sequence_events(final Regola r, final Sequence s, final set_of_actions azioni_dichiarate) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isIs_seq1 = s.isIs_seq1();
      if (_isIs_seq1) {
        Object _print_sequence_events = this.print_sequence_events(r, s.getFirst_seq(), azioni_dichiarate);
        _builder.append(_print_sequence_events);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (((!s.isIs_seq1()) && (!azioni_dichiarate.is_there(s.getFirst_ev().getName())))) {
        _builder.append("chan ");
        String _name = r.getName();
        String _plus = (_name + "_");
        String _name_1 = s.getFirst_ev().getName();
        String _plus_1 = (_plus + _name_1);
        _builder.append(_plus_1);
        {
          boolean _isHas_duration = s.getFirst_ev().isHas_duration();
          if (_isHas_duration) {
            _builder.append(", ");
            String _name_2 = r.getName();
            String _plus_2 = (_name_2 + "_");
            String _name_3 = s.getFirst_ev().getName();
            String _plus_3 = (_plus_2 + _name_3);
            String _plus_4 = (_plus_3 + "DONE");
            _builder.append(_plus_4);
          }
        }
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        azioni_dichiarate.add_action(s.getFirst_ev().getName());
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      boolean _isIs_seq2 = s.isIs_seq2();
      if (_isIs_seq2) {
        Object _print_sequence_events_1 = this.print_sequence_events(r, s.getSecond_seq(), azioni_dichiarate);
        _builder.append(_print_sequence_events_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      if (((!s.isIs_seq2()) && (!azioni_dichiarate.is_there(s.getSecond_ev().getName())))) {
        _builder.append("chan ");
        String _name_4 = r.getName();
        String _plus_5 = (_name_4 + "_");
        String _name_5 = s.getSecond_ev().getName();
        String _plus_6 = (_plus_5 + _name_5);
        _builder.append(_plus_6);
        {
          boolean _isHas_duration_1 = s.getSecond_ev().isHas_duration();
          if (_isHas_duration_1) {
            _builder.append(", ");
            String _name_6 = r.getName();
            String _plus_7 = (_name_6 + "_");
            String _name_7 = s.getSecond_ev().getName();
            String _plus_8 = (_plus_7 + _name_7);
            String _plus_9 = (_plus_8 + "DONE");
            _builder.append(_plus_9);
          }
        }
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        azioni_dichiarate.add_action(s.getSecond_ev().getName());
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence print_rule_states(final Regola r, final ruler le_regole) {
    StringConcatenation _builder = new StringConcatenation();
    int layer = 0;
    _builder.newLineIfNotEmpty();
    _builder.append("<location id=\"");
    String _name = r.getName();
    String _plus = (_name + "_initial_location");
    _builder.append(_plus);
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("</location>");
    _builder.newLine();
    String _name_1 = r.getName();
    String _plus_1 = (_name_1 + "_initial_location");
    le_regole.add_state_at_rule(_plus_1, r.getName());
    _builder.newLineIfNotEmpty();
    {
      boolean _isIs_seq1 = r.isIs_seq1();
      if (_isIs_seq1) {
        CharSequence _print_sequence_states = this.print_sequence_states(r, r.getFirst_seq(), layer, "f", le_regole);
        _builder.append(_print_sequence_states);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (((!r.isIs_seq1()) && r.getFirst_ev().isHas_duration())) {
        _builder.append("<location id=\"");
        String _name_2 = r.getName();
        String _string = Integer.valueOf(layer).toString();
        String _plus_2 = (_name_2 + _string);
        String _plus_3 = (_plus_2 + "f");
        String _plus_4 = (_plus_3 + "_doing_");
        String _name_3 = r.getFirst_ev().getName();
        String _plus_5 = (_plus_4 + _name_3);
        _builder.append(_plus_5);
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("</location>");
        _builder.newLine();
        String _name_4 = r.getName();
        String _string_1 = Integer.valueOf(layer).toString();
        String _plus_6 = (_name_4 + _string_1);
        String _plus_7 = (_plus_6 + "f");
        String _plus_8 = (_plus_7 + "_doing_");
        String _name_5 = r.getFirst_ev().getName();
        String _plus_9 = (_plus_8 + _name_5);
        le_regole.add_state_at_rule(_plus_9, r.getName());
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isThen = r.isThen();
      if (_isThen) {
        _builder.append("<location id=\"");
        String _name_6 = r.getName();
        String _plus_10 = (_name_6 + Integer.valueOf(layer));
        _builder.append(_plus_10);
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("</location>");
        _builder.newLine();
        String _name_7 = r.getName();
        String _plus_11 = (_name_7 + Integer.valueOf(layer));
        le_regole.add_state_at_rule(_plus_11, r.getName());
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      boolean _isIs_seq2 = r.isIs_seq2();
      if (_isIs_seq2) {
        CharSequence _print_sequence_states_1 = this.print_sequence_states(r, r.getSecond_seq(), layer, "s", le_regole);
        _builder.append(_print_sequence_states_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (((!r.isIs_seq2()) && r.getSecond_ev().isHas_duration())) {
        _builder.append("<location id=\"");
        String _name_8 = r.getName();
        String _string_2 = Integer.valueOf(layer).toString();
        String _plus_12 = (_name_8 + _string_2);
        String _plus_13 = (_plus_12 + "s");
        String _plus_14 = (_plus_13 + "_doing_");
        String _name_9 = r.getSecond_ev().getName();
        String _plus_15 = (_plus_14 + _name_9);
        _builder.append(_plus_15);
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("</location>");
        _builder.newLine();
        String _name_10 = r.getName();
        String _string_3 = Integer.valueOf(layer).toString();
        String _plus_16 = (_name_10 + _string_3);
        String _plus_17 = (_plus_16 + "s");
        String _plus_18 = (_plus_17 + "_doing_");
        String _name_11 = r.getSecond_ev().getName();
        String _plus_19 = (_plus_18 + _name_11);
        le_regole.add_state_at_rule(_plus_19, r.getName());
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence print_sequence_states(final Regola r, final Sequence s, final int layer, final String side, final ruler le_regole) {
    StringConcatenation _builder = new StringConcatenation();
    int layer_now = (layer + 1);
    _builder.newLineIfNotEmpty();
    {
      boolean _isIs_seq1 = s.isIs_seq1();
      if (_isIs_seq1) {
        Object _print_sequence_states = this.print_sequence_states(r, s.getFirst_seq(), layer_now, (side + "f"), le_regole);
        _builder.append(_print_sequence_states);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (((!s.isIs_seq1()) && s.getFirst_ev().isHas_duration())) {
        _builder.append("<location id=\"");
        String _name = r.getName();
        String _string = Integer.valueOf(layer_now).toString();
        String _plus = (_name + _string);
        String _plus_1 = (_plus + side);
        String _plus_2 = (_plus_1 + "_fir_doing_");
        String _name_1 = s.getFirst_ev().getName();
        String _plus_3 = (_plus_2 + _name_1);
        _builder.append(_plus_3);
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("</location>");
        _builder.newLine();
        String _name_2 = r.getName();
        String _string_1 = Integer.valueOf(layer_now).toString();
        String _plus_4 = (_name_2 + _string_1);
        String _plus_5 = (_plus_4 + side);
        String _plus_6 = (_plus_5 + "_fir_doing_");
        String _name_3 = s.getFirst_ev().getName();
        String _plus_7 = (_plus_6 + _name_3);
        le_regole.add_state_at_rule(_plus_7, r.getName());
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      boolean _isThen = s.isThen();
      if (_isThen) {
        _builder.append("<location id=\"");
        String _name_4 = r.getName();
        String _string_2 = Integer.valueOf(layer_now).toString();
        String _plus_8 = (_name_4 + _string_2);
        String _plus_9 = (_plus_8 + side);
        _builder.append(_plus_9);
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("</location>");
        _builder.newLine();
        String _name_5 = r.getName();
        String _string_3 = Integer.valueOf(layer_now).toString();
        String _plus_10 = (_name_5 + _string_3);
        String _plus_11 = (_plus_10 + side);
        le_regole.add_state_at_rule(_plus_11, r.getName());
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isIs_seq2 = s.isIs_seq2();
      if (_isIs_seq2) {
        Object _print_sequence_states_1 = this.print_sequence_states(r, s.getSecond_seq(), layer_now, (side + "s"), le_regole);
        _builder.append(_print_sequence_states_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if (((!s.isIs_seq2()) && s.getSecond_ev().isHas_duration())) {
        _builder.append("<location id=\"");
        String _name_6 = r.getName();
        String _string_4 = Integer.valueOf(layer_now).toString();
        String _plus_12 = (_name_6 + _string_4);
        String _plus_13 = (_plus_12 + side);
        String _plus_14 = (_plus_13 + "_sec_doing_");
        String _name_7 = s.getSecond_ev().getName();
        String _plus_15 = (_plus_14 + _name_7);
        _builder.append(_plus_15);
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("</location>");
        _builder.newLine();
        String _name_8 = r.getName();
        String _string_5 = Integer.valueOf(layer_now).toString();
        String _plus_16 = (_name_8 + _string_5);
        String _plus_17 = (_plus_16 + side);
        String _plus_18 = (_plus_17 + "_sec_doing_");
        String _name_9 = s.getSecond_ev().getName();
        String _plus_19 = (_plus_18 + _name_9);
        le_regole.add_state_at_rule(_plus_19, r.getName());
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence print_rule_transitions(final Regola r, final ruler le_regole) {
    StringConcatenation _builder = new StringConcatenation();
    int layer = 0;
    _builder.newLineIfNotEmpty();
    String _name = r.getName();
    String _plus = (_name + "_initial_location");
    strin last_state = new strin(_plus);
    _builder.newLineIfNotEmpty();
    String _name_1 = r.getName();
    String _plus_1 = (_name_1 + "_initial_location");
    strin next_state = new strin(_plus_1);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      boolean _isThen = r.isThen();
      if (_isThen) {
        String _name_2 = r.getName();
        String _string = Integer.valueOf(layer).toString();
        String _plus_2 = (_name_2 + _string);
        next_state.update(_plus_2);
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      boolean _isIs_seq1 = r.isIs_seq1();
      if (_isIs_seq1) {
        CharSequence _print_sequence_transitions = this.print_sequence_transitions(r, r.getFirst_seq(), layer, "f", last_state.ga, next_state.ga, le_regole);
        _builder.append(_print_sequence_transitions);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      boolean _isIs_seq1_1 = r.isIs_seq1();
      boolean _not = (!_isIs_seq1_1);
      if (_not) {
        {
          boolean _isHas_duration = r.getFirst_ev().isHas_duration();
          boolean _not_1 = (!_isHas_duration);
          if (_not_1) {
            _builder.append("<transition>");
            _builder.newLine();
            _builder.append("<source ref=\"");
            _builder.append(last_state.ga);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<target ref=\"");
            _builder.append(next_state.ga);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"synchronisation\">");
            String _name_3 = r.getFirst_ev().getName();
            String _plus_3 = (_name_3 + "?");
            _builder.append(_plus_3);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"assignment\">");
            String _name_4 = r.getName();
            String _plus_4 = ("P" + _name_4);
            _builder.append(_plus_4);
            _builder.append(" = ");
            int _indice = le_regole.regole.get(le_regole.indice(r.getName())).indice(next_state.ga);
            _builder.append(_indice);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("</transition>\t\t\t");
            _builder.newLine();
            le_regole.add_action_at_state_at_rule(r.getFirst_ev().getName(), last_state.ga, r.getName());
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isHas_duration_1 = r.getFirst_ev().isHas_duration();
          if (_isHas_duration_1) {
            _builder.append("<transition>");
            _builder.newLine();
            _builder.append("<source ref=\"");
            _builder.append(last_state.ga);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<target ref=\"");
            String _name_5 = r.getName();
            String _string_1 = Integer.valueOf(layer).toString();
            String _plus_5 = (_name_5 + _string_1);
            String _plus_6 = (_plus_5 + "f");
            String _plus_7 = (_plus_6 + "_doing_");
            String _name_6 = r.getFirst_ev().getName();
            String _plus_8 = (_plus_7 + _name_6);
            _builder.append(_plus_8);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"synchronisation\">");
            String _name_7 = r.getFirst_ev().getName();
            String _plus_9 = (_name_7 + "?");
            _builder.append(_plus_9);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"assignment\">");
            String _name_8 = r.getName();
            String _plus_10 = ("P" + _name_8);
            _builder.append(_plus_10);
            _builder.append(" = ");
            rule _get = le_regole.regole.get(le_regole.indice(r.getName()));
            String _name_9 = r.getName();
            String _string_2 = Integer.valueOf(layer).toString();
            String _plus_11 = (_name_9 + _string_2);
            String _plus_12 = (_plus_11 + "f");
            String _plus_13 = (_plus_12 + "_doing_");
            String _name_10 = r.getFirst_ev().getName();
            String _plus_14 = (_plus_13 + _name_10);
            int _indice_1 = _get.indice(_plus_14);
            _builder.append(_indice_1);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("</transition>\t");
            _builder.newLine();
            le_regole.add_action_at_state_at_rule(r.getFirst_ev().getName(), last_state.ga, r.getName());
            _builder.newLineIfNotEmpty();
            _builder.append("<transition>");
            _builder.newLine();
            _builder.append("<source ref=\"");
            String _name_11 = r.getName();
            String _string_3 = Integer.valueOf(layer).toString();
            String _plus_15 = (_name_11 + _string_3);
            String _plus_16 = (_plus_15 + "f");
            String _plus_17 = (_plus_16 + "_doing_");
            String _name_12 = r.getFirst_ev().getName();
            String _plus_18 = (_plus_17 + _name_12);
            _builder.append(_plus_18);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<target ref=\"");
            _builder.append(next_state.ga);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"synchronisation\">");
            String _name_13 = r.getFirst_ev().getName();
            String _plus_19 = (_name_13 + "DONE");
            String _plus_20 = (_plus_19 + "?");
            _builder.append(_plus_20);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"assignment\">");
            String _name_14 = r.getName();
            String _plus_21 = ("P" + _name_14);
            _builder.append(_plus_21);
            _builder.append(" = ");
            int _indice_2 = le_regole.regole.get(le_regole.indice(r.getName())).indice(next_state.ga);
            _builder.append(_indice_2);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("</transition>\t\t");
            _builder.newLine();
            String _name_15 = r.getFirst_ev().getName();
            String _plus_22 = (_name_15 + "DONE");
            String _name_16 = r.getName();
            String _string_4 = Integer.valueOf(layer).toString();
            String _plus_23 = (_name_16 + _string_4);
            String _plus_24 = (_plus_23 + "f");
            String _plus_25 = (_plus_24 + "_doing_");
            String _name_17 = r.getFirst_ev().getName();
            String _plus_26 = (_plus_25 + _name_17);
            le_regole.add_action_at_state_at_rule(_plus_22, _plus_26, r.getName());
            _builder.append("\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    {
      boolean _isThen_1 = r.isThen();
      if (_isThen_1) {
        String _name_18 = r.getName();
        String _string_5 = Integer.valueOf(layer).toString();
        String _plus_27 = (_name_18 + _string_5);
        last_state.update(_plus_27);
        _builder.newLineIfNotEmpty();
        String _name_19 = r.getName();
        String _plus_28 = (_name_19 + "_initial_location");
        next_state.update(_plus_28);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.newLine();
    {
      boolean _isIs_seq2 = r.isIs_seq2();
      if (_isIs_seq2) {
        CharSequence _print_sequence_transitions_1 = this.print_sequence_transitions(r, r.getSecond_seq(), layer, "s", last_state.ga, next_state.ga, le_regole);
        _builder.append(_print_sequence_transitions_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isIs_seq2_1 = r.isIs_seq2();
      boolean _not_2 = (!_isIs_seq2_1);
      if (_not_2) {
        {
          boolean _isHas_duration_2 = r.getSecond_ev().isHas_duration();
          boolean _not_3 = (!_isHas_duration_2);
          if (_not_3) {
            _builder.append("<transition>");
            _builder.newLine();
            _builder.append("<source ref=\"");
            _builder.append(last_state.ga);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<target ref=\"");
            _builder.append(next_state.ga);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"synchronisation\">");
            String _name_20 = r.getSecond_ev().getName();
            String _plus_29 = (_name_20 + "?");
            _builder.append(_plus_29);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"assignment\">");
            String _name_21 = r.getName();
            String _plus_30 = ("P" + _name_21);
            _builder.append(_plus_30);
            _builder.append(" = ");
            int _indice_3 = le_regole.regole.get(le_regole.indice(r.getName())).indice(next_state.ga);
            _builder.append(_indice_3);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("</transition>\t\t\t");
            _builder.newLine();
            le_regole.add_action_at_state_at_rule(r.getSecond_ev().getName(), last_state.ga, r.getName());
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isHas_duration_3 = r.getSecond_ev().isHas_duration();
          if (_isHas_duration_3) {
            _builder.append("<transition>");
            _builder.newLine();
            _builder.append("<source ref=\"");
            _builder.append(last_state.ga);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<target ref=\"");
            String _name_22 = r.getName();
            String _string_6 = Integer.valueOf(layer).toString();
            String _plus_31 = (_name_22 + _string_6);
            String _plus_32 = (_plus_31 + "s");
            String _plus_33 = (_plus_32 + "_doing_");
            String _name_23 = r.getSecond_ev().getName();
            String _plus_34 = (_plus_33 + _name_23);
            _builder.append(_plus_34);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"synchronisation\">");
            String _name_24 = r.getSecond_ev().getName();
            String _plus_35 = (_name_24 + "?");
            _builder.append(_plus_35);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"assignment\">");
            String _name_25 = r.getName();
            String _plus_36 = ("P" + _name_25);
            _builder.append(_plus_36);
            _builder.append(" = ");
            rule _get_1 = le_regole.regole.get(le_regole.indice(r.getName()));
            String _name_26 = r.getName();
            String _string_7 = Integer.valueOf(layer).toString();
            String _plus_37 = (_name_26 + _string_7);
            String _plus_38 = (_plus_37 + "s");
            String _plus_39 = (_plus_38 + "_doing_");
            String _name_27 = r.getSecond_ev().getName();
            String _plus_40 = (_plus_39 + _name_27);
            int _indice_4 = _get_1.indice(_plus_40);
            _builder.append(_indice_4);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("</transition>\t");
            _builder.newLine();
            le_regole.add_action_at_state_at_rule(r.getSecond_ev().getName(), last_state.ga, r.getName());
            _builder.newLineIfNotEmpty();
            _builder.append("<transition>");
            _builder.newLine();
            _builder.append("<source ref=\"");
            String _name_28 = r.getName();
            String _string_8 = Integer.valueOf(layer).toString();
            String _plus_41 = (_name_28 + _string_8);
            String _plus_42 = (_plus_41 + "s");
            String _plus_43 = (_plus_42 + "_doing_");
            String _name_29 = r.getSecond_ev().getName();
            String _plus_44 = (_plus_43 + _name_29);
            _builder.append(_plus_44);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<target ref=\"");
            _builder.append(next_state.ga);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"synchronisation\">");
            String _name_30 = r.getSecond_ev().getName();
            String _plus_45 = (_name_30 + "DONE");
            String _plus_46 = (_plus_45 + "?");
            _builder.append(_plus_46);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"assignment\">");
            String _name_31 = r.getName();
            String _plus_47 = ("P" + _name_31);
            _builder.append(_plus_47);
            _builder.append(" = ");
            int _indice_5 = le_regole.regole.get(le_regole.indice(r.getName())).indice(next_state.ga);
            _builder.append(_indice_5);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("</transition>\t");
            _builder.newLine();
            String _name_32 = r.getSecond_ev().getName();
            String _plus_48 = (_name_32 + "DONE");
            String _name_33 = r.getName();
            String _string_9 = Integer.valueOf(layer).toString();
            String _plus_49 = (_name_33 + _string_9);
            String _plus_50 = (_plus_49 + "s");
            String _plus_51 = (_plus_50 + "_doing_");
            String _name_34 = r.getSecond_ev().getName();
            String _plus_52 = (_plus_51 + _name_34);
            le_regole.add_action_at_state_at_rule(_plus_48, _plus_52, r.getName());
            _builder.append("\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence print_sequence_transitions(final Regola r, final Sequence s, final int layer, final String side, final String last_state, final String next_state, final ruler le_regole) {
    StringConcatenation _builder = new StringConcatenation();
    int layer_now = (layer + 1);
    _builder.newLineIfNotEmpty();
    strin next_state_now = new strin(next_state);
    _builder.newLineIfNotEmpty();
    strin last_state_now = new strin(last_state);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      boolean _isThen = s.isThen();
      if (_isThen) {
        String _name = r.getName();
        String _string = Integer.valueOf(layer_now).toString();
        String _plus = (_name + _string);
        String _plus_1 = (_plus + side);
        next_state_now.update(_plus_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      boolean _isIs_seq1 = s.isIs_seq1();
      if (_isIs_seq1) {
        CharSequence _print_sequence_transitions = this.print_sequence_transitions(r, s.getFirst_seq(), layer_now, (side + "f"), last_state_now.ga, next_state_now.ga, le_regole);
        _builder.append(_print_sequence_transitions);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      boolean _isIs_seq1_1 = s.isIs_seq1();
      boolean _not = (!_isIs_seq1_1);
      if (_not) {
        {
          boolean _isHas_duration = s.getFirst_ev().isHas_duration();
          boolean _not_1 = (!_isHas_duration);
          if (_not_1) {
            _builder.append("<transition>");
            _builder.newLine();
            _builder.append("<source ref=\"");
            _builder.append(last_state_now.ga);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<target ref=\"");
            _builder.append(next_state_now.ga);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"synchronisation\">");
            String _name_1 = s.getFirst_ev().getName();
            String _plus_2 = (_name_1 + "?");
            _builder.append(_plus_2);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"assignment\">");
            String _name_2 = r.getName();
            String _plus_3 = ("P" + _name_2);
            _builder.append(_plus_3);
            _builder.append(" = ");
            int _indice = le_regole.regole.get(le_regole.indice(r.getName())).indice(next_state_now.ga);
            _builder.append(_indice);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("</transition>\t\t\t");
            _builder.newLine();
            le_regole.add_action_at_state_at_rule(s.getFirst_ev().getName(), last_state_now.ga, r.getName());
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isHas_duration_1 = s.getFirst_ev().isHas_duration();
          if (_isHas_duration_1) {
            _builder.append("<transition>");
            _builder.newLine();
            _builder.append("<source ref=\"");
            _builder.append(last_state_now.ga);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<target ref=\"");
            String _name_3 = r.getName();
            String _string_1 = Integer.valueOf(layer_now).toString();
            String _plus_4 = (_name_3 + _string_1);
            String _plus_5 = (_plus_4 + side);
            String _plus_6 = (_plus_5 + "_fir_doing_");
            String _name_4 = s.getFirst_ev().getName();
            String _plus_7 = (_plus_6 + _name_4);
            _builder.append(_plus_7);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"synchronisation\">");
            String _name_5 = s.getFirst_ev().getName();
            String _plus_8 = (_name_5 + "?");
            _builder.append(_plus_8);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"assignment\">");
            String _name_6 = r.getName();
            String _plus_9 = ("P" + _name_6);
            _builder.append(_plus_9);
            _builder.append(" = ");
            rule _get = le_regole.regole.get(le_regole.indice(r.getName()));
            String _name_7 = r.getName();
            String _string_2 = Integer.valueOf(layer_now).toString();
            String _plus_10 = (_name_7 + _string_2);
            String _plus_11 = (_plus_10 + side);
            String _plus_12 = (_plus_11 + "_fir_doing_");
            String _name_8 = s.getFirst_ev().getName();
            String _plus_13 = (_plus_12 + _name_8);
            int _indice_1 = _get.indice(_plus_13);
            _builder.append(_indice_1);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("</transition>\t");
            _builder.newLine();
            le_regole.add_action_at_state_at_rule(s.getFirst_ev().getName(), last_state_now.ga, r.getName());
            _builder.newLineIfNotEmpty();
            _builder.append("<transition>");
            _builder.newLine();
            _builder.append("<source ref=\"");
            String _name_9 = r.getName();
            String _string_3 = Integer.valueOf(layer_now).toString();
            String _plus_14 = (_name_9 + _string_3);
            String _plus_15 = (_plus_14 + side);
            String _plus_16 = (_plus_15 + "_fir_doing_");
            String _name_10 = s.getFirst_ev().getName();
            String _plus_17 = (_plus_16 + _name_10);
            _builder.append(_plus_17);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<target ref=\"");
            _builder.append(next_state_now.ga);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"synchronisation\">");
            String _name_11 = s.getFirst_ev().getName();
            String _plus_18 = (_name_11 + "DONE");
            String _plus_19 = (_plus_18 + "?");
            _builder.append(_plus_19);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"assignment\">");
            String _name_12 = r.getName();
            String _plus_20 = ("P" + _name_12);
            _builder.append(_plus_20);
            _builder.append(" = ");
            int _indice_2 = le_regole.regole.get(le_regole.indice(r.getName())).indice(next_state_now.ga);
            _builder.append(_indice_2);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("</transition>\t\t\t");
            _builder.newLine();
            String _name_13 = s.getFirst_ev().getName();
            String _plus_21 = (_name_13 + "DONE");
            String _name_14 = r.getName();
            String _string_4 = Integer.valueOf(layer_now).toString();
            String _plus_22 = (_name_14 + _string_4);
            String _plus_23 = (_plus_22 + side);
            String _plus_24 = (_plus_23 + "_fir_doing_");
            String _name_15 = s.getFirst_ev().getName();
            String _plus_25 = (_plus_24 + _name_15);
            le_regole.add_action_at_state_at_rule(_plus_21, _plus_25, r.getName());
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      boolean _isThen_1 = s.isThen();
      if (_isThen_1) {
        String _name_16 = r.getName();
        String _string_5 = Integer.valueOf(layer_now).toString();
        String _plus_26 = (_name_16 + _string_5);
        String _plus_27 = (_plus_26 + side);
        last_state_now.update(_plus_27);
        _builder.newLineIfNotEmpty();
        next_state_now.update(next_state);
        _builder.append("\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      boolean _isIs_seq2 = s.isIs_seq2();
      if (_isIs_seq2) {
        CharSequence _print_sequence_transitions_1 = this.print_sequence_transitions(r, s.getSecond_seq(), layer_now, (side + "s"), last_state_now.ga, next_state_now.ga, le_regole);
        _builder.append(_print_sequence_transitions_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isIs_seq2_1 = s.isIs_seq2();
      boolean _not_2 = (!_isIs_seq2_1);
      if (_not_2) {
        {
          boolean _isHas_duration_2 = s.getSecond_ev().isHas_duration();
          boolean _not_3 = (!_isHas_duration_2);
          if (_not_3) {
            _builder.append("<transition>");
            _builder.newLine();
            _builder.append("<source ref=\"");
            _builder.append(last_state_now.ga);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<target ref=\"");
            _builder.append(next_state_now.ga);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"synchronisation\">");
            String _name_17 = s.getSecond_ev().getName();
            String _plus_28 = (_name_17 + "?");
            _builder.append(_plus_28);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"assignment\">");
            String _name_18 = r.getName();
            String _plus_29 = ("P" + _name_18);
            _builder.append(_plus_29);
            _builder.append(" = ");
            int _indice_3 = le_regole.regole.get(le_regole.indice(r.getName())).indice(next_state_now.ga);
            _builder.append(_indice_3);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("</transition>\t\t\t");
            _builder.newLine();
            le_regole.add_action_at_state_at_rule(s.getSecond_ev().getName(), last_state_now.ga, r.getName());
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isHas_duration_3 = s.getSecond_ev().isHas_duration();
          if (_isHas_duration_3) {
            _builder.append("<transition>");
            _builder.newLine();
            _builder.append("<source ref=\"");
            _builder.append(last_state_now.ga);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<target ref=\"");
            String _name_19 = r.getName();
            String _string_6 = Integer.valueOf(layer_now).toString();
            String _plus_30 = (_name_19 + _string_6);
            String _plus_31 = (_plus_30 + side);
            String _plus_32 = (_plus_31 + "_sec_doing_");
            String _name_20 = s.getSecond_ev().getName();
            String _plus_33 = (_plus_32 + _name_20);
            _builder.append(_plus_33);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"synchronisation\">");
            String _name_21 = s.getSecond_ev().getName();
            String _plus_34 = (_name_21 + "?");
            _builder.append(_plus_34);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"assignment\">");
            String _name_22 = r.getName();
            String _plus_35 = ("P" + _name_22);
            _builder.append(_plus_35);
            _builder.append(" = ");
            rule _get_1 = le_regole.regole.get(le_regole.indice(r.getName()));
            String _name_23 = r.getName();
            String _string_7 = Integer.valueOf(layer_now).toString();
            String _plus_36 = (_name_23 + _string_7);
            String _plus_37 = (_plus_36 + side);
            String _plus_38 = (_plus_37 + "_sec_doing_");
            String _name_24 = s.getSecond_ev().getName();
            String _plus_39 = (_plus_38 + _name_24);
            int _indice_4 = _get_1.indice(_plus_39);
            _builder.append(_indice_4);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("</transition>\t");
            _builder.newLine();
            le_regole.add_action_at_state_at_rule(s.getSecond_ev().getName(), last_state_now.ga, r.getName());
            _builder.newLineIfNotEmpty();
            _builder.append("<transition>");
            _builder.newLine();
            _builder.append("<source ref=\"");
            String _name_25 = r.getName();
            String _string_8 = Integer.valueOf(layer_now).toString();
            String _plus_40 = (_name_25 + _string_8);
            String _plus_41 = (_plus_40 + side);
            String _plus_42 = (_plus_41 + "_sec_doing_");
            String _name_26 = s.getSecond_ev().getName();
            String _plus_43 = (_plus_42 + _name_26);
            _builder.append(_plus_43);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<target ref=\"");
            _builder.append(next_state_now.ga);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"synchronisation\">");
            String _name_27 = s.getSecond_ev().getName();
            String _plus_44 = (_name_27 + "DONE");
            String _plus_45 = (_plus_44 + "?");
            _builder.append(_plus_45);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("<label kind=\"assignment\">");
            String _name_28 = r.getName();
            String _plus_46 = ("P" + _name_28);
            _builder.append(_plus_46);
            _builder.append(" = ");
            int _indice_5 = le_regole.regole.get(le_regole.indice(r.getName())).indice(next_state_now.ga);
            _builder.append(_indice_5);
            _builder.append("</label>");
            _builder.newLineIfNotEmpty();
            _builder.append("</transition>\t\t\t");
            _builder.newLine();
            String _name_29 = s.getSecond_ev().getName();
            String _plus_47 = (_name_29 + "DONE");
            String _name_30 = r.getName();
            String _string_9 = Integer.valueOf(layer_now).toString();
            String _plus_48 = (_name_30 + _string_9);
            String _plus_49 = (_plus_48 + side);
            String _plus_50 = (_plus_49 + "_sec_doing_");
            String _name_31 = s.getSecond_ev().getName();
            String _plus_51 = (_plus_50 + _name_31);
            le_regole.add_action_at_state_at_rule(_plus_47, _plus_51, r.getName());
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
}
