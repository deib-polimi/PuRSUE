/**
 * generated by Xtext 2.14.0
 */
package se.cth.generator;

import com.google.common.base.Objects;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import se.cth.generator.rule;
import se.cth.generator.state;

@SuppressWarnings("all")
public class ruler {
  public List<rule> regole;
  
  public ruler() {
    ArrayList<rule> _arrayList = new ArrayList<rule>();
    this.regole = _arrayList;
  }
  
  public int indice(final String rule_name) {
    int i = 0;
    boolean flag = false;
    boolean _isEmpty = this.regole.isEmpty();
    if (_isEmpty) {
      return (-1);
    }
    while (((i < this.regole.size()) && (!flag))) {
      boolean _equals = Objects.equal(this.regole.get(i).nome_regola, rule_name);
      if (_equals) {
        flag = true;
      } else {
        i++;
      }
    }
    if (flag) {
      return i;
    } else {
      return (-1);
    }
  }
  
  public List<List<String>> action_blocks(final String action) {
    List<List<String>> guardia = new ArrayList<List<String>>();
    for (final rule reg : this.regole) {
      {
        List<String> guardiola = new ArrayList<String>();
        for (final state stat : reg.lista_stati) {
          boolean _is_there = stat.is_there(action);
          if (_is_there) {
            int _indexOf = reg.lista_stati.indexOf(stat);
            String _plus = ((("P" + reg.nome_regola) + "==") + Integer.valueOf(_indexOf));
            guardiola.add(_plus);
          }
        }
        boolean _isEmpty = guardiola.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          guardia.add(guardiola);
        }
      }
    }
    return guardia;
  }
  
  public boolean are_there_blocks(final String action) {
    List<List<String>> temp = this.action_blocks(action);
    boolean _isEmpty = temp.isEmpty();
    if (_isEmpty) {
      return false;
    } else {
      return true;
    }
  }
  
  public void add_rule(final String name) {
    rule nuovo = new rule(name);
    this.regole.add(nuovo);
  }
  
  public void add_state_at_rule(final String state_name, final String rule_name) {
    int _indice = this.indice(rule_name);
    boolean _notEquals = (_indice != (-1));
    if (_notEquals) {
      this.regole.get(this.indice(rule_name)).add_state(state_name);
    }
  }
  
  public void add_action_at_state_at_rule(final String action_name, final String state_name, final String rule_name) {
    int _indice = this.indice(rule_name);
    boolean _notEquals = (_indice != (-1));
    if (_notEquals) {
      this.regole.get(this.indice(rule_name)).add_action_at(action_name, state_name);
    }
  }
  
  public CharSequence print_ruler() {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isEmpty = this.regole.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        {
          for(final rule rule : this.regole) {
            CharSequence _print_rule = rule.print_rule();
            _builder.append(_print_rule);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
}
