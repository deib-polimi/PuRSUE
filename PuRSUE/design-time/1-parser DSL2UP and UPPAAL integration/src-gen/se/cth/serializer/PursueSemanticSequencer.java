/*
 * generated by Xtext 2.14.0
 */
package se.cth.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import se.cth.pursue.Agent;
import se.cth.pursue.Event;
import se.cth.pursue.Model;
import se.cth.pursue.Objective;
import se.cth.pursue.Pdi;
import se.cth.pursue.PursuePackage;
import se.cth.pursue.ReachObjective;
import se.cth.pursue.Regola;
import se.cth.pursue.Sequence;
import se.cth.pursue.StateDep;
import se.cth.pursue.Stato;
import se.cth.pursue.connection;
import se.cth.services.PursueGrammarAccess;

@SuppressWarnings("all")
public class PursueSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PursueGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PursuePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PursuePackage.AGENT:
				sequence_Agent(context, (Agent) semanticObject); 
				return; 
			case PursuePackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case PursuePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case PursuePackage.OBJECTIVE:
				sequence_Objective(context, (Objective) semanticObject); 
				return; 
			case PursuePackage.PDI:
				sequence_Pdi(context, (Pdi) semanticObject); 
				return; 
			case PursuePackage.REACH_OBJECTIVE:
				sequence_ReachObjective(context, (ReachObjective) semanticObject); 
				return; 
			case PursuePackage.REGOLA:
				sequence_Regola(context, (Regola) semanticObject); 
				return; 
			case PursuePackage.SEQUENCE:
				sequence_Sequence(context, (Sequence) semanticObject); 
				return; 
			case PursuePackage.STATE_DEP:
				sequence_StateDep(context, (StateDep) semanticObject); 
				return; 
			case PursuePackage.STATO:
				sequence_Stato(context, (Stato) semanticObject); 
				return; 
			case PursuePackage.CONNECTION:
				sequence_connection(context, (connection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Agent returns Agent
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         controllable?='controllable'? 
	 *         (mobile?='mobile' speed=INT)? 
	 *         initial_location=[Pdi|ID] 
	 *         (actions+=[Event|ID] actions+=[Event|ID]*)? 
	 *         (reactions+=[Event|ID] reactions+=[Event|ID]*)?
	 *     )
	 */
	protected void sequence_Agent(ISerializationContext context, Agent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (name=STRING collaborative?='collaborative'? (location_specific?='location' location=[Pdi|ID])? (has_duration?='duration' duration=INT)?)
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 (locations+=Pdi* ((regole+=Regola+ stati+=Stato+) | stati+=Stato+)) | 
	 *                 (
	 *                     locations+=Pdi* 
	 *                     (
	 *                         (connections+=connection* ((regole+=Regola+ stati+=Stato+) | stati+=Stato+)) | 
	 *                         (connections+=connection* events+=Event+ ((regole+=Regola+ stati+=Stato+) | stati+=Stato+))
	 *                     )
	 *                 ) | 
	 *                 (regole+=Regola+ stati+=Stato+) | 
	 *                 stati+=Stato+
	 *             )? 
	 *             dipendenze+=StateDep+ 
	 *             agents+=Agent+ 
	 *             (
	 *                 (have_obj?='objective:' objective=Objective (have_reach_obj?='reach_objective:' reachobjective=ReachObjective)) | 
	 *                 (have_reach_obj?='reach_objective:' reachobjective=ReachObjective)
	 *             )?
	 *         ) | 
	 *         (
	 *             (
	 *                 (locations+=Pdi* ((stati+=Stato+ agents+=Agent+) | agents+=Agent+)) | 
	 *                 (
	 *                     locations+=Pdi* 
	 *                     (
	 *                         (connections+=connection* ((stati+=Stato+ agents+=Agent+) | agents+=Agent+)) | 
	 *                         (connections+=connection* events+=Event+ ((stati+=Stato+ agents+=Agent+) | agents+=Agent+))
	 *                     )
	 *                 ) | 
	 *                 (
	 *                     (
	 *                         (locations+=Pdi* regole+=Regola+) | 
	 *                         (locations+=Pdi* ((connections+=connection* regole+=Regola+) | (connections+=connection* events+=Event+ regole+=Regola+))) | 
	 *                         regole+=Regola+
	 *                     ) 
	 *                     ((stati+=Stato+ agents+=Agent+) | agents+=Agent+)
	 *                 ) | 
	 *                 (stati+=Stato+ agents+=Agent+) | 
	 *                 agents+=Agent+
	 *             ) 
	 *             have_obj?='objective:' 
	 *             objective=Objective 
	 *             (have_reach_obj?='reach_objective:' reachobjective=ReachObjective)
	 *         ) | 
	 *         (locations+=Pdi* ((stati+=Stato+ agents+=Agent+) | agents+=Agent+)) | 
	 *         (
	 *             locations+=Pdi* 
	 *             (
	 *                 (connections+=connection* ((stati+=Stato+ agents+=Agent+) | agents+=Agent+)) | 
	 *                 (connections+=connection* events+=Event+ ((stati+=Stato+ agents+=Agent+) | agents+=Agent+))
	 *             )
	 *         ) | 
	 *         (
	 *             (
	 *                 (locations+=Pdi* regole+=Regola+) | 
	 *                 (locations+=Pdi* ((connections+=connection* regole+=Regola+) | (connections+=connection* events+=Event+ regole+=Regola+))) | 
	 *                 regole+=Regola+
	 *             ) 
	 *             ((stati+=Stato+ agents+=Agent+) | agents+=Agent+)
	 *         ) | 
	 *         (
	 *             (
	 *                 (locations+=Pdi* ((stati+=Stato+ agents+=Agent+) | agents+=Agent+)) | 
	 *                 (
	 *                     locations+=Pdi* 
	 *                     (
	 *                         (connections+=connection* ((stati+=Stato+ agents+=Agent+) | agents+=Agent+)) | 
	 *                         (connections+=connection* events+=Event+ ((stati+=Stato+ agents+=Agent+) | agents+=Agent+))
	 *                     )
	 *                 ) | 
	 *                 (
	 *                     (
	 *                         (locations+=Pdi* regole+=Regola+) | 
	 *                         (locations+=Pdi* ((connections+=connection* regole+=Regola+) | (connections+=connection* events+=Event+ regole+=Regola+))) | 
	 *                         regole+=Regola+
	 *                     ) 
	 *                     ((stati+=Stato+ agents+=Agent+) | agents+=Agent+)
	 *                 ) | 
	 *                 (stati+=Stato+ agents+=Agent+) | 
	 *                 agents+=Agent+
	 *             ) 
	 *             (have_reach_obj?='reach_objective:' reachobjective=ReachObjective)
	 *         ) | 
	 *         (stati+=Stato+ agents+=Agent+) | 
	 *         agents+=Agent+
	 *     )?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Objective returns Objective
	 *
	 * Constraint:
	 *     ((is_if?='if' cause=[Event|ID] reaction=[Event|ID] time=INT) | (is_avoid?='avoid' lose=[Event|ID]))
	 */
	protected void sequence_Objective(ISerializationContext context, Objective semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pdi returns Pdi
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Pdi(ISerializationContext context, Pdi semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PursuePackage.Literals.PDI__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PursuePackage.Literals.PDI__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPdiAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReachObjective returns ReachObjective
	 *
	 * Constraint:
	 *     (goal=[Event|ID] life_span=INT)
	 */
	protected void sequence_ReachObjective(ISerializationContext context, ReachObjective semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PursuePackage.Literals.REACH_OBJECTIVE__GOAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PursuePackage.Literals.REACH_OBJECTIVE__GOAL));
			if (transientValues.isValueTransient(semanticObject, PursuePackage.Literals.REACH_OBJECTIVE__LIFE_SPAN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PursuePackage.Literals.REACH_OBJECTIVE__LIFE_SPAN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReachObjectiveAccess().getGoalEventIDTerminalRuleCall_1_0_1(), semanticObject.eGet(PursuePackage.Literals.REACH_OBJECTIVE__GOAL, false));
		feeder.accept(grammarAccess.getReachObjectiveAccess().getLife_spanINTTerminalRuleCall_3_0(), semanticObject.getLife_span());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Regola returns Regola
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         (first_ev=[Event|ID] | (is_seq1?='(' first_seq=Sequence)) 
	 *         (then?='before' | or?='or') 
	 *         (second_ev=[Event|ID] | (is_seq2?='(' second_seq=Sequence))
	 *     )
	 */
	protected void sequence_Regola(ISerializationContext context, Regola semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sequence returns Sequence
	 *
	 * Constraint:
	 *     (
	 *         (first_ev=[Event|ID] | (is_seq1?='(' first_seq=Sequence)) 
	 *         (then?='before' | or?='or') 
	 *         (second_ev=[Event|ID] | (is_seq2?='(' second_seq=Sequence))
	 *     )
	 */
	protected void sequence_Sequence(ISerializationContext context, Sequence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateDep returns StateDep
	 *
	 * Constraint:
	 *     (evento=[Event|ID] ((stat=[Stato|ID] tr?='is_true') | (stat=[Stato|ID] fl?='is_false')))
	 */
	protected void sequence_StateDep(ISerializationContext context, StateDep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Stato returns Stato
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         (tr?='true' | fl?='false') 
	 *         true_events+=[Event|ID] 
	 *         true_events+=[Event|ID]* 
	 *         false_events+=[Event|ID] 
	 *         false_events+=[Event|ID]*
	 *     )
	 */
	protected void sequence_Stato(ISerializationContext context, Stato semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     connection returns connection
	 *
	 * Constraint:
	 *     (pdi1=[Pdi|ID] pdi2=[Pdi|ID] distance=INT)
	 */
	protected void sequence_connection(ISerializationContext context, connection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PursuePackage.Literals.CONNECTION__PDI1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PursuePackage.Literals.CONNECTION__PDI1));
			if (transientValues.isValueTransient(semanticObject, PursuePackage.Literals.CONNECTION__PDI2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PursuePackage.Literals.CONNECTION__PDI2));
			if (transientValues.isValueTransient(semanticObject, PursuePackage.Literals.CONNECTION__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PursuePackage.Literals.CONNECTION__DISTANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConnectionAccess().getPdi1PdiIDTerminalRuleCall_1_0_1(), semanticObject.eGet(PursuePackage.Literals.CONNECTION__PDI1, false));
		feeder.accept(grammarAccess.getConnectionAccess().getPdi2PdiIDTerminalRuleCall_3_0_1(), semanticObject.eGet(PursuePackage.Literals.CONNECTION__PDI2, false));
		feeder.accept(grammarAccess.getConnectionAccess().getDistanceINTTerminalRuleCall_5_0(), semanticObject.getDistance());
		feeder.finish();
	}
	
	
}
